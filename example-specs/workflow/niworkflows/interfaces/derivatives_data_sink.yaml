# This file is used to manually specify the semi-automatic conversion of
# 'niworkflows.interfaces.bids.DerivativesDataSink' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Store derivative files.
# 
#     Saves the ``in_file`` into a BIDS-Derivatives folder provided
#     by ``base_directory``, given the input reference ``source_file``.
# 
#     .. testsetup::
# 
#         >>> data_dir_canary()
# 
#     >>> import tempfile
#     >>> tmpdir = Path(tempfile.mkdtemp())
#     >>> tmpfile = tmpdir / 'a_temp_file.nii.gz'
#     >>> tmpfile.open('w').close()  # "touch" the file
#     >>> t1w_source = bids_collect_data(
#     ...     str(datadir / 'ds114'), '01', bids_validate=False)[0]['t1w'][0]
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False)
#     >>> dsink.inputs.in_file = str(tmpfile)
#     >>> dsink.inputs.source_file = t1w_source
#     >>> dsink.inputs.desc = 'denoised'
#     >>> dsink.inputs.compress = False
#     >>> res = dsink.run()
#     >>> res.outputs.out_file  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-01/ses-retest/anat/sub-01_ses-retest_desc-denoised_T1w.nii'
# 
#     >>> tmpfile = tmpdir / 'a_temp_file.nii'
#     >>> tmpfile.open('w').close()  # "touch" the file
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False,
#     ...                             allowed_entities=("custom",))
#     >>> dsink.inputs.in_file = str(tmpfile)
#     >>> dsink.inputs.source_file = t1w_source
#     >>> dsink.inputs.custom = 'noise'
#     >>> res = dsink.run()
#     >>> res.outputs.out_file  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-01/ses-retest/anat/sub-01_ses-retest_custom-noise_T1w.nii'
# 
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False,
#     ...                             allowed_entities=("custom",))
#     >>> dsink.inputs.in_file = [str(tmpfile), str(tmpfile)]
#     >>> dsink.inputs.source_file = t1w_source
#     >>> dsink.inputs.custom = [1, 2]
#     >>> dsink.inputs.compress = True
#     >>> res = dsink.run()
#     >>> res.outputs.out_file  # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
#     ['.../niworkflows/sub-01/ses-retest/anat/sub-01_ses-retest_custom-1_T1w.nii.gz',
#      '.../niworkflows/sub-01/ses-retest/anat/sub-01_ses-retest_custom-2_T1w.nii.gz']
# 
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False,
#     ...                             allowed_entities=("custom1", "custom2"))
#     >>> dsink.inputs.in_file = [str(tmpfile)] * 2
#     >>> dsink.inputs.source_file = t1w_source
#     >>> dsink.inputs.custom1 = [1, 2]
#     >>> dsink.inputs.custom2 = "b"
#     >>> res = dsink.run()
#     >>> res.outputs.out_file  # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
#     ['.../niworkflows/sub-01/ses-retest/anat/sub-01_ses-retest_custom1-1_custom2-b_T1w.nii',
#      '.../niworkflows/sub-01/ses-retest/anat/sub-01_ses-retest_custom1-2_custom2-b_T1w.nii']
# 
#     When multiple source files are passed, only common entities are passed down.
#     For example, if two T1w images from different sessions are used to generate
#     a single image, the session entity is removed automatically.
# 
#     >>> bids_dir = tmpdir / 'bidsroot'
#     >>> multi_source = [
#     ...     bids_dir / 'sub-02/ses-A/anat/sub-02_ses-A_T1w.nii.gz',
#     ...     bids_dir / 'sub-02/ses-B/anat/sub-02_ses-B_T1w.nii.gz']
#     >>> for source_file in multi_source:
#     ...     source_file.parent.mkdir(parents=True, exist_ok=True)
#     ...     _ = source_file.write_text("")
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False)
#     >>> dsink.inputs.in_file = str(tmpfile)
#     >>> dsink.inputs.source_file = list(map(str, multi_source))
#     >>> dsink.inputs.desc = 'preproc'
#     >>> res = dsink.run()
#     >>> res.outputs.out_file  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-02/anat/sub-02_desc-preproc_T1w.nii'
# 
#     If, on the other hand, only one is used, the session is preserved:
# 
#     >>> dsink.inputs.source_file = str(multi_source[0])
#     >>> res = dsink.run()
#     >>> res.outputs.out_file  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-02/ses-A/anat/sub-02_ses-A_desc-preproc_T1w.nii'
# 
#     >>> bids_dir = tmpdir / 'bidsroot' / 'sub-02' / 'ses-noanat' / 'func'
#     >>> bids_dir.mkdir(parents=True, exist_ok=True)
#     >>> tricky_source = bids_dir / 'sub-02_ses-noanat_task-rest_run-01_bold.nii.gz'
#     >>> tricky_source.open('w').close()
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False)
#     >>> dsink.inputs.in_file = str(tmpfile)
#     >>> dsink.inputs.source_file = str(tricky_source)
#     >>> dsink.inputs.desc = 'preproc'
#     >>> res = dsink.run()
#     >>> res.outputs.out_file  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-02/ses-noanat/func/sub-02_ses-noanat_task-rest_run-01_desc-preproc_bold.nii'
# 
#     >>> bids_dir = tmpdir / 'bidsroot' / 'sub-02' / 'ses-noanat' / 'func'
#     >>> bids_dir.mkdir(parents=True, exist_ok=True)
#     >>> tricky_source = bids_dir / 'sub-02_ses-noanat_task-rest_run-01_bold.nii.gz'
#     >>> tricky_source.open('w').close()
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False)
#     >>> dsink.inputs.in_file = str(tmpfile)
#     >>> dsink.inputs.source_file = str(tricky_source)
#     >>> dsink.inputs.desc = 'preproc'
#     >>> dsink.inputs.RepetitionTime = 0.75
#     >>> res = dsink.run()
#     >>> res.outputs.out_meta  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-02/ses-noanat/func/sub-02_ses-noanat_task-rest_run-01_desc-preproc_bold.json'
# 
#     >>> Path(res.outputs.out_meta).read_text().splitlines()[1]
#     '  "RepetitionTime": 0.75'
# 
#     >>> bids_dir = tmpdir / 'bidsroot' / 'sub-02' / 'ses-noanat' / 'func'
#     >>> bids_dir.mkdir(parents=True, exist_ok=True)
#     >>> tricky_source = bids_dir / 'sub-02_ses-noanat_task-rest_run-01_bold.nii.gz'
#     >>> tricky_source.open('w').close()
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False,
#     ...                             SkullStripped=True)
#     >>> dsink.inputs.in_file = str(tmpfile)
#     >>> dsink.inputs.source_file = str(tricky_source)
#     >>> dsink.inputs.desc = 'preproc'
#     >>> dsink.inputs.space = 'MNI152NLin6Asym'
#     >>> dsink.inputs.resolution = '01'
#     >>> dsink.inputs.RepetitionTime = 0.75
#     >>> res = dsink.run()
#     >>> res.outputs.out_meta  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-02/ses-noanat/func/sub-02_ses-noanat_task-rest_run-01_space-MNI152NLin6Asym_res-01_desc-preproc_bold.json'
# 
#     >>> lines = Path(res.outputs.out_meta).read_text().splitlines()
#     >>> lines[1]
#     '  "RepetitionTime": 0.75,'
# 
#     >>> lines[2]  # doctest: +ELLIPSIS
#     '  "Resolution": "Template MNI152NLin6Asym (1.0x1.0x1.0 mm^3)...'
# 
#     >>> lines[3]
#     '  "SkullStripped": true'
# 
#     >>> bids_dir = tmpdir / 'bidsroot' / 'sub-02' / 'ses-noanat' / 'func'
#     >>> bids_dir.mkdir(parents=True, exist_ok=True)
#     >>> tricky_source = bids_dir / 'sub-02_ses-noanat_task-rest_run-01_bold.nii.gz'
#     >>> tricky_source.open('w').close()
#     >>> dsink = DerivativesDataSink(base_directory=str(tmpdir), check_hdr=False,
#     ...                             SkullStripped=True)
#     >>> dsink.inputs.in_file = str(tmpfile)
#     >>> dsink.inputs.source_file = str(tricky_source)
#     >>> dsink.inputs.desc = 'preproc'
#     >>> dsink.inputs.resolution = 'native'
#     >>> dsink.inputs.space = 'MNI152NLin6Asym'
#     >>> dsink.inputs.RepetitionTime = 0.75
#     >>> dsink.inputs.meta_dict = {'RepetitionTime': 1.75, 'SkullStripped': False, 'Z': 'val'}
#     >>> res = dsink.run()
#     >>> res.outputs.out_meta  # doctest: +ELLIPSIS
#     '.../niworkflows/sub-02/ses-noanat/func/sub-02_ses-noanat_task-rest_run-01_space-MNI152NLin6Asym_desc-preproc_bold.json'
# 
#     >>> lines = Path(res.outputs.out_meta).read_text().splitlines()
#     >>> lines[1]
#     '  "RepetitionTime": 0.75,'
# 
#     >>> lines[2]
#     '  "SkullStripped": true,'
# 
#     >>> lines[3]
#     '  "Z": "val"'
# 
#     
task_name: DerivativesDataSink
nipype_name: DerivativesDataSink
nipype_module: niworkflows.interfaces.bids
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    base_directory: generic/directory
    # type=directory|default='': Path to the base directory for storing data.
    in_file: generic/file+list-of
    # type=inputmultiobject|default=[]: the object to be saved
    source_file: generic/file+list-of
    # type=inputmultiobject|default=[]: the source file(s) to extract entities from
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file+list-of
    # type=outputmultiobject: 
    out_meta: generic/file+list-of
    # type=outputmultiobject: 
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    base_directory:
    # type=directory|default='': Path to the base directory for storing data.
    check_hdr:
    # type=bool|default=True: fix headers of NIfTI outputs
    compress:
    # type=inputmultiobject|default=[]: whether ``in_file`` should be compressed (True), uncompressed (False) or left unmodified (None, default).
    data_dtype:
    # type=str|default='': NumPy datatype to coerce NIfTI data to, or `source` tomatch the input file dtype
    dismiss_entities:
    # type=inputmultiobject|default=[]: a list entities that will not be propagated from the source file
    in_file:
    # type=inputmultiobject|default=[]: the object to be saved
    meta_dict:
    # type=dict|default={}: an input dictionary containing metadata
    source_file:
    # type=inputmultiobject|default=[]: the source file(s) to extract entities from
  imports:
  # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
