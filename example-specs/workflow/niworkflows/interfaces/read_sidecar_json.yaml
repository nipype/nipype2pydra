# This file is used to manually specify the semi-automatic conversion of
# 'niworkflows.interfaces.bids.ReadSidecarJSON' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
#
#     Read JSON sidecar files of a BIDS tree.
#
#     .. testsetup::
#
#         >>> data_dir_canary()
#
#     >>> fmap = str(datadir / 'ds054' / 'sub-100185' / 'fmap' /
#     ...            'sub-100185_phasediff.nii.gz')
#
#     >>> meta = ReadSidecarJSON(in_file=fmap, bids_dir=str(datadir / 'ds054'),
#     ...                        bids_validate=False).run()
#     >>> meta.outputs.subject
#     '100185'
#     >>> meta.outputs.suffix
#     'phasediff'
#     >>> meta.outputs.out_dict['Manufacturer']
#     'SIEMENS'
#     >>> meta = ReadSidecarJSON(in_file=fmap, fields=['Manufacturer'],
#     ...                        bids_dir=str(datadir / 'ds054'),
#     ...                        bids_validate=False).run()
#     >>> meta.outputs.out_dict['Manufacturer']
#     'SIEMENS'
#     >>> meta.outputs.Manufacturer
#     'SIEMENS'
#     >>> meta.outputs.OtherField  # doctest: +IGNORE_EXCEPTION_DETAIL
#     Traceback (most recent call last):
#     AttributeError:
#     >>> meta = ReadSidecarJSON(
#     ...     in_file=fmap, fields=['MadeUpField'],
#     ...     bids_dir=str(datadir / 'ds054'),
#     ...     bids_validate=False).run()  # doctest: +IGNORE_EXCEPTION_DETAIL
#     Traceback (most recent call last):
#     KeyError:
#     >>> meta = ReadSidecarJSON(in_file=fmap, fields=['MadeUpField'],
#     ...                        undef_fields=True,
#     ...                        bids_dir=str(datadir / 'ds054'),
#     ...                        bids_validate=False).run()
#     >>> meta.outputs.MadeUpField
#     <undefined>
#
#
task_name: ReadSidecarJSON
nipype_name: ReadSidecarJSON
nipype_module: niworkflows.interfaces.bids
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: the input nifti file
    index_db: generic/directory
    # type=directory|default=<undefined>: a PyBIDS layout cache directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
    # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
    # to set to the `callable` attribute of output fields
    acquisition: acquisition_callable
    # type=str:
    out_dict: out_dict_callable
    # type=dict:
    reconstruction: reconstruction_callable
    # type=str:
    run: run_callable
    # type=int:
    session: session_callable
    # type=str:
    subject: subject_callable
    # type=str:
    suffix: suffix_callable
    # type=str:
    task: task_callable
    # type=str:
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
  - inputs:
      # dict[str, str] - values to provide to inputs fields in the task initialisation
      # (if not specified, will try to choose a sensible value)
      in_file:
      # type=file|default=<undefined>: the input nifti file
      bids_dir:
      # type=traitcompound|default=None: optional bids directory
      bids_validate:
      # type=bool|default=True: enable BIDS validator
      index_db:
      # type=directory|default=<undefined>: a PyBIDS layout cache directory
    imports:
    # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
    # consisting of 'module', 'name', and optionally 'alias' keys
    expected_outputs:
    # dict[str, str] - expected values for selected outputs, noting that tests will typically
    # be terminated before they complete for time-saving reasons, and therefore
    # these values will be ignored, when running in CI
    timeout: 10
    # int - the value to set for the timeout in the generated test,
    # after which the test will be considered to have been initialised
    # successfully. Set to 0 to disable the timeout (warning, this could
    # lead to the unittests taking a very long time to complete)
    xfail: true
    # bool - whether the unittest is expected to fail or not. Set to false
    # when you are satisfied with the edits you have made to this file
doctests: []
find_replace:
  - [self\., ""]
  - ["or layout", ""]
  - ["\\b_fields\\b", "fields"]
  - ["index_db: Directory", "index_db: Directory, fields: ty.List[str]"]
  - ["class _BIDSInfoOutputSpec\\(.+?(?=\\n\\n)", ""]
  - [
      "list\\(_BIDSInfoOutputSpec\\(\\).get\\(\\).keys\\(\\)\\)",
      "['subject', 'session', 'task', 'acquisition', 'reconstruction', 'run', 'suffix']",
    ]
  - ["not _undef_fields and ", ""]
  - [", subject", ", _results['subject']"]
  - [", session", ", _results['session']"]
  - [", task", ", _results['task']"]
  - [", acquisition", ", _results['acquisition']"]
  - [", reconstruction", ", _results['reconstruction']"]
  - [", run", ", _results['run']"]
  - [", suffix", ", _results['suffix']"]
