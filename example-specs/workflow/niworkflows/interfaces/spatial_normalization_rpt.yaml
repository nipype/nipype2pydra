# This file is used to manually specify the semi-automatic conversion of
# 'niworkflows.interfaces.reportlets.registration.SpatialNormalizationRPT' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
#
task_name: SpatialNormalizationRPT
nipype_name: SpatialNormalizationRPT
nipype_module: niworkflows.interfaces.reportlets.registration
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    initial_moving_transform: generic/file
    # type=file|default=<undefined>: transform for initialization
    lesion_mask: medimage/itk-image
    # type=file|default=<undefined>: lesion mask image
    moving_image: medimage/itk-image+list-of,medimage/itk-image
    # type=file|default=<undefined>: image to apply transformation to
    moving_mask: medimage/itk-image
    # type=file|default=<undefined>: moving image mask
    out_report: Path
    # type=file: filename for the visual report
    # type=file|default='report.svg': filename for the visual report
    reference_image: medimage/itk-image
    # type=file: reference image used for registration target
    # type=file|default=<undefined>: override the reference image
    reference_mask: medimage/itk-image
    # type=file|default=<undefined>: reference image mask
    settings: generic/file+list-of
    # type=list|default=[]: pass on the list of settings files
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    composite_transform: generic/file
    # type=file: Composite transform file
    forward_transforms: generic/file+list-of
    # type=list: List of output transforms for forward registration
    inverse_composite_transform: generic/file
    # type=file: Inverse composite transform file
    inverse_warped_image: medimage/itk-image+list-of,medimage/itk-image
    # type=file: Outputs the inverse of the warped image
    out_report: generic/file
    # type=file: filename for the visual report
    # type=file|default='report.svg': filename for the visual report
    reference_image: medimage/itk-image+list-of,medimage/itk-image
    # type=file: reference image used for registration target
    # type=file|default=<undefined>: override the reference image
    reverse_forward_transforms: generic/file+list-of
    # type=list: List of output transforms for forward registration reversed for antsApplyTransform
    reverse_transforms: generic/file+list-of
    # type=list: List of output transforms for reverse registration
    save_state: generic/file
    # type=file: The saved registration state to be restored
    warped_image: medimage/itk-image+list-of,medimage/itk-image
    # type=file: Outputs warped image
  callables:
    # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
    # to set to the `callable` attribute of output fields
    elapsed_time: elapsed_time_callable
    # type=float: the total elapsed time as reported by ANTs
    metric_value: metric_value_callable
    # type=float: the final value of metric
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
  - inputs:
      # dict[str, str] - values to provide to inputs fields in the task initialisation
      # (if not specified, will try to choose a sensible value)
      out_report:
      # type=file: filename for the visual report
      # type=file|default='report.svg': filename for the visual report
      compress_report:
      # type=enum|default='auto'|allowed['auto',False,True]: Compress the reportlet using SVGO orWEBP. 'auto' - compress if relevant software is installed, True = force,False - don't attempt to compress
      moving_image:
      # type=file|default=<undefined>: image to apply transformation to
      reference_image:
      # type=file: reference image used for registration target
      # type=file|default=<undefined>: override the reference image
      moving_mask:
      # type=file|default=<undefined>: moving image mask
      reference_mask:
      # type=file|default=<undefined>: reference image mask
      lesion_mask:
      # type=file|default=<undefined>: lesion mask image
      num_threads:
      # type=int|default=12: Number of ITK threads to use
      flavor:
      # type=enum|default='precise'|allowed['fast','precise','testing']: registration settings parameter set
      orientation:
      # type=enum|default='RAS'|allowed['LAS','RAS']: modify template orientation (should match input image)
      reference:
      # type=enum|default='T1w'|allowed['PDw','T1w','T2w','boldref']: set the reference modality for registration
      moving:
      # type=enum|default='T1w'|allowed['T1w','boldref']: registration type
      template:
      # type=str|default='MNI152NLin2009cAsym': define the template to be used
      settings:
      # type=list|default=[]: pass on the list of settings files
      template_spec:
      # type=dict|default={}: template specifications
      template_resolution:
      # type=enum|default=1|allowed[1,2,None]: (DEPRECATED) template resolution
      explicit_masking:
      # type=bool|default=True: Set voxels outside the masks to zero thus creating an artificial border that can drive the registration. Requires reliable and accurate masks. See https://sourceforge.net/p/advants/discussion/840261/thread/27216e69/#c7ba
      initial_moving_transform:
      # type=file|default=<undefined>: transform for initialization
      float:
      # type=bool|default=False: use single precision calculations
    imports:
    # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
    # consisting of 'module', 'name', and optionally 'alias' keys
    expected_outputs:
    # dict[str, str] - expected values for selected outputs, noting that tests will typically
    # be terminated before they complete for time-saving reasons, and therefore
    # these values will be ignored, when running in CI
    timeout: 10
    # int - the value to set for the timeout in the generated test,
    # after which the test will be considered to have been initialised
    # successfully. Set to 0 to disable the timeout (warning, this could
    # lead to the unittests taking a very long time to complete)
    xfail: true
    # bool - whether the unittest is expected to fail or not. Set to false
    # when you are satisfied with the edits you have made to this file
doctests: []
