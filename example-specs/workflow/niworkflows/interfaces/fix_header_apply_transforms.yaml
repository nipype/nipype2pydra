# This file is used to manually specify the semi-automatic conversion of
# 'niworkflows.interfaces.fixes.FixHeaderApplyTransforms' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
#
#     A replacement for nipype.interfaces.ants.resampling.ApplyTransforms that
#     fixes the resampled image header to match the xform of the reference
#     image
#
task_name: FixHeaderApplyTransforms
nipype_name: FixHeaderApplyTransforms
nipype_module: niworkflows.interfaces.fixes
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    input_image: medimage/itk-image+list-of,medimage/itk-image
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image: medimage/itk-image+list-of,medimage/itk-image
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    output_image: medimage/itk-image+list-of,medimage/itk-image
    # type=file: Warped image
    # type=str|default='': output file name
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
    # dict[str, str] - `output_file_template` values to be provided to output fields
    output_image: output_image
    # type=file: Warped image
    # type=str|default='': output file name
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
  - inputs:
      # dict[str, str] - values to provide to inputs fields in the task initialisation
      # (if not specified, will try to choose a sensible value)
      transforms:
      # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
      dimension:
      # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
      input_image_type:
      # type=enum|default=0|allowed[0,1,2,3]: Option specifying the input image type of scalar (default), vector, tensor, or time series.
      input_image:
      # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
      output_image:
      # type=file: Warped image
      # type=str|default='': output file name
      out_postfix:
      # type=str|default='_trans': Postfix that is appended to all output files (default = _trans)
      reference_image:
      # type=file|default=<undefined>: reference image space that you wish to warp INTO
      interpolation:
      # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']:
      interpolation_parameters:
      # type=traitcompound|default=None:
      invert_transform_flags:
      # type=inputmultiobject|default=[]:
      default_value:
      # type=float|default=0.0:
      print_out_composite_warp_file:
      # type=bool|default=False: output a composite warp file instead of a transformed image
      float:
      # type=bool|default=False: Use float instead of double for computations.
      num_threads:
      # type=int|default=1: Number of ITK threads to use
      args:
      # type=str|default='': Additional parameters to the command
      environ:
      # type=dict|default={}: Environment variables
    imports:
    # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
    # consisting of 'module', 'name', and optionally 'alias' keys
    expected_outputs:
    # dict[str, str] - expected values for selected outputs, noting that tests will typically
    # be terminated before they complete for time-saving reasons, and therefore
    # these values will be ignored, when running in CI
    timeout: 10
    # int - the value to set for the timeout in the generated test,
    # after which the test will be considered to have been initialised
    # successfully. Set to 0 to disable the timeout (warning, this could
    # lead to the unittests taking a very long time to complete)
    xfail: true
    # bool - whether the unittest is expected to fail or not. Set to false
    # when you are satisfied with the edits you have made to this file
doctests: []
