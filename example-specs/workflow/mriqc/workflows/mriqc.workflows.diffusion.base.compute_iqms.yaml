# name of the converted workflow constructor function
name: compute_iqms
# name of the nipype workflow constructor
nipype_name: compute_iqms
# name of the nipype module the function is found within, e.g. mriqc.workflows.anatomical.base
nipype_module: mriqc.workflows.diffusion.base
# Name of the node that is to be considered the input of the workflow, i.e. its outputs will be the inputs of the workflow
input_node: inputnode
outputs:
  out_file:
    node_name: measures
    field: out_qc
    export: true
    replaces:
      - [outputnode, out_file]
  noise_floor:
    node_name: estimate_sigma
    field: out
    export: true
    replaces:
      - [outputnode, noise_floor]
# Generic regular expression substitutions to be run over the code before it is processed
find_replace:
  - ["config = NipypeConfig\\(\\)", ""]
  - ["iflogger = logging.getLogger\\(\"nipype.interface\"\\)", ""]
  - ["logging = Logging\\(config\\)", ""]
# name of the workflow variable that is returned
workflow_variable: workflow
# the names of the nested workflows that are defined in other modules and need to be imported
external_nested_workflows: null
