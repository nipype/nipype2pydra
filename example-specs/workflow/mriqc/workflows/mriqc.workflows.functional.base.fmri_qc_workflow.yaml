# name of the converted workflow constructor function
name: fmri_qc_workflow
# name of the nipype workflow constructor
nipype_name: fmri_qc_workflow
# name of the nipype module the function is found within, e.g. mriqc.workflows.anatomical.base
nipype_module: mriqc.workflows.functional.base
# Name of the node that is to be considered the input of the workflow, i.e. its outputs will be the inputs of the workflow
input_node: inputnode
inputs:
  metadata:
    node_name: meta
    field: out_dict
    type: dict
# Generic regular expression substitutions to be run over the code before it is processed
find_replace:
  - [from pydra.tasks.mriqc.messages import BUILDING_WORKFLOW, ""]
  - [BUILDING_WORKFLOW, "'Building {modality} MRIQC workflow {detail}.'"]
  - ["config = NipypeConfig\\(\\)", ""]
  - ["iflogger = logging.getLogger\\(\"nipype.interface\"\\)", ""]
  - ["logging = Logging\\(config\\)", ""]
  - ["full_files = \\[\\].*?= full_files", ""]
  - [
      "# fmt: off\\n\\s*workflow.set_output\\(\\[\\('iqmswf_out_file', workflow.iqmswf.lzout.out_file\\)\\]\\)",
      "",
    ]
# name of the workflow variable that is returned
workflow_variable: workflow
# the names of the nested workflows that are defined in other modules and need to be imported
external_nested_workflows: null
