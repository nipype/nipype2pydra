# name of the converted workflow constructor function
name: init_func_report_wf
# name of the nipype workflow constructor
nipype_name: init_func_report_wf
# name of the nipype module the function is found within, e.g. mriqc.workflows.anatomical.base
nipype_module: mriqc.workflows.functional.output
# Name of the node that is to be considered the input of the workflow, i.e. its outputs will be the inputs of the workflow
input_node: inputnode
# Name of the node that is to be considered the output of the workflow, i.e. its inputs will be the outputs of the workflow
outputs:
  mean_report:
    node_name: mosaic_mean
    field: out_file
    export: true
  stdev_report:
    node_name: mosaic_stddev
    field: out_file
    export: true
  background_report:
    node_name: mosaic_noise
    field: out_file
    export: true
  zoomed_report:
    node_name: mosaic_zoom
    field: out_file
    export: true
  carpet_report:
    node_name: bigplot
    field: out_file
    export: true
  spikes_report:
    node_name: mosaic_spikes
    field: out_file
    export: true

# Generic regular expression substitutions to be run over the code before it is processed
find_replace:
  - ["config = NipypeConfig\\(\\)", ""]
  - ["iflogger = logging.getLogger\\(\"nipype.interface\"\\)", ""]
  - ["logging = Logging\\(config\\)", ""]
  - [
      "if wf_fft_spikes_detector:",
      "if True:  # wf_fft_spikes_detector: - disabled so output is always created",
    ]
# name of the workflow variable that is returned
workflow_variable: workflow
# the names of the nested workflows that are defined in other modules and need to be imported
external_nested_workflows: null
