# This file is used to manually specify the semi-automatic conversion of
# 'mriqc.interfaces.bids.IQMFileSink' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
#
task_name: IQMFileSink
nipype_name: IQMFileSink
nipype_module: mriqc.interfaces.bids
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    out_dir: Path
    # type=file|default=<undefined>: the output directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: the output JSON file containing the IQMs
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
  - inputs:
      # dict[str, str] - values to provide to inputs fields in the task initialisation
      # (if not specified, will try to choose a sensible value)
      in_file:
      # type=str|default='': path of input file
      subject_id:
      # type=str|default='': the subject id
      modality:
      # type=str|default='': the qc type
      session_id:
      # type=traitcompound|default=None:
      task_id:
      # type=traitcompound|default=None:
      acq_id:
      # type=traitcompound|default=None:
      rec_id:
      # type=traitcompound|default=None:
      run_id:
      # type=traitcompound|default=None:
      dataset:
      # type=str|default='': dataset identifier
      dismiss_entities:
      # type=list|default=['part']:
      metadata:
      # type=dict|default={}:
      provenance:
      # type=dict|default={}:
      root:
      # type=dict|default={}: output root dictionary
      out_dir:
      # type=file|default=<undefined>: the output directory
      _outputs:
      # type=dict|default={}:
    imports:
    # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
    # consisting of 'module', 'name', and optionally 'alias' keys
    expected_outputs:
    # dict[str, str] - expected values for selected outputs, noting that tests will typically
    # be terminated before they complete for time-saving reasons, and therefore
    # these values will be ignored, when running in CI
    timeout: 10
    # int - the value to set for the timeout in the generated test,
    # after which the test will be considered to have been initialised
    # successfully. Set to 0 to disable the timeout (warning, this could
    # lead to the unittests taking a very long time to complete)
    xfail: true
    # bool - whether the unittest is expected to fail or not. Set to false
    # when you are satisfied with the edits you have made to this file
doctests: []
find_replace:
  - [config\.loggers\.\w+\., logger.]
