# This file is used to manually specify the semi-automatic conversion of
# 'mriqc.interfaces.functional.FunctionalQC' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Computes anatomical :abbr:`QC (Quality Control)` measures on the
#     structural image given as input
# 
#     
task_name: FunctionalQC
nipype_name: FunctionalQC
nipype_module: mriqc.interfaces.functional
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_dvars: generic/file
    # type=file|default=<undefined>: input file containing DVARS
    in_epi: generic/file
    # type=file|default=<undefined>: input EPI file
    in_fd: generic/file
    # type=file|default=<undefined>: motion parameters for FD computation
    in_hmc: generic/file
    # type=file|default=<undefined>: input motion corrected file
    in_mask: generic/file
    # type=file|default=<undefined>: input mask
    in_tsnr: generic/file
    # type=file|default=<undefined>: input tSNR volume
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
    dvars: dvars_callable
    # type=dict: 
    efc: efc_callable
    # type=float: 
    fber: fber_callable
    # type=float: 
    fd: fd_callable
    # type=dict: 
    fwhm: fwhm_callable
    # type=dict: full width half-maximum measure
    gsr: gsr_callable
    # type=dict: 
    out_qc: out_qc_callable
    # type=dict: output flattened dictionary with all measures
    size: size_callable
    # type=dict: 
    snr: snr_callable
    # type=float: 
    spacing: spacing_callable
    # type=dict: 
    summary: summary_callable
    # type=dict: 
    tsnr: tsnr_callable
    # type=float: 
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_epi:
    # type=file|default=<undefined>: input EPI file
    in_hmc:
    # type=file|default=<undefined>: input motion corrected file
    in_tsnr:
    # type=file|default=<undefined>: input tSNR volume
    in_mask:
    # type=file|default=<undefined>: input mask
    direction:
    # type=enum|default='all'|allowed['-x','-y','all','x','y']: direction for GSR computation
    in_fd:
    # type=file|default=<undefined>: motion parameters for FD computation
    fd_thres:
    # type=float|default=0.2: motion threshold for FD computation
    in_dvars:
    # type=file|default=<undefined>: input file containing DVARS
    in_fwhm:
    # type=list|default=[]: smoothness estimated with AFNI
  imports:
  # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
