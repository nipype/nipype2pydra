# This file is used to manually specify the semi-automatic conversion of
# 'mriqc.interfaces.common.ensure_size.EnsureSize' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
#
#     Checks the size of the input image and resamples it to have `pixel_size`.
#
task_name: EnsureSize
nipype_name: EnsureSize
nipype_module: mriqc.interfaces.common.ensure_size
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: input image
    in_mask: generic/file
    # type=file|default=<undefined>: input mask
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
    # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
    # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
    # from the nipype interface, but you may want to be more specific, particularly
    # for file types, where specifying the format also specifies the file that will be
    # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output image
    out_mask: generic/file
    # type=file: output mask
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
  - inputs:
      # dict[str, str] - values to provide to inputs fields in the task initialisation
      # (if not specified, will try to choose a sensible value)
      in_file:
      # type=file|default=<undefined>: input image
      in_mask:
      # type=file|default=<undefined>: input mask
      pixel_size:
      # type=float|default=2.0: desired pixel size (mm)
    imports:
    # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
    # consisting of 'module', 'name', and optionally 'alias' keys
    expected_outputs:
    # dict[str, str] - expected values for selected outputs, noting that tests will typically
    # be terminated before they complete for time-saving reasons, and therefore
    # these values will be ignored, when running in CI
    timeout: 10
    # int - the value to set for the timeout in the generated test,
    # after which the test will be considered to have been initialised
    # successfully. Set to 0 to disable the timeout (warning, this could
    # lead to the unittests taking a very long time to complete)
    xfail: true
    # bool - whether the unittest is expected to fail or not. Set to false
    # when you are satisfied with the edits you have made to this file
doctests: []
find_replace:
  - ["config.loggers.interface", "logger"]
  - [
      "messages.VOXEL_SIZE_SMALL",
      "'One or more voxel dimensions (%f, %f, %f) are smaller than the requested voxel size (%f) - diff=(%f, %f, %f)'",
    ]
  - ["messages.VOXEL_SIZE_OK", "'Voxel size is large enough.'"]
  - [
      "load_data = Loader\\(\"mriqc\"\\)",
      'load_data = Loader("pydra.tasks.mriqc")',
    ]
