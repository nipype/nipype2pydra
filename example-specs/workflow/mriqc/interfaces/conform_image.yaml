# This file is used to manually specify the semi-automatic conversion of
# 'mriqc.interfaces.common.conform_image.ConformImage' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Conforms an input image.
# 
#     List of nifti datatypes:
# 
#     .. note: Original Analyze 7.5 types
# 
#           DT_NONE                    0
#           DT_UNKNOWN                 0     / what it says, dude           /
#           DT_BINARY                  1     / binary (1 bit/voxel)         /
#           DT_UNSIGNED_CHAR           2     / unsigned char (8 bits/voxel) /
#           DT_SIGNED_SHORT            4     / signed short (16 bits/voxel) /
#           DT_SIGNED_INT              8     / signed int (32 bits/voxel)   /
#           DT_FLOAT                  16     / float (32 bits/voxel)        /
#           DT_COMPLEX                32     / complex (64 bits/voxel)      /
#           DT_DOUBLE                 64     / double (64 bits/voxel)       /
#           DT_RGB                   128     / RGB triple (24 bits/voxel)   /
#           DT_ALL                   255     / not very useful (?)          /
# 
#     .. note: Added names for the same data types
# 
#           DT_UINT8                   2
#           DT_INT16                   4
#           DT_INT32                   8
#           DT_FLOAT32                16
#           DT_COMPLEX64              32
#           DT_FLOAT64                64
#           DT_RGB24                 128
# 
#     .. note: New codes for NIfTI
# 
#           DT_INT8                  256     / signed char (8 bits)         /
#           DT_UINT16                512     / unsigned short (16 bits)     /
#           DT_UINT32                768     / unsigned int (32 bits)       /
#           DT_INT64                1024     / long long (64 bits)          /
#           DT_UINT64               1280     / unsigned long long (64 bits) /
#           DT_FLOAT128             1536     / long double (128 bits)       /
#           DT_COMPLEX128           1792     / double pair (128 bits)       /
#           DT_COMPLEX256           2048     / long double pair (256 bits)  /
#           NIFTI_TYPE_UINT8           2 /! unsigned char. /
#           NIFTI_TYPE_INT16           4 /! signed short. /
#           NIFTI_TYPE_INT32           8 /! signed int. /
#           NIFTI_TYPE_FLOAT32        16 /! 32 bit float. /
#           NIFTI_TYPE_COMPLEX64      32 /! 64 bit complex = 2 32 bit floats. /
#           NIFTI_TYPE_FLOAT64        64 /! 64 bit float = double. /
#           NIFTI_TYPE_RGB24         128 /! 3 8 bit bytes. /
#           NIFTI_TYPE_INT8          256 /! signed char. /
#           NIFTI_TYPE_UINT16        512 /! unsigned short. /
#           NIFTI_TYPE_UINT32        768 /! unsigned int. /
#           NIFTI_TYPE_INT64        1024 /! signed long long. /
#           NIFTI_TYPE_UINT64       1280 /! unsigned long long. /
#           NIFTI_TYPE_FLOAT128     1536 /! 128 bit float = long double. /
#           NIFTI_TYPE_COMPLEX128   1792 /! 128 bit complex = 2 64 bit floats. /
#           NIFTI_TYPE_COMPLEX256   2048 /! 256 bit complex = 2 128 bit floats /
# 
#     
task_name: ConformImage
nipype_name: ConformImage
nipype_module: mriqc.interfaces.common.conform_image
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: input image
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output conformed file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input image
    check_ras:
    # type=bool|default=True: check that orientation is RAS
    check_dtype:
    # type=bool|default=True: check data type
  imports:
  # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
