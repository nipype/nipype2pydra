# This file is used to manually specify the semi-automatic conversion of
# 'mriqc.interfaces.transitional.GCOR' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Computes the average correlation between every voxel
#     and ever other voxel, over any give mask.
#     For complete details, see the `@compute_gcor Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/@compute_gcor.html>`_
# 
#     Examples
#     ========
#     >>> from mriqc.interfaces.transitional import GCOR
#     >>> gcor = GCOR()
#     >>> gcor.inputs.in_file = 'func.nii'
#     >>> gcor.inputs.nfirst = 4
#     >>> gcor.cmdline  # doctest: +ALLOW_UNICODE
#     '@compute_gcor -nfirst 4 -input func.nii'
#     >>> res = gcor.run()  # doctest: +SKIP
# 
#     
task_name: GCOR
nipype_name: GCOR
nipype_module: mriqc.interfaces.transitional
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input dataset to compute the GCOR over
    mask: generic/file
    # type=file|default=<undefined>: mask dataset, for restricting the computation
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
    out: out_callable
    # type=float: global correlation value
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset to compute the GCOR over
    mask:
    # type=file|default=<undefined>: mask dataset, for restricting the computation
    nfirst:
    # type=int|default=0: specify number of initial TRs to ignore
    no_demean:
    # type=bool|default=False: do not (need to) demean as first step
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset to compute the GCOR over
    nfirst: '4'
    # type=int|default=0: specify number of initial TRs to ignore
  imports: &id001
  # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: mriqc.interfaces.transitional
    name: GCOR
    alias:
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: '@compute_gcor -nfirst 4 -input func.nii'
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"func.nii"'
    # type=file|default=<undefined>: input dataset to compute the GCOR over
    nfirst: '4'
    # type=int|default=0: specify number of initial TRs to ignore
  imports: *id001
  # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
