# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.model.Randomise' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# FSL Randomise: feeds the 4D projected FA data into GLM
#     modelling and thresholding
#     in order to find voxels which correlate with your model
# 
#     Example
#     -------
#     >>> import nipype.interfaces.fsl as fsl
#     >>> rand = fsl.Randomise(in_file='allFA.nii', mask = 'mask.nii', tcon='design.con', design_mat='design.mat')
#     >>> rand.cmdline
#     'randomise -i allFA.nii -o "randomise" -d design.mat -t design.con -m mask.nii'
# 
#     
task_name: Randomise
nipype_name: Randomise
nipype_module: nipype.interfaces.fsl.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: 4D input file
    design_mat: datascience/text-matrix
    # type=file|default=<undefined>: design matrix file
    tcon: medimage-fsl/con
    # type=file|default=<undefined>: t contrasts file
    fcon: generic/file
    # type=file|default=<undefined>: f contrasts file
    mask: medimage/nifti1
    # type=file|default=<undefined>: mask image
    x_block_labels: generic/file
    # type=file|default=<undefined>: exchangeability block labels file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: 4D input file
    base_name:
    # type=str|default='randomise': the rootname that all generated files will have
    design_mat:
    # type=file|default=<undefined>: design matrix file
    tcon:
    # type=file|default=<undefined>: t contrasts file
    fcon:
    # type=file|default=<undefined>: f contrasts file
    mask:
    # type=file|default=<undefined>: mask image
    x_block_labels:
    # type=file|default=<undefined>: exchangeability block labels file
    demean:
    # type=bool|default=False: demean data temporally before model fitting
    one_sample_group_mean:
    # type=bool|default=False: perform 1-sample group-mean test instead of generic permutation test
    show_total_perms:
    # type=bool|default=False: print out how many unique permutations would be generated and exit
    show_info_parallel_mode:
    # type=bool|default=False: print out information required for parallel mode and exit
    vox_p_values:
    # type=bool|default=False: output voxelwise (corrected and uncorrected) p-value images
    tfce:
    # type=bool|default=False: carry out Threshold-Free Cluster Enhancement
    tfce2D:
    # type=bool|default=False: carry out Threshold-Free Cluster Enhancement with 2D optimisation
    f_only:
    # type=bool|default=False: calculate f-statistics only
    raw_stats_imgs:
    # type=bool|default=False: output raw ( unpermuted ) statistic images
    p_vec_n_dist_files:
    # type=bool|default=False: output permutation vector and null distribution text files
    num_perm:
    # type=int|default=0: number of permutations (default 5000, set to 0 for exhaustive)
    seed:
    # type=int|default=0: specific integer seed for random number generator
    var_smooth:
    # type=int|default=0: use variance smoothing (std is in mm)
    c_thresh:
    # type=float|default=0.0: carry out cluster-based thresholding
    cm_thresh:
    # type=float|default=0.0: carry out cluster-mass-based thresholding
    f_c_thresh:
    # type=float|default=0.0: carry out f cluster thresholding
    f_cm_thresh:
    # type=float|default=0.0: carry out f cluster-mass thresholding
    tfce_H:
    # type=float|default=0.0: TFCE height parameter (default=2)
    tfce_E:
    # type=float|default=0.0: TFCE extent parameter (default=0.5)
    tfce_C:
    # type=float|default=0.0: TFCE connectivity (6 or 26; default=6)
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: 4D input file
    mask:
    # type=file|default=<undefined>: mask image
    tcon:
    # type=file|default=<undefined>: t contrasts file
    design_mat:
    # type=file|default=<undefined>: design matrix file
  imports: &id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: nipype.interfaces.fsl as fsl
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: randomise -i allFA.nii -o "randomise" -d design.mat -t design.con -m mask.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: 4D input file
    mask:
    # type=file|default=<undefined>: mask image
    tcon:
    # type=file|default=<undefined>: t contrasts file
    design_mat:
    # type=file|default=<undefined>: design matrix file
  imports: *id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
