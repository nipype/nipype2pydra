# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.epi.EddyQuad' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Interface for FSL eddy_quad, a tool for generating single subject reports
#     and storing the quality assessment indices for each subject.
#     `User guide <https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/eddyqc/UsersGuide>`__
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.fsl import EddyQuad
#     >>> quad = EddyQuad()
#     >>> quad.inputs.base_name  = 'eddy_corrected'
#     >>> quad.inputs.idx_file   = 'epi_index.txt'
#     >>> quad.inputs.param_file = 'epi_acqp.txt'
#     >>> quad.inputs.mask_file  = 'epi_mask.nii'
#     >>> quad.inputs.bval_file  = 'bvals.scheme'
#     >>> quad.inputs.bvec_file  = 'bvecs.scheme'
#     >>> quad.inputs.output_dir = 'eddy_corrected.qc'
#     >>> quad.inputs.field      = 'fieldmap_phase_fslprepared.nii'
#     >>> quad.inputs.verbose    = True
#     >>> quad.cmdline
#     'eddy_quad eddy_corrected --bvals bvals.scheme --bvecs bvecs.scheme --field fieldmap_phase_fslprepared.nii --eddyIdx epi_index.txt --mask epi_mask.nii --output-dir eddy_corrected.qc --eddyParams epi_acqp.txt --verbose'
#     >>> res = quad.run() # doctest: +SKIP
# 
#     
task_name: EddyQuad
nipype_name: EddyQuad
nipype_module: nipype.interfaces.fsl.epi
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    bval_file: generic/file
    # type=file|default=<undefined>: b-values file
    bvec_file: generic/file
    # type=file|default=<undefined>: b-vectors file - only used when <base_name>.eddy_residuals file is present
    field: generic/file
    # type=file|default=<undefined>: TOPUP estimated field (in Hz)
    idx_file: generic/file
    # type=file|default=<undefined>: File containing indices for all volumes into acquisition parameters
    mask_file: generic/file
    # type=file|default=<undefined>: Binary mask file
    param_file: text/text-file
    # type=file|default=<undefined>: File containing acquisition parameters
    slice_spec: generic/file
    # type=file|default=<undefined>: Text file specifying slice/group acquisition
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    avg_b0_pe_png: generic/file+list-of
    # type=list: Image showing mid-sagittal, -coronal and -axial slices of each averaged pe-direction b0 volume. Generated when using the -f option.
    avg_b_png: generic/file+list-of
    # type=list: Image showing mid-sagittal, -coronal and -axial slices of each averaged b-shell volume.
    clean_volumes: generic/file
    # type=file: Text file containing a list of clean volumes, based on the eddy squared residuals. To generate a version of the pre-processed dataset without outlier volumes, use: `fslselectvols -i <eddy_corrected_data> -o eddy_corrected_data_clean --vols=vols_no_outliers.txt`
    cnr_png: generic/file+list-of
    # type=list: Image showing mid-sagittal, -coronal and -axial slices of each b-shell CNR volume. Generated when CNR maps are available.
    qc_json: generic/file
    # type=file: Single subject database containing quality metrics and data info.
    qc_pdf: generic/file
    # type=file: Single subject QC report.
    residuals: generic/file
    # type=file: Text file containing the volume-wise mask-averaged squared residuals. Generated when residual maps are available.
    vdm_png: generic/file
    # type=file: Image showing mid-sagittal, -coronal and -axial slices of the voxel displacement map. Generated when using the -f option.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    base_name:
    # type=str|default='eddy_corrected': Basename (including path) for EDDY output files, i.e., corrected images and QC files
    idx_file:
    # type=file|default=<undefined>: File containing indices for all volumes into acquisition parameters
    param_file:
    # type=file|default=<undefined>: File containing acquisition parameters
    mask_file:
    # type=file|default=<undefined>: Binary mask file
    bval_file:
    # type=file|default=<undefined>: b-values file
    bvec_file:
    # type=file|default=<undefined>: b-vectors file - only used when <base_name>.eddy_residuals file is present
    output_dir:
    # type=str|default='': Output directory - default = '<base_name>.qc'
    field:
    # type=file|default=<undefined>: TOPUP estimated field (in Hz)
    slice_spec:
    # type=file|default=<undefined>: Text file specifying slice/group acquisition
    verbose:
    # type=bool|default=False: Display debug messages
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    param_file:
    # type=file|default=<undefined>: File containing acquisition parameters
    output_dir: '"eddy_corrected.qc"'
    # type=str|default='': Output directory - default = '<base_name>.qc'
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: eddy_quad eddy_corrected --bvals bvals.scheme --bvecs bvecs.scheme --field fieldmap_phase_fslprepared.nii --eddyIdx epi_index.txt --mask epi_mask.nii --output-dir eddy_corrected.qc --eddyParams epi_acqp.txt --verbose
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    param_file: '"epi_acqp.txt"'
    # type=file|default=<undefined>: File containing acquisition parameters
    output_dir: '"eddy_corrected.qc"'
    # type=str|default='': Output directory - default = '<base_name>.qc'
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
