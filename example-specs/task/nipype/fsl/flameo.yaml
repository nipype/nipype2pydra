# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.model.FLAMEO' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use FSL flameo command to perform higher level model fits
# 
#     Examples
#     --------
# 
#     Initialize FLAMEO with no options, assigning them when calling run:
# 
#     >>> from nipype.interfaces import fsl
#     >>> flameo = fsl.FLAMEO()
#     >>> flameo.inputs.cope_file = 'cope.nii.gz'
#     >>> flameo.inputs.var_cope_file = 'varcope.nii.gz'
#     >>> flameo.inputs.cov_split_file = 'cov_split.mat'
#     >>> flameo.inputs.design_file = 'design.mat'
#     >>> flameo.inputs.t_con_file = 'design.con'
#     >>> flameo.inputs.mask_file = 'mask.nii'
#     >>> flameo.inputs.run_mode = 'fe'
#     >>> flameo.cmdline
#     'flameo --copefile=cope.nii.gz --covsplitfile=cov_split.mat --designfile=design.mat --ld=stats --maskfile=mask.nii --runmode=fe --tcontrastsfile=design.con --varcopefile=varcope.nii.gz'
# 
#     
task_name: FLAMEO
nipype_name: FLAMEO
nipype_module: nipype.interfaces.fsl.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    cope_file: medimage/nifti-gz
    # type=file|default=<undefined>: cope regressor data file
    var_cope_file: medimage/nifti-gz
    # type=file|default=<undefined>: varcope weightings data file
    dof_var_cope_file: generic/file
    # type=file|default=<undefined>: dof data file for varcope data
    mask_file: medimage/nifti1
    # type=file|default=<undefined>: mask file
    design_file: datascience/text-matrix
    # type=file|default=<undefined>: design matrix file
    t_con_file: medimage-fsl/con
    # type=file|default=<undefined>: ascii matrix specifying t-contrasts
    f_con_file: generic/file
    # type=file|default=<undefined>: ascii matrix specifying f-contrasts
    cov_split_file: datascience/text-matrix
    # type=file|default=<undefined>: ascii matrix specifying the groups the covariance is split into
    log_dir: generic/directory
    # type=directory|default='stats': 
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    stats_dir: generic/directory
    # type=directory: directory storing model estimation output
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    cope_file:
    # type=file|default=<undefined>: cope regressor data file
    var_cope_file:
    # type=file|default=<undefined>: varcope weightings data file
    dof_var_cope_file:
    # type=file|default=<undefined>: dof data file for varcope data
    mask_file:
    # type=file|default=<undefined>: mask file
    design_file:
    # type=file|default=<undefined>: design matrix file
    t_con_file:
    # type=file|default=<undefined>: ascii matrix specifying t-contrasts
    f_con_file:
    # type=file|default=<undefined>: ascii matrix specifying f-contrasts
    cov_split_file:
    # type=file|default=<undefined>: ascii matrix specifying the groups the covariance is split into
    run_mode:
    # type=enum|default='fe'|allowed['fe','flame1','flame12','ols']: inference to perform
    n_jumps:
    # type=int|default=0: number of jumps made by mcmc
    burnin:
    # type=int|default=0: number of jumps at start of mcmc to be discarded
    sample_every:
    # type=int|default=0: number of jumps for each sample
    fix_mean:
    # type=bool|default=False: fix mean for tfit
    infer_outliers:
    # type=bool|default=False: infer outliers - not for fe
    no_pe_outputs:
    # type=bool|default=False: do not output pe files
    sigma_dofs:
    # type=int|default=0: sigma (in mm) to use for Gaussian smoothing the DOFs in FLAME 2. Default is 1mm, -1 indicates no smoothing
    outlier_iter:
    # type=int|default=0: Number of max iterations to use when inferring outliers. Default is 12.
    log_dir:
    # type=directory|default='stats': 
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    cope_file:
    # type=file|default=<undefined>: cope regressor data file
    var_cope_file:
    # type=file|default=<undefined>: varcope weightings data file
    cov_split_file:
    # type=file|default=<undefined>: ascii matrix specifying the groups the covariance is split into
    design_file:
    # type=file|default=<undefined>: design matrix file
    t_con_file:
    # type=file|default=<undefined>: ascii matrix specifying t-contrasts
    mask_file:
    # type=file|default=<undefined>: mask file
    run_mode: '"fe"'
    # type=enum|default='fe'|allowed['fe','flame1','flame12','ols']: inference to perform
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: flameo --copefile=cope.nii.gz --covsplitfile=cov_split.mat --designfile=design.mat --ld=stats --maskfile=mask.nii --runmode=fe --tcontrastsfile=design.con --varcopefile=varcope.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    cope_file:
    # type=file|default=<undefined>: cope regressor data file
    var_cope_file:
    # type=file|default=<undefined>: varcope weightings data file
    cov_split_file:
    # type=file|default=<undefined>: ascii matrix specifying the groups the covariance is split into
    design_file:
    # type=file|default=<undefined>: design matrix file
    t_con_file:
    # type=file|default=<undefined>: ascii matrix specifying t-contrasts
    mask_file:
    # type=file|default=<undefined>: mask file
    run_mode: '"fe"'
    # type=enum|default='fe'|allowed['fe','flame1','flame12','ols']: inference to perform
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
