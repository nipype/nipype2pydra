# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.possum.B0Calc' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     B0 inhomogeneities occur at interfaces of materials with different magnetic susceptibilities,
#     such as tissue-air interfaces. These differences lead to distortion in the local magnetic field,
#     as Maxwellâ€™s equations need to be satisfied. An example of B0 inhomogneity is the first volume
#     of the 4D volume ```$FSLDIR/data/possum/b0_ppm.nii.gz```.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.fsl import B0Calc
#     >>> b0calc = B0Calc()
#     >>> b0calc.inputs.in_file = 'tissue+air_map.nii'
#     >>> b0calc.inputs.z_b0 = 3.0
#     >>> b0calc.inputs.output_type = "NIFTI_GZ"
#     >>> b0calc.cmdline
#     'b0calc -i tissue+air_map.nii -o tissue+air_map_b0field.nii.gz --chi0=4.000000e-07 -d -9.450000e-06 --extendboundary=1.00 --b0x=0.00 --gx=0.0000 --b0y=0.00 --gy=0.0000 --b0=3.00 --gz=0.0000'
# 
#     
task_name: B0Calc
nipype_name: B0Calc
nipype_module: nipype.interfaces.fsl.possum
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: filename of input image (usually a tissue/air segmentation)
    out_file: Path
    # type=file: filename of B0 output volume
    # type=file|default=<undefined>: filename of B0 output volume
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: filename of B0 output volume
    # type=file|default=<undefined>: filename of B0 output volume
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: filename of input image (usually a tissue/air segmentation)
    out_file:
    # type=file: filename of B0 output volume
    # type=file|default=<undefined>: filename of B0 output volume
    x_grad:
    # type=float|default=0.0: Value for zeroth-order x-gradient field (per mm)
    y_grad:
    # type=float|default=0.0: Value for zeroth-order y-gradient field (per mm)
    z_grad:
    # type=float|default=0.0: Value for zeroth-order z-gradient field (per mm)
    x_b0:
    # type=float|default=0.0: Value for zeroth-order b0 field (x-component), in Tesla
    y_b0:
    # type=float|default=0.0: Value for zeroth-order b0 field (y-component), in Tesla
    z_b0:
    # type=float|default=1.0: Value for zeroth-order b0 field (z-component), in Tesla
    xyz_b0:
    # type=tuple|default=(0.0, 0.0, 0.0): Zeroth-order B0 field in Tesla
    delta:
    # type=float|default=-9.45e-06: Delta value (chi_tissue - chi_air)
    chi_air:
    # type=float|default=4e-07: susceptibility of air
    compute_xyz:
    # type=bool|default=False: calculate and save all 3 field components (i.e. x,y,z)
    extendboundary:
    # type=float|default=1.0: Relative proportion to extend voxels at boundary
    directconv:
    # type=bool|default=False: use direct (image space) convolution, not FFT
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: filename of input image (usually a tissue/air segmentation)
    z_b0: '3.0'
    # type=float|default=1.0: Value for zeroth-order b0 field (z-component), in Tesla
    output_type: '"NIFTI_GZ"'
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: b0calc -i tissue+air_map.nii -o tissue+air_map_b0field.nii.gz --chi0=4.000000e-07 -d -9.450000e-06 --extendboundary=1.00 --b0x=0.00 --gx=0.0000 --b0y=0.00 --gy=0.0000 --b0=3.00 --gz=0.0000
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: filename of input image (usually a tissue/air segmentation)
    z_b0: '3.0'
    # type=float|default=1.0: Value for zeroth-order b0 field (z-component), in Tesla
    output_type: '"NIFTI_GZ"'
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
