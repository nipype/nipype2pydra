# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.dti.TractSkeleton' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use FSL's tbss_skeleton to skeletonise an FA image or project arbitrary
#     values onto a skeleton.
# 
#     There are two ways to use this interface.  To create a skeleton from an FA
#     image, just supply the ``in_file`` and set ``skeleton_file`` to True (or
#     specify a skeleton filename. To project values onto a skeleton, you must
#     set ``project_data`` to True, and then also supply values for
#     ``threshold``, ``distance_map``, and ``data_file``. The
#     ``search_mask_file`` and ``use_cingulum_mask`` inputs are also used in data
#     projection, but ``use_cingulum_mask`` is set to True by default.  This mask
#     controls where the projection algorithm searches within a circular space
#     around a tract, rather than in a single perpendicular direction.
# 
#     Example
#     -------
# 
#     >>> import nipype.interfaces.fsl as fsl
#     >>> skeletor = fsl.TractSkeleton()
#     >>> skeletor.inputs.in_file = "all_FA.nii.gz"
#     >>> skeletor.inputs.skeleton_file = True
#     >>> skeletor.run() # doctest: +SKIP
# 
#     
task_name: TractSkeleton
nipype_name: TractSkeleton
nipype_module: nipype.interfaces.fsl.dti
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    alt_data_file: generic/file
    # type=file|default=<undefined>: 4D non-FA data to project onto skeleton
    alt_skeleton: generic/file
    # type=file|default=<undefined>: alternate skeleton to use
    data_file: generic/file
    # type=file|default=<undefined>: 4D data to project onto skeleton (usually FA)
    distance_map: generic/file
    # type=file|default=<undefined>: distance map image
    in_file: generic/file
    # type=file|default=<undefined>: input image (typically mean FA volume)
    projected_data: Path
    # type=file: input data projected onto skeleton
    # type=file|default=<undefined>: input data projected onto skeleton
    search_mask_file: generic/file
    # type=file|default=<undefined>: mask in which to use alternate search rule
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    projected_data: generic/file
    # type=file: input data projected onto skeleton
    # type=file|default=<undefined>: input data projected onto skeleton
    skeleton_file: generic/file
    # type=file: tract skeleton image
    # type=traitcompound|default=None: write out skeleton image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input image (typically mean FA volume)
    project_data:
    # type=bool|default=False: project data onto skeleton
    threshold:
    # type=float|default=0.0: skeleton threshold value
    distance_map:
    # type=file|default=<undefined>: distance map image
    search_mask_file:
    # type=file|default=<undefined>: mask in which to use alternate search rule
    use_cingulum_mask:
    # type=bool|default=True: perform alternate search using built-in cingulum mask
    data_file:
    # type=file|default=<undefined>: 4D data to project onto skeleton (usually FA)
    alt_data_file:
    # type=file|default=<undefined>: 4D non-FA data to project onto skeleton
    alt_skeleton:
    # type=file|default=<undefined>: alternate skeleton to use
    projected_data:
    # type=file: input data projected onto skeleton
    # type=file|default=<undefined>: input data projected onto skeleton
    skeleton_file:
    # type=file: tract skeleton image
    # type=traitcompound|default=None: write out skeleton image
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
