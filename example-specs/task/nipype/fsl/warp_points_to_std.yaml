# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.utils.WarpPointsToStd' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Use FSL `img2stdcoord <http://fsl.fmrib.ox.ac.uk/fsl/fsl-4.1.9/flirt/overview.html>`_
#     to transform point sets to standard space coordinates. Accepts plain text
#     files and vtk files.
# 
#     .. Note:: transformation of TrackVis trk files is not yet implemented
# 
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.fsl import WarpPointsToStd
#     >>> warppoints = WarpPointsToStd()
#     >>> warppoints.inputs.in_coords = 'surf.txt'
#     >>> warppoints.inputs.img_file = 'T1.nii'
#     >>> warppoints.inputs.std_file = 'mni.nii'
#     >>> warppoints.inputs.warp_file = 'warpfield.nii'
#     >>> warppoints.inputs.coord_mm = True
#     >>> warppoints.cmdline # doctest: +ELLIPSIS
#     'img2stdcoord -mm -img T1.nii -std mni.nii -warp warpfield.nii surf.txt'
#     >>> res = warppoints.run() # doctest: +SKIP
# 
# 
#     
task_name: WarpPointsToStd
nipype_name: WarpPointsToStd
nipype_module: nipype.interfaces.fsl.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    img_file: medimage/nifti1
    # type=file|default=<undefined>: filename of input image
    std_file: medimage/nifti1
    # type=file|default=<undefined>: filename of destination image
    premat_file: generic/file
    # type=file|default=<undefined>: filename of pre-warp affine transform (e.g. example_func2highres.mat)
    in_coords: text/text-file
    # type=file|default=<undefined>: filename of file containing coordinates
    xfm_file: generic/file
    # type=file|default=<undefined>: filename of affine transform (e.g. source2dest.mat)
    warp_file: medimage/nifti1
    # type=file|default=<undefined>: filename of warpfield (e.g. intermediate2dest_warp.nii.gz)
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Name of output file, containing the warp as field or coefficients.
    # type=file|default=<undefined>: output file name
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    img_file:
    # type=file|default=<undefined>: filename of input image
    std_file:
    # type=file|default=<undefined>: filename of destination image
    premat_file:
    # type=file|default=<undefined>: filename of pre-warp affine transform (e.g. example_func2highres.mat)
    in_coords:
    # type=file|default=<undefined>: filename of file containing coordinates
    xfm_file:
    # type=file|default=<undefined>: filename of affine transform (e.g. source2dest.mat)
    warp_file:
    # type=file|default=<undefined>: filename of warpfield (e.g. intermediate2dest_warp.nii.gz)
    coord_vox:
    # type=bool|default=True: all coordinates in voxels - default
    coord_mm:
    # type=bool|default=False: all coordinates in mm
    out_file:
    # type=file: Name of output file, containing the warp as field or coefficients.
    # type=file|default=<undefined>: output file name
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_coords:
    # type=file|default=<undefined>: filename of file containing coordinates
    img_file:
    # type=file|default=<undefined>: filename of input image
    std_file:
    # type=file|default=<undefined>: filename of destination image
    warp_file:
    # type=file|default=<undefined>: filename of warpfield (e.g. intermediate2dest_warp.nii.gz)
    coord_mm: 'True'
    # type=bool|default=False: all coordinates in mm
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: img2stdcoord -mm -img T1.nii -std mni.nii -warp warpfield.nii surf.txt
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_coords:
    # type=file|default=<undefined>: filename of file containing coordinates
    img_file:
    # type=file|default=<undefined>: filename of input image
    std_file:
    # type=file|default=<undefined>: filename of destination image
    warp_file:
    # type=file|default=<undefined>: filename of warpfield (e.g. intermediate2dest_warp.nii.gz)
    coord_mm: 'True'
    # type=bool|default=False: all coordinates in mm
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
