# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.preprocess.SUSAN' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# FSL SUSAN wrapper to perform smoothing
# 
#     For complete details, see the `SUSAN Documentation.
#     <https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/SUSAN>`_
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces import fsl
#     >>> from nipype.testing import example_data
#     >>> anatfile  # doctest: +SKIP
#     anatomical.nii  # doctest: +SKIP
#     >>> sus = fsl.SUSAN()
#     >>> sus.inputs.in_file = example_data('structural.nii')
#     >>> sus.inputs.brightness_threshold = 2000.0
#     >>> sus.inputs.fwhm = 8.0
#     >>> result = sus.run()  # doctest: +SKIP
#     
task_name: SUSAN
nipype_name: SUSAN
nipype_module: nipype.interfaces.fsl.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: filename of input timeseries
    out_file: Path
    # type=file|default=<undefined>: output file name
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
    out_file: out_file_default
    # type=file|default=<undefined>: output file name
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    smoothed_file: generic/file
    # type=file: smoothed output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: filename of input timeseries
    brightness_threshold:
    # type=float|default=0.0: brightness threshold and should be greater than noise level and less than contrast of edges to be preserved.
    fwhm:
    # type=float|default=0.0: fwhm of smoothing, in mm, gets converted using sqrt(8*log(2))
    dimension:
    # type=enum|default=3|allowed[2,3]: within-plane (2) or fully 3D (3)
    use_median:
    # type=enum|default=1|allowed[0,1]: whether to use a local median filter in the cases where single-point noise is detected
    usans:
    # type=list|default=[]: determines whether the smoothing area (USAN) is to be found from secondary images (0, 1 or 2). A negative value for any brightness threshold will auto-set the threshold at 10% of the robust range
    out_file:
    # type=file|default=<undefined>: output file name
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
