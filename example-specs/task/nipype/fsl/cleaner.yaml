# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.fix.Cleaner' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Extract features (for later training and/or classifying)
#     
task_name: Cleaner
nipype_name: Cleaner
nipype_module: nipype.interfaces.fsl.fix
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    artifacts_list_file: generic/file
    # type=file|default=<undefined>: Text file listing which ICs are artifacts; can be the output from classification or can be created manually
    confound_file: generic/file
    # type=file|default=<undefined>: Include additional confound file.
    confound_file_1: generic/file
    # type=file|default=<undefined>: Include additional confound file.
    confound_file_2: generic/file
    # type=file|default=<undefined>: Include additional confound file.
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    cleaned_functional_file: generic/file
    # type=file: Cleaned session data
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    artifacts_list_file:
    # type=file|default=<undefined>: Text file listing which ICs are artifacts; can be the output from classification or can be created manually
    cleanup_motion:
    # type=bool|default=False: cleanup motion confounds, looks for design.fsf for highpass filter cut-off
    highpass:
    # type=float|default=100: cleanup motion confounds
    aggressive:
    # type=bool|default=False: Apply aggressive (full variance) cleanup, instead of the default less-aggressive (unique variance) cleanup.
    confound_file:
    # type=file|default=<undefined>: Include additional confound file.
    confound_file_1:
    # type=file|default=<undefined>: Include additional confound file.
    confound_file_2:
    # type=file|default=<undefined>: Include additional confound file.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
