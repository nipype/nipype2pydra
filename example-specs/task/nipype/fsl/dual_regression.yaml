# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.model.DualRegression' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Wrapper Script for Dual Regression Workflow
# 
#     Examples
#     --------
# 
#     >>> dual_regression = DualRegression()
#     >>> dual_regression.inputs.in_files = ["functional.nii", "functional2.nii", "functional3.nii"]
#     >>> dual_regression.inputs.group_IC_maps_4D = "allFA.nii"
#     >>> dual_regression.inputs.des_norm = False
#     >>> dual_regression.inputs.one_sample_group_mean = True
#     >>> dual_regression.inputs.n_perm = 10
#     >>> dual_regression.inputs.out_dir = "my_output_directory"
#     >>> dual_regression.cmdline
#     'dual_regression allFA.nii 0 -1 10 my_output_directory functional.nii functional2.nii functional3.nii'
#     >>> dual_regression.run() # doctest: +SKIP
# 
#     
task_name: DualRegression
nipype_name: DualRegression
nipype_module: nipype.interfaces.fsl.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_files: medimage/nifti1+list-of
    # type=inputmultiobject|default=[]: List all subjects' preprocessed, standard-space 4D datasets
    group_IC_maps_4D: medimage/nifti1
    # type=file|default=<undefined>: 4D image containing spatial IC maps (melodic_IC) from the whole-group ICA analysis
    design_file: generic/file
    # type=file|default=<undefined>: Design matrix for final cross-subject modelling with randomise
    con_file: generic/file
    # type=file|default=<undefined>: Design contrasts for final cross-subject modelling with randomise
    out_dir: Path
    # type=directory: 
    # type=directory|default='output': This directory will be created to hold all output and logfiles
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_dir: generic/directory
    # type=directory: 
    # type=directory|default='output': This directory will be created to hold all output and logfiles
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_dir: '"my_output_directory"'
    # type=directory: 
    # type=directory|default='output': This directory will be created to hold all output and logfiles
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: List all subjects' preprocessed, standard-space 4D datasets
    group_IC_maps_4D:
    # type=file|default=<undefined>: 4D image containing spatial IC maps (melodic_IC) from the whole-group ICA analysis
    des_norm:
    # type=bool|default=True: Whether to variance-normalise the timecourses used as the stage-2 regressors; True is default and recommended
    one_sample_group_mean:
    # type=bool|default=False: perform 1-sample group-mean test instead of generic permutation test
    design_file:
    # type=file|default=<undefined>: Design matrix for final cross-subject modelling with randomise
    con_file:
    # type=file|default=<undefined>: Design contrasts for final cross-subject modelling with randomise
    n_perm:
    # type=int|default=0: Number of permutations for randomise; set to 1 for just raw tstat output, set to 0 to not run randomise at all.
    out_dir:
    # type=directory: 
    # type=directory|default='output': This directory will be created to hold all output and logfiles
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: List all subjects' preprocessed, standard-space 4D datasets
    group_IC_maps_4D:
    # type=file|default=<undefined>: 4D image containing spatial IC maps (melodic_IC) from the whole-group ICA analysis
    des_norm: 'False'
    # type=bool|default=True: Whether to variance-normalise the timecourses used as the stage-2 regressors; True is default and recommended
    one_sample_group_mean: 'True'
    # type=bool|default=False: perform 1-sample group-mean test instead of generic permutation test
    n_perm: '10'
    # type=int|default=0: Number of permutations for randomise; set to 1 for just raw tstat output, set to 0 to not run randomise at all.
    out_dir: '"my_output_directory"'
    # type=directory: 
    # type=directory|default='output': This directory will be created to hold all output and logfiles
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: dual_regression allFA.nii 0 -1 10 my_output_directory functional.nii functional2.nii functional3.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_files:
    # type=inputmultiobject|default=[]: List all subjects' preprocessed, standard-space 4D datasets
    group_IC_maps_4D:
    # type=file|default=<undefined>: 4D image containing spatial IC maps (melodic_IC) from the whole-group ICA analysis
    des_norm: 'False'
    # type=bool|default=True: Whether to variance-normalise the timecourses used as the stage-2 regressors; True is default and recommended
    one_sample_group_mean: 'True'
    # type=bool|default=False: perform 1-sample group-mean test instead of generic permutation test
    n_perm: '10'
    # type=int|default=0: Number of permutations for randomise; set to 1 for just raw tstat output, set to 0 to not run randomise at all.
    out_dir: '"my_output_directory"'
    # type=directory: 
    # type=directory|default='output': This directory will be created to hold all output and logfiles
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
