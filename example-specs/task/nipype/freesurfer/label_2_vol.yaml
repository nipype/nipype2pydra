# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.model.Label2Vol' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Make a binary volume from a Freesurfer label
# 
#     Examples
#     --------
#     >>> binvol = Label2Vol(label_file='cortex.label', template_file='structural.nii', reg_file='register.dat', fill_thresh=0.5, vol_label_file='foo_out.nii')
#     >>> binvol.cmdline
#     'mri_label2vol --fillthresh 0.5 --label cortex.label --reg register.dat --temp structural.nii --o foo_out.nii'
# 
#     
task_name: Label2Vol
nipype_name: Label2Vol
nipype_module: nipype.interfaces.freesurfer.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    annot_file: generic/file
    # type=file|default=<undefined>: surface annotation file
    label_file: medimage-freesurfer/label+list-of
    # type=inputmultiobject|default=[]: list of label files
    label_hit_file: generic/file
    # type=file|default=<undefined>: file with each frame is nhits for a label
    map_label_stat: generic/file
    # type=file|default=<undefined>: map the label stats field into the vol
    reg_file: datascience/dat-file
    # type=file|default=<undefined>: tkregister style matrix VolXYZ = R*LabelXYZ
    reg_header: generic/file
    # type=file|default=<undefined>: label template volume
    seg_file: generic/file
    # type=file|default=<undefined>: segmentation file
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    template_file: medimage/nifti1
    # type=file|default=<undefined>: output template volume
    vol_label_file: Path
    # type=file: output volume
    # type=file|default=<undefined>: output volume
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    vol_label_file: medimage/nifti1
    # type=file: output volume
    # type=file|default=<undefined>: output volume
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    vol_label_file: '"foo_out.nii"'
    # type=file: output volume
    # type=file|default=<undefined>: output volume
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    label_file:
    # type=inputmultiobject|default=[]: list of label files
    annot_file:
    # type=file|default=<undefined>: surface annotation file
    seg_file:
    # type=file|default=<undefined>: segmentation file
    aparc_aseg:
    # type=bool|default=False: use aparc+aseg.mgz in subjectdir as seg
    template_file:
    # type=file|default=<undefined>: output template volume
    reg_file:
    # type=file|default=<undefined>: tkregister style matrix VolXYZ = R*LabelXYZ
    reg_header:
    # type=file|default=<undefined>: label template volume
    identity:
    # type=bool|default=False: set R=I
    invert_mtx:
    # type=bool|default=False: Invert the registration matrix
    fill_thresh:
    # type=range|default=0.0: thresh : between 0 and 1
    label_voxel_volume:
    # type=float|default=0.0: volume of each label point (def 1mm3)
    proj:
    # type=tuple|default=('abs', 0.0, 0.0, 0.0): project along surface normal
    subject_id:
    # type=str|default='': subject id
    hemi:
    # type=enum|default='lh'|allowed['lh','rh']: hemisphere to use lh or rh
    surface:
    # type=str|default='': use surface instead of white
    vol_label_file:
    # type=file: output volume
    # type=file|default=<undefined>: output volume
    label_hit_file:
    # type=file|default=<undefined>: file with each frame is nhits for a label
    map_label_stat:
    # type=file|default=<undefined>: map the label stats field into the vol
    native_vox2ras:
    # type=bool|default=False: use native vox2ras xform instead of  tkregister-style
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    label_file:
    # type=inputmultiobject|default=[]: list of label files
    template_file:
    # type=file|default=<undefined>: output template volume
    reg_file:
    # type=file|default=<undefined>: tkregister style matrix VolXYZ = R*LabelXYZ
    fill_thresh: '0.5'
    # type=range|default=0.0: thresh : between 0 and 1
    vol_label_file: '"foo_out.nii"'
    # type=file: output volume
    # type=file|default=<undefined>: output volume
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_label2vol --fillthresh 0.5 --label cortex.label --reg register.dat --temp structural.nii --o foo_out.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    label_file: '"cortex.label"'
    # type=inputmultiobject|default=[]: list of label files
    template_file: '"structural.nii"'
    # type=file|default=<undefined>: output template volume
    reg_file: '"register.dat"'
    # type=file|default=<undefined>: tkregister style matrix VolXYZ = R*LabelXYZ
    fill_thresh: '0.5'
    # type=range|default=0.0: thresh : between 0 and 1
    vol_label_file: '"foo_out.nii"'
    # type=file: output volume
    # type=file|default=<undefined>: output volume
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
