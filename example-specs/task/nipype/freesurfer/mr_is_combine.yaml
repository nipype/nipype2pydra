# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.MRIsCombine' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Uses Freesurfer's ``mris_convert`` to combine two surface files into one.
# 
#     For complete details, see the `mris_convert Documentation.
#     <https://surfer.nmr.mgh.harvard.edu/fswiki/mris_convert>`_
# 
#     If given an ``out_file`` that does not begin with ``'lh.'`` or ``'rh.'``,
#     ``mris_convert`` will prepend ``'lh.'`` to the file name.
#     To avoid this behavior, consider setting ``out_file = './<filename>'``, or
#     leaving out_file blank.
# 
#     In a Node/Workflow, ``out_file`` is interpreted literally.
# 
#     Example
#     -------
# 
#     >>> import nipype.interfaces.freesurfer as fs
#     >>> mris = fs.MRIsCombine()
#     >>> mris.inputs.in_files = ['lh.pial', 'rh.pial']
#     >>> mris.inputs.out_file = 'bh.pial'
#     >>> mris.cmdline
#     'mris_convert --combinesurfs lh.pial rh.pial bh.pial'
#     >>> mris.run()  # doctest: +SKIP
#     
task_name: MRIsCombine
nipype_name: MRIsCombine
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_files: medimage-freesurfer/pial+list-of
    # type=list|default=[]: Two surfaces to be combined.
    out_file: Path
    # type=file: Output filename. Combined surfaces from in_files.
    # type=file|default=<undefined>: Output filename. Combined surfaces from in_files.
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage-freesurfer/pial
    # type=file: Output filename. Combined surfaces from in_files.
    # type=file|default=<undefined>: Output filename. Combined surfaces from in_files.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: '"bh.pial"'
    # type=file: Output filename. Combined surfaces from in_files.
    # type=file|default=<undefined>: Output filename. Combined surfaces from in_files.
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=list|default=[]: Two surfaces to be combined.
    out_file:
    # type=file: Output filename. Combined surfaces from in_files.
    # type=file|default=<undefined>: Output filename. Combined surfaces from in_files.
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=list|default=[]: Two surfaces to be combined.
    out_file: '"bh.pial"'
    # type=file: Output filename. Combined surfaces from in_files.
    # type=file|default=<undefined>: Output filename. Combined surfaces from in_files.
  imports: &id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: nipype.interfaces.freesurfer as fs
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mris_convert --combinesurfs lh.pial rh.pial bh.pial
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_files: '["lh.pial", "rh.pial"]'
    # type=list|default=[]: Two surfaces to be combined.
    out_file: '"bh.pial"'
    # type=file: Output filename. Combined surfaces from in_files.
    # type=file|default=<undefined>: Output filename. Combined surfaces from in_files.
  imports: *id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
