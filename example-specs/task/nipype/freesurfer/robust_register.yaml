# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.preprocess.RobustRegister' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Perform intramodal linear registration (translation and rotation) using
#     robust statistics.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.freesurfer import RobustRegister
#     >>> reg = RobustRegister()
#     >>> reg.inputs.source_file = 'structural.nii'
#     >>> reg.inputs.target_file = 'T1.nii'
#     >>> reg.inputs.auto_sens = True
#     >>> reg.inputs.init_orient = True
#     >>> reg.cmdline # doctest: +ELLIPSIS
#     'mri_robust_register --satit --initorient --lta .../structural_robustreg.lta --mov structural.nii --dst T1.nii'
# 
#     References
#     ----------
#     Reuter, M, Rosas, HD, and Fischl, B, (2010). Highly Accurate Inverse
#         Consistent Registration: A Robust Approach.  Neuroimage 53(4) 1181-96.
# 
#     
task_name: RobustRegister
nipype_name: RobustRegister
nipype_module: nipype.interfaces.freesurfer.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_xfm_file: generic/file
    # type=file|default=<undefined>: use initial transform on source
    mask_source: generic/file
    # type=file|default=<undefined>: image to mask source volume with
    mask_target: generic/file
    # type=file|default=<undefined>: image to mask target volume with
    source_file: medimage/nifti1
    # type=file|default=<undefined>: volume to be registered
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    target_file: medimage/nifti1
    # type=file|default=<undefined>: target volume for the registration
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    half_source: generic/file
    # type=file: source image mapped to halfway space
    # type=traitcompound|default=None: write source volume mapped to halfway space
    half_source_xfm: generic/file
    # type=file: transform file to map source image to halfway space
    # type=traitcompound|default=None: write transform from source to halfway space
    half_targ: generic/file
    # type=file: target image mapped to halfway space
    # type=traitcompound|default=None: write target volume mapped to halfway space
    half_targ_xfm: generic/file
    # type=file: transform file to map target image to halfway space
    # type=traitcompound|default=None: write transform from target to halfway space
    half_weights: generic/file
    # type=file: weights image mapped to halfway space
    # type=traitcompound|default=None: write weights volume mapped to halfway space
    out_reg_file: generic/file
    # type=file: output registration file
    # type=traitcompound|default=True: registration file; either True or filename
    registered_file: generic/file
    # type=file: output image with registration applied
    # type=traitcompound|default=None: registered image; either True or filename
    weights_file: generic/file
    # type=file: image of weights used
    # type=traitcompound|default=None: weights image to write; either True or filename
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    source_file:
    # type=file|default=<undefined>: volume to be registered
    target_file:
    # type=file|default=<undefined>: target volume for the registration
    out_reg_file:
    # type=file: output registration file
    # type=traitcompound|default=True: registration file; either True or filename
    registered_file:
    # type=file: output image with registration applied
    # type=traitcompound|default=None: registered image; either True or filename
    weights_file:
    # type=file: image of weights used
    # type=traitcompound|default=None: weights image to write; either True or filename
    est_int_scale:
    # type=bool|default=False: estimate intensity scale (recommended for unnormalized images)
    trans_only:
    # type=bool|default=False: find 3 parameter translation only
    in_xfm_file:
    # type=file|default=<undefined>: use initial transform on source
    half_source:
    # type=file: source image mapped to halfway space
    # type=traitcompound|default=None: write source volume mapped to halfway space
    half_targ:
    # type=file: target image mapped to halfway space
    # type=traitcompound|default=None: write target volume mapped to halfway space
    half_weights:
    # type=file: weights image mapped to halfway space
    # type=traitcompound|default=None: write weights volume mapped to halfway space
    half_source_xfm:
    # type=file: transform file to map source image to halfway space
    # type=traitcompound|default=None: write transform from source to halfway space
    half_targ_xfm:
    # type=file: transform file to map target image to halfway space
    # type=traitcompound|default=None: write transform from target to halfway space
    auto_sens:
    # type=bool|default=False: auto-detect good sensitivity
    outlier_sens:
    # type=float|default=0.0: set outlier sensitivity explicitly
    least_squares:
    # type=bool|default=False: use least squares instead of robust estimator
    no_init:
    # type=bool|default=False: skip transform init
    init_orient:
    # type=bool|default=False: use moments for initial orient (recommended for stripped brains)
    max_iterations:
    # type=int|default=0: maximum # of times on each resolution
    high_iterations:
    # type=int|default=0: max # of times on highest resolution
    iteration_thresh:
    # type=float|default=0.0: stop iterations when below threshold
    subsample_thresh:
    # type=int|default=0: subsample if dimension is above threshold size
    outlier_limit:
    # type=float|default=0.0: set maximal outlier limit in satit
    write_vo2vox:
    # type=bool|default=False: output vox2vox matrix (default is RAS2RAS)
    no_multi:
    # type=bool|default=False: work on highest resolution
    mask_source:
    # type=file|default=<undefined>: image to mask source volume with
    mask_target:
    # type=file|default=<undefined>: image to mask target volume with
    force_double:
    # type=bool|default=False: use double-precision intensities
    force_float:
    # type=bool|default=False: use float intensities
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    source_file:
    # type=file|default=<undefined>: volume to be registered
    target_file:
    # type=file|default=<undefined>: target volume for the registration
    auto_sens: 'True'
    # type=bool|default=False: auto-detect good sensitivity
    init_orient: 'True'
    # type=bool|default=False: use moments for initial orient (recommended for stripped brains)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_robust_register --satit --initorient --lta .../structural_robustreg.lta --mov structural.nii --dst T1.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    source_file: '"structural.nii"'
    # type=file|default=<undefined>: volume to be registered
    target_file: '"T1.nii"'
    # type=file|default=<undefined>: target volume for the registration
    auto_sens: 'True'
    # type=bool|default=False: auto-detect good sensitivity
    init_orient: 'True'
    # type=bool|default=False: use moments for initial orient (recommended for stripped brains)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
