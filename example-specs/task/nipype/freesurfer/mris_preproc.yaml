# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.model.MRISPreproc' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use FreeSurfer mris_preproc to prepare a group of contrasts for
#     a second level analysis
# 
#     Examples
#     --------
#     >>> preproc = MRISPreproc()
#     >>> preproc.inputs.target = 'fsaverage'
#     >>> preproc.inputs.hemi = 'lh'
#     >>> preproc.inputs.vol_measure_file = [('cont1.nii', 'register.dat'),                                            ('cont1a.nii', 'register.dat')]
#     >>> preproc.inputs.out_file = 'concatenated_file.mgz'
#     >>> preproc.cmdline
#     'mris_preproc --hemi lh --out concatenated_file.mgz --target fsaverage --iv cont1.nii register.dat --iv cont1a.nii register.dat'
# 
#     
task_name: MRISPreproc
nipype_name: MRISPreproc
nipype_module: nipype.interfaces.freesurfer.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fsgd_file: generic/file
    # type=file|default=<undefined>: specify subjects using fsgd file
    out_file: Path
    # type=file: preprocessed output file
    # type=file|default=<undefined>: output filename
    subject_file: generic/file
    # type=file|default=<undefined>: file specifying subjects separated by white space
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    surf_measure_file: generic/file+list-of
    # type=inputmultiobject|default=[]: file alternative to surfmeas, still requires list of subjects
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/mgh-gz
    # type=file: preprocessed output file
    # type=file|default=<undefined>: output filename
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: '"concatenated_file.mgz"'
    # type=file: preprocessed output file
    # type=file|default=<undefined>: output filename
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    out_file:
    # type=file: preprocessed output file
    # type=file|default=<undefined>: output filename
    target:
    # type=str|default='': target subject name
    hemi:
    # type=enum|default='lh'|allowed['lh','rh']: hemisphere for source and target
    surf_measure:
    # type=str|default='': Use subject/surf/hemi.surf_measure as input
    surf_area:
    # type=str|default='': Extract vertex area from subject/surf/hemi.surfname to use as input.
    subjects:
    # type=list|default=[]: subjects from who measures are calculated
    fsgd_file:
    # type=file|default=<undefined>: specify subjects using fsgd file
    subject_file:
    # type=file|default=<undefined>: file specifying subjects separated by white space
    surf_measure_file:
    # type=inputmultiobject|default=[]: file alternative to surfmeas, still requires list of subjects
    source_format:
    # type=str|default='': source format
    surf_dir:
    # type=str|default='': alternative directory (instead of surf)
    vol_measure_file:
    # type=inputmultiobject|default=[]: list of volume measure and reg file tuples
    proj_frac:
    # type=float|default=0.0: projection fraction for vol2surf
    fwhm:
    # type=float|default=0.0: smooth by fwhm mm on the target surface
    num_iters:
    # type=int|default=0: niters : smooth by niters on the target surface
    fwhm_source:
    # type=float|default=0.0: smooth by fwhm mm on the source surface
    num_iters_source:
    # type=int|default=0: niters : smooth by niters on the source surface
    smooth_cortex_only:
    # type=bool|default=False: only smooth cortex (ie, exclude medial wall)
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    target: '"fsaverage"'
    # type=str|default='': target subject name
    hemi: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: hemisphere for source and target
    vol_measure_file: '[("cont1.nii", "register.dat"),                                            ("cont1a.nii", "register.dat")]'
    # type=inputmultiobject|default=[]: list of volume measure and reg file tuples
    out_file: '"concatenated_file.mgz"'
    # type=file: preprocessed output file
    # type=file|default=<undefined>: output filename
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mris_preproc --hemi lh --out concatenated_file.mgz --target fsaverage --iv cont1.nii register.dat --iv cont1a.nii register.dat
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    target: '"fsaverage"'
    # type=str|default='': target subject name
    hemi: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: hemisphere for source and target
    vol_measure_file: '[("cont1.nii", "register.dat"),                                            ("cont1a.nii", "register.dat")]'
    # type=inputmultiobject|default=[]: list of volume measure and reg file tuples
    out_file: '"concatenated_file.mgz"'
    # type=file: preprocessed output file
    # type=file|default=<undefined>: output filename
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
