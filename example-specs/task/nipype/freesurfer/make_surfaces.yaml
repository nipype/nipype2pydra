# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.MakeSurfaces' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     This program positions the tessellation of the cortical surface at the
#     white matter surface, then the gray matter surface and generate
#     surface files for these surfaces as well as a 'curvature' file for the
#     cortical thickness, and a surface file which approximates layer IV of
#     the cortical sheet.
# 
#     Examples
#     ========
#     >>> from nipype.interfaces.freesurfer import MakeSurfaces
#     >>> makesurfaces = MakeSurfaces()
#     >>> makesurfaces.inputs.hemisphere = 'lh'
#     >>> makesurfaces.inputs.subject_id = '10335'
#     >>> makesurfaces.inputs.in_orig = 'lh.pial'
#     >>> makesurfaces.inputs.in_wm = 'wm.mgz'
#     >>> makesurfaces.inputs.in_filled = 'norm.mgz'
#     >>> makesurfaces.inputs.in_label = 'aparc+aseg.nii'
#     >>> makesurfaces.inputs.in_T1 = 'T1.mgz'
#     >>> makesurfaces.inputs.orig_pial = 'lh.pial'
#     >>> makesurfaces.cmdline
#     'mris_make_surfaces -T1 T1.mgz -orig pial -orig_pial pial 10335 lh'
#     
task_name: MakeSurfaces
nipype_name: MakeSurfaces
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_T1: medimage/mgh-gz
    # type=file|default=<undefined>: Input brain or T1 file
    in_aseg: generic/file
    # type=file|default=<undefined>: Input segmentation file
    in_filled: medimage/mgh-gz
    # type=file|default=<undefined>: Implicit input file filled.mgz
    in_label: medimage/nifti1
    # type=file|default=<undefined>: Implicit input label/<hemisphere>.aparc.annot
    in_orig: medimage-freesurfer/pial
    # type=file|default=<undefined>: Implicit input file <hemisphere>.orig
    in_white: generic/file
    # type=file|default=<undefined>: Implicit input that is sometimes used
    in_wm: medimage/mgh-gz
    # type=file|default=<undefined>: Implicit input file wm.mgz
    orig_pial: medimage-freesurfer/pial
    # type=file|default=<undefined>: Specify a pial surface to start with
    orig_white: generic/file
    # type=file|default=<undefined>: Specify a white surface to start with
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_area: generic/file
    # type=file: Output area file for MakeSurfaces
    out_cortex: generic/file
    # type=file: Output cortex file for MakeSurfaces
    out_curv: generic/file
    # type=file: Output curv file for MakeSurfaces
    out_pial: generic/file
    # type=file: Output pial surface for MakeSurfaces
    out_thickness: generic/file
    # type=file: Output thickness file for MakeSurfaces
    out_white: generic/file
    # type=file: Output white matter hemisphere surface
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    hemisphere:
    # type=enum|default='lh'|allowed['lh','rh']: Hemisphere being processed
    subject_id:
    # type=string|default='subject_id': Subject being processed
    in_orig:
    # type=file|default=<undefined>: Implicit input file <hemisphere>.orig
    in_wm:
    # type=file|default=<undefined>: Implicit input file wm.mgz
    in_filled:
    # type=file|default=<undefined>: Implicit input file filled.mgz
    in_white:
    # type=file|default=<undefined>: Implicit input that is sometimes used
    in_label:
    # type=file|default=<undefined>: Implicit input label/<hemisphere>.aparc.annot
    orig_white:
    # type=file|default=<undefined>: Specify a white surface to start with
    orig_pial:
    # type=file|default=<undefined>: Specify a pial surface to start with
    fix_mtl:
    # type=bool|default=False: Undocumented flag
    no_white:
    # type=bool|default=False: Undocumented flag
    white_only:
    # type=bool|default=False: Undocumented flag
    in_aseg:
    # type=file|default=<undefined>: Input segmentation file
    in_T1:
    # type=file|default=<undefined>: Input brain or T1 file
    mgz:
    # type=bool|default=False: No documentation. Direct questions to analysis-bugs@nmr.mgh.harvard.edu
    noaparc:
    # type=bool|default=False: No documentation. Direct questions to analysis-bugs@nmr.mgh.harvard.edu
    maximum:
    # type=float|default=0.0: No documentation (used for longitudinal processing)
    longitudinal:
    # type=bool|default=False: No documentation (used for longitudinal processing)
    white:
    # type=string|default='': White surface name
    copy_inputs:
    # type=bool|default=False: If running as a node, set this to True.This will copy the input files to the node directory.
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Hemisphere being processed
    subject_id: '"10335"'
    # type=string|default='subject_id': Subject being processed
    in_orig:
    # type=file|default=<undefined>: Implicit input file <hemisphere>.orig
    in_wm:
    # type=file|default=<undefined>: Implicit input file wm.mgz
    in_filled:
    # type=file|default=<undefined>: Implicit input file filled.mgz
    in_label:
    # type=file|default=<undefined>: Implicit input label/<hemisphere>.aparc.annot
    in_T1:
    # type=file|default=<undefined>: Input brain or T1 file
    orig_pial:
    # type=file|default=<undefined>: Specify a pial surface to start with
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mris_make_surfaces -T1 T1.mgz -orig pial -orig_pial pial 10335 lh
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Hemisphere being processed
    subject_id: '"10335"'
    # type=string|default='subject_id': Subject being processed
    in_orig: '"lh.pial"'
    # type=file|default=<undefined>: Implicit input file <hemisphere>.orig
    in_wm: '"wm.mgz"'
    # type=file|default=<undefined>: Implicit input file wm.mgz
    in_filled: '"norm.mgz"'
    # type=file|default=<undefined>: Implicit input file filled.mgz
    in_label: '"aparc+aseg.nii"'
    # type=file|default=<undefined>: Implicit input label/<hemisphere>.aparc.annot
    in_T1: '"T1.mgz"'
    # type=file|default=<undefined>: Input brain or T1 file
    orig_pial: '"lh.pial"'
    # type=file|default=<undefined>: Specify a pial surface to start with
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
