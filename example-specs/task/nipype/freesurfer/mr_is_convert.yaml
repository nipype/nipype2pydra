# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.MRIsConvert' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Uses Freesurfer's mris_convert to convert surface files to various formats
# 
#     Example
#     -------
# 
#     >>> import nipype.interfaces.freesurfer as fs
#     >>> mris = fs.MRIsConvert()
#     >>> mris.inputs.in_file = 'lh.pial'
#     >>> mris.inputs.out_datatype = 'gii'
#     >>> mris.run() # doctest: +SKIP
#     
task_name: MRIsConvert
nipype_name: MRIsConvert
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    annot_file: generic/file
    # type=file|default=<undefined>: input is annotation or gifti label data
    functional_file: generic/file
    # type=file|default=<undefined>: input is functional time-series or other multi-frame data (must specify surface)
    in_file: generic/file
    # type=file|default=<undefined>: File to read/convert
    label_file: generic/file
    # type=file|default=<undefined>: infile is .label file, label is name of this label
    labelstats_outfile: generic/file
    # type=file|default=<undefined>: outfile is name of gifti file to which label stats will be written
    out_file: Path
    # type=file|default=<undefined>: output filename or True to generate one
    parcstats_file: generic/file
    # type=file|default=<undefined>: infile is name of text file containing label/val pairs
    scalarcurv_file: generic/file
    # type=file|default=<undefined>: input is scalar curv overlay file (must still specify surface)
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
    out_file: out_file_default
    # type=file|default=<undefined>: output filename or True to generate one
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    converted: generic/file
    # type=file: converted output surface
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    annot_file:
    # type=file|default=<undefined>: input is annotation or gifti label data
    parcstats_file:
    # type=file|default=<undefined>: infile is name of text file containing label/val pairs
    label_file:
    # type=file|default=<undefined>: infile is .label file, label is name of this label
    scalarcurv_file:
    # type=file|default=<undefined>: input is scalar curv overlay file (must still specify surface)
    functional_file:
    # type=file|default=<undefined>: input is functional time-series or other multi-frame data (must specify surface)
    labelstats_outfile:
    # type=file|default=<undefined>: outfile is name of gifti file to which label stats will be written
    patch:
    # type=bool|default=False: input is a patch, not a full surface
    rescale:
    # type=bool|default=False: rescale vertex xyz so total area is same as group average
    normal:
    # type=bool|default=False: output is an ascii file where vertex data
    xyz_ascii:
    # type=bool|default=False: Print only surface xyz to ascii file
    vertex:
    # type=bool|default=False: Writes out neighbors of a vertex in each row
    scale:
    # type=float|default=0.0: scale vertex xyz by scale
    dataarray_num:
    # type=int|default=0: if input is gifti, 'num' specifies which data array to use
    talairachxfm_subjid:
    # type=string|default='': apply talairach xfm of subject to vertex xyz
    origname:
    # type=string|default='': read orig positions
    in_file:
    # type=file|default=<undefined>: File to read/convert
    out_file:
    # type=file|default=<undefined>: output filename or True to generate one
    out_datatype:
    # type=enum|default='asc'|allowed['asc','gii','ico','mgh','mgz','stl','tri','vtk']: These file formats are supported:  ASCII:       .ascICO: .ico, .tri GEO: .geo STL: .stl VTK: .vtk GIFTI: .gii MGH surface-encoded 'volume': .mgh, .mgz
    to_scanner:
    # type=bool|default=False: convert coordinates from native FS (tkr) coords to scanner coords
    to_tkr:
    # type=bool|default=False: convert coordinates from scanner coords to native FS (tkr) coords
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
