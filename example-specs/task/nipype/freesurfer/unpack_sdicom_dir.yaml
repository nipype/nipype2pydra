# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.preprocess.UnpackSDICOMDir' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use unpacksdcmdir to convert dicom files
# 
#     Call unpacksdcmdir -help from the command line to see more information on
#     using this command.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.freesurfer import UnpackSDICOMDir
#     >>> unpack = UnpackSDICOMDir()
#     >>> unpack.inputs.source_dir = '.'
#     >>> unpack.inputs.output_dir = '.'
#     >>> unpack.inputs.run_info = (5, 'mprage', 'nii', 'struct')
#     >>> unpack.inputs.dir_structure = 'generic'
#     >>> unpack.cmdline
#     'unpacksdcmdir -generic -targ . -run 5 mprage nii struct -src .'
#     
task_name: UnpackSDICOMDir
nipype_name: UnpackSDICOMDir
nipype_module: nipype.interfaces.freesurfer.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    config: generic/file
    # type=file|default=<undefined>: specify unpacking rules in file
    log_file: generic/file
    # type=file|default=<undefined>: explicitly set log file
    output_dir: generic/directory
    # type=directory|default=<undefined>: top directory into which the files will be unpacked
    scan_only: generic/file
    # type=file|default=<undefined>: only scan the directory and put result in file
    seq_config: generic/file
    # type=file|default=<undefined>: specify unpacking rules based on sequence
    source_dir: generic/directory
    # type=directory|default=<undefined>: directory with the DICOM files
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    source_dir:
    # type=directory|default=<undefined>: directory with the DICOM files
    output_dir:
    # type=directory|default=<undefined>: top directory into which the files will be unpacked
    run_info:
    # type=tuple|default=(0, '', '', ''): runno subdir format name : spec unpacking rules on cmdline
    config:
    # type=file|default=<undefined>: specify unpacking rules in file
    seq_config:
    # type=file|default=<undefined>: specify unpacking rules based on sequence
    dir_structure:
    # type=enum|default='fsfast'|allowed['fsfast','generic']: unpack to specified directory structures
    no_info_dump:
    # type=bool|default=False: do not create infodump file
    scan_only:
    # type=file|default=<undefined>: only scan the directory and put result in file
    log_file:
    # type=file|default=<undefined>: explicitly set log file
    spm_zeropad:
    # type=int|default=0: set frame number zero padding width for SPM
    no_unpack_err:
    # type=bool|default=False: do not try to unpack runs with errors
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    source_dir: '"."'
    # type=directory|default=<undefined>: directory with the DICOM files
    output_dir: '"."'
    # type=directory|default=<undefined>: top directory into which the files will be unpacked
    run_info: (5, "mprage", "nii", "struct")
    # type=tuple|default=(0, '', '', ''): runno subdir format name : spec unpacking rules on cmdline
    dir_structure: '"generic"'
    # type=enum|default='fsfast'|allowed['fsfast','generic']: unpack to specified directory structures
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: unpacksdcmdir -generic -targ . -run 5 mprage nii struct -src .
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    source_dir: '"."'
    # type=directory|default=<undefined>: directory with the DICOM files
    output_dir: '"."'
    # type=directory|default=<undefined>: top directory into which the files will be unpacked
    run_info: (5, "mprage", "nii", "struct")
    # type=tuple|default=(0, '', '', ''): runno subdir format name : spec unpacking rules on cmdline
    dir_structure: '"generic"'
    # type=enum|default='fsfast'|allowed['fsfast','generic']: unpack to specified directory structures
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
