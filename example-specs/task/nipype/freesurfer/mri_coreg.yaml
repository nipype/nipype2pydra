# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.registration.MRICoreg' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# This program registers one volume to another
# 
#     mri_coreg is a C reimplementation of spm_coreg in FreeSurfer
# 
#     Examples
#     ========
#     >>> from nipype.interfaces.freesurfer import MRICoreg
#     >>> coreg = MRICoreg()
#     >>> coreg.inputs.source_file = 'moving1.nii'
#     >>> coreg.inputs.reference_file = 'fixed1.nii'
#     >>> coreg.inputs.subjects_dir = '.'
#     >>> coreg.cmdline # doctest: +ELLIPSIS
#     'mri_coreg --lta .../registration.lta --ref fixed1.nii --mov moving1.nii --sd .'
# 
#     If passing a subject ID, the reference mask may be disabled:
# 
#     >>> coreg = MRICoreg()
#     >>> coreg.inputs.source_file = 'moving1.nii'
#     >>> coreg.inputs.subjects_dir = '.'
#     >>> coreg.inputs.subject_id = 'fsaverage'
#     >>> coreg.inputs.reference_mask = False
#     >>> coreg.cmdline # doctest: +ELLIPSIS
#     'mri_coreg --s fsaverage --no-ref-mask --lta .../registration.lta --mov moving1.nii --sd .'
# 
#     Spatial scales may be specified as a list of one or two separations:
# 
#     >>> coreg.inputs.sep = [4]
#     >>> coreg.cmdline # doctest: +ELLIPSIS
#     'mri_coreg --s fsaverage --no-ref-mask --lta .../registration.lta --sep 4 --mov moving1.nii --sd .'
# 
#     >>> coreg.inputs.sep = [4, 5]
#     >>> coreg.cmdline # doctest: +ELLIPSIS
#     'mri_coreg --s fsaverage --no-ref-mask --lta .../registration.lta --sep 4 --sep 5 --mov moving1.nii --sd .'
#     
task_name: MRICoreg
nipype_name: MRICoreg
nipype_module: nipype.interfaces.freesurfer.registration
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    reference_file: medimage/nifti1
    # type=file|default=<undefined>: reference (target) file
    source_file: medimage/nifti1
    # type=file|default=<undefined>: source file to be registered
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: FreeSurfer SUBJECTS_DIR
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_lta_file: generic/file
    # type=file: output LTA-style registration file
    # type=traitcompound|default=True: output registration file (LTA format)
    out_params_file: generic/file
    # type=file: output parameters file
    # type=traitcompound|default=None: output parameters file
    out_reg_file: generic/file
    # type=file: output registration file
    # type=traitcompound|default=None: output registration file (REG format)
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    source_file:
    # type=file|default=<undefined>: source file to be registered
    reference_file:
    # type=file|default=<undefined>: reference (target) file
    out_lta_file:
    # type=file: output LTA-style registration file
    # type=traitcompound|default=True: output registration file (LTA format)
    out_reg_file:
    # type=file: output registration file
    # type=traitcompound|default=None: output registration file (REG format)
    out_params_file:
    # type=file: output parameters file
    # type=traitcompound|default=None: output parameters file
    subjects_dir:
    # type=directory|default=<undefined>: FreeSurfer SUBJECTS_DIR
    subject_id:
    # type=str|default='': freesurfer subject ID (implies ``reference_mask == aparc+aseg.mgz`` unless otherwise specified)
    dof:
    # type=enum|default=6|allowed[12,6,9]: number of transform degrees of freedom
    reference_mask:
    # type=traitcompound|default=None: mask reference volume with given mask, or None if ``False``
    source_mask:
    # type=str|default='': mask source file with given mask
    num_threads:
    # type=int|default=0: number of OpenMP threads
    no_coord_dithering:
    # type=bool|default=False: turn off coordinate dithering
    no_intensity_dithering:
    # type=bool|default=False: turn off intensity dithering
    sep:
    # type=list|default=[]: set spatial scales, in voxels (default [2, 4])
    initial_translation:
    # type=tuple|default=(0.0, 0.0, 0.0): initial translation in mm (implies no_cras0)
    initial_rotation:
    # type=tuple|default=(0.0, 0.0, 0.0): initial rotation in degrees
    initial_scale:
    # type=tuple|default=(0.0, 0.0, 0.0): initial scale
    initial_shear:
    # type=tuple|default=(0.0, 0.0, 0.0): initial shear (Hxy, Hxz, Hyz)
    no_cras0:
    # type=bool|default=False: do not set translation parameters to align centers of source and reference files
    max_iters:
    # type=range|default=1: maximum iterations (default: 4)
    ftol:
    # type=float|default=0.0: floating-point tolerance (default=1e-7)
    linmintol:
    # type=float|default=0.0: 
    saturation_threshold:
    # type=range|default=0.0: saturation threshold (default=9.999)
    conform_reference:
    # type=bool|default=False: conform reference without rescaling
    no_brute_force:
    # type=bool|default=False: do not brute force search
    brute_force_limit:
    # type=float|default=0.0: constrain brute force search to +/- lim
    brute_force_samples:
    # type=int|default=0: number of samples in brute force search
    no_smooth:
    # type=bool|default=False: do not apply smoothing to either reference or source file
    ref_fwhm:
    # type=float|default=0.0: apply smoothing to reference file
    source_oob:
    # type=bool|default=False: count source voxels that are out-of-bounds as 0
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    source_file:
    # type=file|default=<undefined>: source file to be registered
    reference_file:
    # type=file|default=<undefined>: reference (target) file
    subjects_dir: '"."'
    # type=directory|default=<undefined>: FreeSurfer SUBJECTS_DIR
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    source_file:
    # type=file|default=<undefined>: source file to be registered
    subjects_dir: '"."'
    # type=directory|default=<undefined>: FreeSurfer SUBJECTS_DIR
    subject_id: '"fsaverage"'
    # type=str|default='': freesurfer subject ID (implies ``reference_mask == aparc+aseg.mgz`` unless otherwise specified)
    reference_mask: 'False'
    # type=traitcompound|default=None: mask reference volume with given mask, or None if ``False``
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    sep: '[4]'
    # type=list|default=[]: set spatial scales, in voxels (default [2, 4])
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    sep: '[4, 5]'
    # type=list|default=[]: set spatial scales, in voxels (default [2, 4])
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_coreg --lta .../registration.lta --ref fixed1.nii --mov moving1.nii --sd .
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    source_file: '"moving1.nii"'
    # type=file|default=<undefined>: source file to be registered
    reference_file: '"fixed1.nii"'
    # type=file|default=<undefined>: reference (target) file
    subjects_dir: '"."'
    # type=directory|default=<undefined>: FreeSurfer SUBJECTS_DIR
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: mri_coreg --s fsaverage --no-ref-mask --lta .../registration.lta --mov moving1.nii --sd .
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    source_file: '"moving1.nii"'
    # type=file|default=<undefined>: source file to be registered
    subjects_dir: '"."'
    # type=directory|default=<undefined>: FreeSurfer SUBJECTS_DIR
    subject_id: '"fsaverage"'
    # type=str|default='': freesurfer subject ID (implies ``reference_mask == aparc+aseg.mgz`` unless otherwise specified)
    reference_mask: 'False'
    # type=traitcompound|default=None: mask reference volume with given mask, or None if ``False``
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: mri_coreg --s fsaverage --no-ref-mask --lta .../registration.lta --sep 4 --mov moving1.nii --sd .
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    sep: '[4]'
    # type=list|default=[]: set spatial scales, in voxels (default [2, 4])
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: mri_coreg --s fsaverage --no-ref-mask --lta .../registration.lta --sep 4 --sep 5 --mov moving1.nii --sd .
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    sep: '[4, 5]'
    # type=list|default=[]: set spatial scales, in voxels (default [2, 4])
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
