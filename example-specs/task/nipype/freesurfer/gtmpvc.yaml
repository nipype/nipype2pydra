# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.petsurfer.GTMPVC' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# create an anatomical segmentation for the geometric transfer matrix (GTM).
# 
#     Examples
#     --------
#     >>> gtmpvc = GTMPVC()
#     >>> gtmpvc.inputs.in_file = 'sub-01_ses-baseline_pet.nii.gz'
#     >>> gtmpvc.inputs.segmentation = 'gtmseg.mgz'
#     >>> gtmpvc.inputs.reg_file = 'sub-01_ses-baseline_pet_mean_reg.lta'
#     >>> gtmpvc.inputs.pvc_dir = 'pvc'
#     >>> gtmpvc.inputs.psf = 4
#     >>> gtmpvc.inputs.default_seg_merge = True
#     >>> gtmpvc.inputs.auto_mask = (1, 0.1)
#     >>> gtmpvc.inputs.km_ref = ['8 47']
#     >>> gtmpvc.inputs.km_hb = ['11 12 50 51']
#     >>> gtmpvc.inputs.no_rescale = True
#     >>> gtmpvc.inputs.save_input = True
#     >>> gtmpvc.cmdline  # doctest: +NORMALIZE_WHITESPACE
#     'mri_gtmpvc --auto-mask 1.000000 0.100000 --default-seg-merge     --i sub-01_ses-baseline_pet.nii.gz --km-hb 11 12 50 51 --km-ref 8 47 --no-rescale     --psf 4.000000 --o pvc --reg sub-01_ses-baseline_pet_mean_reg.lta --save-input     --seg gtmseg.mgz'
# 
#     >>> gtmpvc = GTMPVC()
#     >>> gtmpvc.inputs.in_file = 'sub-01_ses-baseline_pet.nii.gz'
#     >>> gtmpvc.inputs.segmentation = 'gtmseg.mgz'
#     >>> gtmpvc.inputs.regheader = True
#     >>> gtmpvc.inputs.pvc_dir = 'pvc'
#     >>> gtmpvc.inputs.mg = (0.5, ["ROI1", "ROI2"])
#     >>> gtmpvc.cmdline  # doctest: +NORMALIZE_WHITESPACE
#     'mri_gtmpvc --i sub-01_ses-baseline_pet.nii.gz --mg 0.5 ROI1 ROI2 --o pvc --regheader --seg gtmseg.mgz'
#     
task_name: GTMPVC
nipype_name: GTMPVC
nipype_module: nipype.interfaces.freesurfer.petsurfer
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    color_table_file: generic/file
    # type=file|default=<undefined>: color table file with seg id names
    contrast: generic/file+list-of
    # type=inputmultiobject|default=[]: contrast file
    in_file: medimage/nifti-gz
    # type=file|default=<undefined>: input volume - source data to pvc
    mask_file: generic/file
    # type=file|default=<undefined>: ignore areas outside of the mask (in input vol space)
    reg_file: medimage-freesurfer/lta
    # type=file|default=<undefined>: LTA registration file that maps PET to anatomical
    segmentation: medimage/mgh-gz
    # type=file|default=<undefined>: segfile : anatomical segmentation to define regions for GTM
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    gtm_file: generic/file
    # type=file: TACs for all regions with GTM PVC
    gtm_stats: generic/file
    # type=file: Statistics for the GTM PVC
    hb_dat: generic/file
    # type=file: High-binding TAC in .dat
    hb_nifti: generic/file
    # type=file: High-binding TAC in nifti
    input_file: generic/file
    # type=file: 4D PET file in native volume space
    mgx_ctxgm: generic/file
    # type=file: Cortical GM voxel-wise values corrected using the extended Muller-Gartner method
    mgx_gm: generic/file
    # type=file: All GM voxel-wise values corrected using the extended Muller-Gartner method
    mgx_subctxgm: generic/file
    # type=file: Subcortical GM voxel-wise values corrected using the extended Muller-Gartner method
    nopvc_file: generic/file
    # type=file: TACs for all regions with no PVC
    opt_params: generic/file
    # type=file: Optimal parameter estimates for the FWHM using adaptive GTM
    pvc_dir: generic/directory
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    rbv: generic/file
    # type=file: All GM voxel-wise values corrected using the RBV method
    # type=bool|default=False: perform Region-based Voxelwise (RBV) PVC
    ref_file: generic/file
    # type=file: Reference TAC in .dat
    reg_anat2pet: generic/file
    # type=file: Registration file to go from anat to PET
    reg_anat2rbvpet: generic/file
    # type=file: Registration file to go from anat to RBV corrected PET
    reg_pet2anat: generic/file
    # type=file: Registration file to go from PET to anat
    reg_rbvpet2anat: generic/file
    # type=file: Registration file to go from RBV corrected PET to anat
    yhat: generic/file
    # type=file: 4D PET file of signal estimate (yhat) after PVC (smoothed with PSF)
    yhat0: generic/file
    # type=file: 4D PET file of signal estimate (yhat) after PVC (unsmoothed)
    yhat_full_fov: generic/file
    # type=file: 4D PET file with full FOV of signal estimate (yhat) after PVC (smoothed with PSF)
    yhat_with_noise: generic/file
    # type=file: 4D PET file with full FOV of signal estimate (yhat) with noise after PVC (smoothed with PSF)
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    pvc_dir: '"pvc"'
    # type=directory: output directory
    # type=str|default='': save outputs to dir
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input volume - source data to pvc
    frame:
    # type=int|default=0: only process 0-based frame F from inputvol
    psf:
    # type=float|default=0.0: scanner PSF FWHM in mm
    segmentation:
    # type=file|default=<undefined>: segfile : anatomical segmentation to define regions for GTM
    reg_file:
    # type=file|default=<undefined>: LTA registration file that maps PET to anatomical
    regheader:
    # type=bool|default=False: assume input and seg share scanner space
    reg_identity:
    # type=bool|default=False: assume that input is in anatomical space
    pvc_dir:
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    mask_file:
    # type=file|default=<undefined>: ignore areas outside of the mask (in input vol space)
    auto_mask:
    # type=tuple|default=(0.0, 0.0): FWHM thresh : automatically compute mask
    no_reduce_fov:
    # type=bool|default=False: do not reduce FoV to encompass mask
    reduce_fox_eqodd:
    # type=bool|default=False: reduce FoV to encompass mask but force nc=nr and ns to be odd
    contrast:
    # type=inputmultiobject|default=[]: contrast file
    default_seg_merge:
    # type=bool|default=False: default schema for merging ROIs
    merge_hypos:
    # type=bool|default=False: merge left and right hypointensites into to ROI
    merge_cblum_wm_gyri:
    # type=bool|default=False: cerebellum WM gyri back into cerebellum WM
    tt_reduce:
    # type=bool|default=False: reduce segmentation to that of a tissue type
    replace:
    # type=tuple|default=(0, 0): Id1 Id2 : replace seg Id1 with seg Id2
    rescale:
    # type=list|default=[]: Id1 <Id2...>  : specify reference region(s) used to rescale (default is pons)
    no_rescale:
    # type=bool|default=False: do not global rescale such that mean of reference region is scaleref
    scale_refval:
    # type=float|default=0.0: refval : scale such that mean in reference region is refval
    color_table_file:
    # type=file|default=<undefined>: color table file with seg id names
    default_color_table:
    # type=bool|default=False: use $FREESURFER_HOME/FreeSurferColorLUT.txt
    tt_update:
    # type=bool|default=False: changes tissue type of VentralDC, BrainStem, and Pons to be SubcortGM
    lat:
    # type=bool|default=False: lateralize tissue types
    no_tfe:
    # type=bool|default=False: do not correct for tissue fraction effect (with --psf 0 turns off PVC entirely)
    no_pvc:
    # type=bool|default=False: turns off PVC entirely (both PSF and TFE)
    tissue_fraction_resolution:
    # type=float|default=0.0: set the tissue fraction resolution parameter (def is 0.5)
    rbv:
    # type=file: All GM voxel-wise values corrected using the RBV method
    # type=bool|default=False: perform Region-based Voxelwise (RBV) PVC
    rbv_res:
    # type=float|default=0.0: voxsize : set RBV voxel resolution (good for when standard res takes too much memory)
    mg:
    # type=tuple|default=<undefined>: gmthresh RefId1 RefId2 ...: perform Mueller-Gaertner PVC, gmthresh is min gm pvf bet 0 and 1
    mg_ref_cerebral_wm:
    # type=bool|default=False:  set MG RefIds to 2 and 41
    mg_ref_lobes_wm:
    # type=bool|default=False: set MG RefIds to those for lobes when using wm subseg
    mgx:
    # type=float|default=0.0: gmxthresh : GLM-based Mueller-Gaertner PVC, gmxthresh is min gm pvf bet 0 and 1
    km_ref:
    # type=list|default=[]: RefId1 RefId2 ... : compute reference TAC for KM as mean of given RefIds
    km_hb:
    # type=list|default=[]: RefId1 RefId2 ... : compute HiBinding TAC for KM as mean of given RefIds
    steady_state_params:
    # type=tuple|default=(0.0, 0.0, 0.0): bpc scale dcf : steady-state analysis spec blood plasma concentration, unit scale and decay correction factor. You must also spec --km-ref. Turns off rescaling
    X:
    # type=bool|default=False: save X matrix in matlab4 format as X.mat (it will be big)
    y:
    # type=bool|default=False: save y matrix in matlab4 format as y.mat
    beta:
    # type=bool|default=False: save beta matrix in matlab4 format as beta.mat
    X0:
    # type=bool|default=False: save X0 matrix in matlab4 format as X0.mat (it will be big)
    save_input:
    # type=bool|default=False: saves rescaled input as input.rescaled.nii.gz
    save_eres:
    # type=bool|default=False: saves residual error
    save_yhat:
    # type=bool|default=False: save signal estimate (yhat) smoothed with the PSF
    save_yhat_with_noise:
    # type=tuple|default=(0, 0): seed nreps : save signal estimate (yhat) with noise
    save_yhat_full_fov:
    # type=bool|default=False: save signal estimate (yhat)
    save_yhat0:
    # type=bool|default=False: save signal estimate (yhat)
    optimization_schema:
    # type=enum|default='3D'|allowed['1D','1D_MB','2D','2D_MB','3D','3D_MB','MB3','MBZ']: opt : optimization schema for applying adaptive GTM
    opt_tol:
    # type=tuple|default=(0, 0.0, 0.0): n_iters_max ftol lin_min_tol : optimization parameters for adaptive gtm using fminsearch
    opt_brain:
    # type=bool|default=False: apply adaptive GTM
    opt_seg_merge:
    # type=bool|default=False: optimal schema for merging ROIs when applying adaptive GTM
    num_threads:
    # type=int|default=0: threads : number of threads to use
    psf_col:
    # type=float|default=0.0: xFWHM : full-width-half-maximum in the x-direction
    psf_row:
    # type=float|default=0.0: yFWHM : full-width-half-maximum in the y-direction
    psf_slice:
    # type=float|default=0.0: zFWHM : full-width-half-maximum in the z-direction
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input volume - source data to pvc
    segmentation:
    # type=file|default=<undefined>: segfile : anatomical segmentation to define regions for GTM
    reg_file:
    # type=file|default=<undefined>: LTA registration file that maps PET to anatomical
    pvc_dir: '"pvc"'
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    psf: '4'
    # type=float|default=0.0: scanner PSF FWHM in mm
    default_seg_merge: 'True'
    # type=bool|default=False: default schema for merging ROIs
    auto_mask: (1, 0.1)
    # type=tuple|default=(0.0, 0.0): FWHM thresh : automatically compute mask
    km_ref: '["8 47"]'
    # type=list|default=[]: RefId1 RefId2 ... : compute reference TAC for KM as mean of given RefIds
    km_hb: '["11 12 50 51"]'
    # type=list|default=[]: RefId1 RefId2 ... : compute HiBinding TAC for KM as mean of given RefIds
    no_rescale: 'True'
    # type=bool|default=False: do not global rescale such that mean of reference region is scaleref
    save_input: 'True'
    # type=bool|default=False: saves rescaled input as input.rescaled.nii.gz
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input volume - source data to pvc
    segmentation:
    # type=file|default=<undefined>: segfile : anatomical segmentation to define regions for GTM
    regheader: 'True'
    # type=bool|default=False: assume input and seg share scanner space
    pvc_dir: '"pvc"'
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    mg: (0.5, ["ROI1", "ROI2"])
    # type=tuple|default=<undefined>: gmthresh RefId1 RefId2 ...: perform Mueller-Gaertner PVC, gmthresh is min gm pvf bet 0 and 1
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_gtmpvc --auto-mask 1.000000 0.100000 --default-seg-merge --i sub-01_ses-baseline_pet.nii.gz --km-hb 11 12 50 51 --km-ref 8 47 --no-rescale --psf 4.000000 --o pvc --reg sub-01_ses-baseline_pet_mean_reg.lta --save-input --seg gtmseg.mgz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"sub-01_ses-baseline_pet.nii.gz"'
    # type=file|default=<undefined>: input volume - source data to pvc
    segmentation: '"gtmseg.mgz"'
    # type=file|default=<undefined>: segfile : anatomical segmentation to define regions for GTM
    reg_file: '"sub-01_ses-baseline_pet_mean_reg.lta"'
    # type=file|default=<undefined>: LTA registration file that maps PET to anatomical
    pvc_dir: '"pvc"'
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    psf: '4'
    # type=float|default=0.0: scanner PSF FWHM in mm
    default_seg_merge: 'True'
    # type=bool|default=False: default schema for merging ROIs
    auto_mask: (1, 0.1)
    # type=tuple|default=(0.0, 0.0): FWHM thresh : automatically compute mask
    km_ref: '["8 47"]'
    # type=list|default=[]: RefId1 RefId2 ... : compute reference TAC for KM as mean of given RefIds
    km_hb: '["11 12 50 51"]'
    # type=list|default=[]: RefId1 RefId2 ... : compute HiBinding TAC for KM as mean of given RefIds
    no_rescale: 'True'
    # type=bool|default=False: do not global rescale such that mean of reference region is scaleref
    save_input: 'True'
    # type=bool|default=False: saves rescaled input as input.rescaled.nii.gz
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: mri_gtmpvc --i sub-01_ses-baseline_pet.nii.gz --mg 0.5 ROI1 ROI2 --o pvc --regheader --seg gtmseg.mgz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"sub-01_ses-baseline_pet.nii.gz"'
    # type=file|default=<undefined>: input volume - source data to pvc
    segmentation: '"gtmseg.mgz"'
    # type=file|default=<undefined>: segfile : anatomical segmentation to define regions for GTM
    regheader: 'True'
    # type=bool|default=False: assume input and seg share scanner space
    pvc_dir: '"pvc"'
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    mg: (0.5, ["ROI1", "ROI2"])
    # type=tuple|default=<undefined>: gmthresh RefId1 RefId2 ...: perform Mueller-Gaertner PVC, gmthresh is min gm pvf bet 0 and 1
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
