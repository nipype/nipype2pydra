# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.model.OneSampleTTest' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
task_name: OneSampleTTest
nipype_name: OneSampleTTest
nipype_module: nipype.interfaces.freesurfer.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    contrast: generic/file+list-of
    # type=inputmultiobject|default=[]: contrast file
    design: generic/file
    # type=file|default=<undefined>: design matrix file
    fixed_fx_dof_file: generic/file
    # type=file|default=<undefined>: text file with dof for fixed effects analysis
    fixed_fx_var: generic/file
    # type=file|default=<undefined>: for fixed effects analysis
    in_file: generic/file
    # type=file|default=<undefined>: input 4D file
    label_file: generic/file
    # type=file|default=<undefined>: use label as mask, surfaces only
    mask_file: Path
    # type=file: map of the mask used in the analysis
    # type=file|default=<undefined>: binary mask
    per_voxel_reg: generic/file+list-of
    # type=inputmultiobject|default=[]: per-voxel regressors
    sim_done_file: generic/file
    # type=file|default=<undefined>: create file when simulation finished
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    weight_file: generic/file
    # type=file|default=<undefined>: weight for each input at each voxel
    weighted_ls: generic/file
    # type=file|default=<undefined>: weighted least squares
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    beta_file: generic/file
    # type=file: map of regression coefficients
    bp_file: generic/file
    # type=file: Binding potential estimates
    dof_file: generic/file
    # type=file: text file with effective degrees-of-freedom for the analysis
    error_file: generic/file
    # type=file: map of residual error
    error_stddev_file: generic/file
    # type=file: map of residual error standard deviation
    error_var_file: generic/file
    # type=file: map of residual error variance
    estimate_file: generic/file
    # type=file: map of the estimated Y values
    frame_eigenvectors: generic/file
    # type=file: matrix of frame eigenvectors from residual PCA
    fwhm_file: generic/file
    # type=file: text file with estimated smoothness
    glm_dir: generic/directory
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    k2p_file: generic/file
    # type=file: estimate of k2p parameter
    mask_file: generic/file
    # type=file: map of the mask used in the analysis
    # type=file|default=<undefined>: binary mask
    singular_values: generic/file
    # type=file: matrix singular values from residual PCA
    spatial_eigenvectors: generic/file
    # type=file: map of spatial eigenvectors from residual PCA
    svd_stats_file: generic/file
    # type=file: text file summarizing the residual PCA
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    glm_dir: glm_dir
    # type=directory: output directory
    # type=str|default='': save outputs to dir
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    glm_dir:
    # type=directory: output directory
    # type=str|default='': save outputs to dir
    in_file:
    # type=file|default=<undefined>: input 4D file
    fsgd:
    # type=tuple|default=(<undefined>, 'doss'): freesurfer descriptor file
    design:
    # type=file|default=<undefined>: design matrix file
    contrast:
    # type=inputmultiobject|default=[]: contrast file
    one_sample:
    # type=bool|default=False: construct X and C as a one-sample group mean
    no_contrast_ok:
    # type=bool|default=False: do not fail if no contrasts specified
    per_voxel_reg:
    # type=inputmultiobject|default=[]: per-voxel regressors
    self_reg:
    # type=tuple|default=(0, 0, 0): self-regressor from index col row slice
    weighted_ls:
    # type=file|default=<undefined>: weighted least squares
    fixed_fx_var:
    # type=file|default=<undefined>: for fixed effects analysis
    fixed_fx_dof:
    # type=int|default=0: dof for fixed effects analysis
    fixed_fx_dof_file:
    # type=file|default=<undefined>: text file with dof for fixed effects analysis
    weight_file:
    # type=file|default=<undefined>: weight for each input at each voxel
    weight_inv:
    # type=bool|default=False: invert weights
    weight_sqrt:
    # type=bool|default=False: sqrt of weights
    fwhm:
    # type=range|default=0.0: smooth input by fwhm
    var_fwhm:
    # type=range|default=0.0: smooth variance by fwhm
    no_mask_smooth:
    # type=bool|default=False: do not mask when smoothing
    no_est_fwhm:
    # type=bool|default=False: turn off FWHM output estimation
    mask_file:
    # type=file: map of the mask used in the analysis
    # type=file|default=<undefined>: binary mask
    label_file:
    # type=file|default=<undefined>: use label as mask, surfaces only
    cortex:
    # type=bool|default=False: use subjects ?h.cortex.label as label
    invert_mask:
    # type=bool|default=False: invert mask
    prune:
    # type=bool|default=False: remove voxels that do not have a non-zero value at each frame (def)
    no_prune:
    # type=bool|default=False: do not prune
    prune_thresh:
    # type=float|default=0.0: prune threshold. Default is FLT_MIN
    compute_log_y:
    # type=bool|default=False: compute natural log of y prior to analysis
    save_estimate:
    # type=bool|default=False: save signal estimate (yhat)
    save_residual:
    # type=bool|default=False: save residual error (eres)
    save_res_corr_mtx:
    # type=bool|default=False: save residual error spatial correlation matrix (eres.scm). Big!
    surf:
    # type=bool|default=False: analysis is on a surface mesh
    subject_id:
    # type=str|default='': subject id for surface geometry
    hemi:
    # type=enum|default='lh'|allowed['lh','rh']: surface hemisphere
    surf_geo:
    # type=str|default='white': surface geometry name (e.g. white, pial)
    simulation:
    # type=tuple|default=('perm', 0, 0.0, ''): nulltype nsim thresh csdbasename
    sim_sign:
    # type=enum|default='abs'|allowed['abs','neg','pos']: abs, pos, or neg
    uniform:
    # type=tuple|default=(0.0, 0.0): use uniform distribution instead of gaussian
    pca:
    # type=bool|default=False: perform pca/svd analysis on residual
    calc_AR1:
    # type=bool|default=False: compute and save temporal AR1 of residual
    save_cond:
    # type=bool|default=False: flag to save design matrix condition at each voxel
    vox_dump:
    # type=tuple|default=(0, 0, 0): dump voxel GLM and exit
    seed:
    # type=int|default=0: used for synthesizing noise
    synth:
    # type=bool|default=False: replace input with gaussian
    resynth_test:
    # type=int|default=0: test GLM by resynthsis
    profile:
    # type=int|default=0: niters : test speed
    mrtm1:
    # type=tuple|default=(<undefined>, <undefined>): RefTac TimeSec : perform MRTM1 kinetic modeling
    mrtm2:
    # type=tuple|default=(<undefined>, <undefined>, 0.0): RefTac TimeSec k2prime : perform MRTM2 kinetic modeling
    logan:
    # type=tuple|default=(<undefined>, <undefined>, 0.0): RefTac TimeSec tstar   : perform Logan kinetic modeling
    force_perm:
    # type=bool|default=False: force perumtation test, even when design matrix is not orthog
    diag:
    # type=int|default=0: Gdiag_no : set diagnostic level
    diag_cluster:
    # type=bool|default=False: save sig volume and exit from first sim loop
    debug:
    # type=bool|default=False: turn on debugging
    check_opts:
    # type=bool|default=False: don't run anything, just check options and exit
    allow_repeated_subjects:
    # type=bool|default=False: allow subject names to repeat in the fsgd file (must appear before --fsgd
    allow_ill_cond:
    # type=bool|default=False: allow ill-conditioned design matrices
    sim_done_file:
    # type=file|default=<undefined>: create file when simulation finished
    nii:
    # type=bool|default=False: save outputs as nii
    nii_gz:
    # type=bool|default=False: save outputs as nii.gz
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
