# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.preprocess.ConcatenateLTA' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Concatenates two consecutive LTA transformations into one overall
#     transformation
# 
#     Out = LTA2*LTA1
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.freesurfer import ConcatenateLTA
#     >>> conc_lta = ConcatenateLTA()
#     >>> conc_lta.inputs.in_lta1 = 'lta1.lta'
#     >>> conc_lta.inputs.in_lta2 = 'lta2.lta'
#     >>> conc_lta.cmdline
#     'mri_concatenate_lta lta1.lta lta2.lta lta1_concat.lta'
# 
#     You can use 'identity.nofile' as the filename for in_lta2, e.g.:
# 
#     >>> conc_lta.inputs.in_lta2 = 'identity.nofile'
#     >>> conc_lta.inputs.invert_1 = True
#     >>> conc_lta.inputs.out_file = 'inv1.lta'
#     >>> conc_lta.cmdline
#     'mri_concatenate_lta -invert1 lta1.lta identity.nofile inv1.lta'
# 
#     To create a RAS2RAS transform:
# 
#     >>> conc_lta.inputs.out_type = 'RAS2RAS'
#     >>> conc_lta.cmdline
#     'mri_concatenate_lta -invert1 -out_type 1 lta1.lta identity.nofile inv1.lta'
#     
task_name: ConcatenateLTA
nipype_name: ConcatenateLTA
nipype_module: nipype.interfaces.freesurfer.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_lta1: medimage-freesurfer/lta
    # type=file|default=<undefined>: maps some src1 to dst1
    out_file: Path
    # type=file: the combined LTA maps: src1 to dst2 = LTA2*LTA1
    # type=file|default=<undefined>: the combined LTA maps: src1 to dst2 = LTA2*LTA1
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    tal_source_file: generic/file
    # type=file|default=<undefined>: if in_lta2 is talairach.xfm, specify source for talairach
    tal_template_file: generic/file
    # type=file|default=<undefined>: if in_lta2 is talairach.xfm, specify template for talairach
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage-freesurfer/lta
    # type=file: the combined LTA maps: src1 to dst2 = LTA2*LTA1
    # type=file|default=<undefined>: the combined LTA maps: src1 to dst2 = LTA2*LTA1
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_lta1:
    # type=file|default=<undefined>: maps some src1 to dst1
    in_lta2:
    # type=traitcompound|default=None: maps dst1(src2) to dst2
    out_file:
    # type=file: the combined LTA maps: src1 to dst2 = LTA2*LTA1
    # type=file|default=<undefined>: the combined LTA maps: src1 to dst2 = LTA2*LTA1
    invert_1:
    # type=bool|default=False: invert in_lta1 before applying it
    invert_2:
    # type=bool|default=False: invert in_lta2 before applying it
    invert_out:
    # type=bool|default=False: invert output LTA
    out_type:
    # type=enum|default='VOX2VOX'|allowed['RAS2RAS','VOX2VOX']: set final LTA type
    tal_source_file:
    # type=file|default=<undefined>: if in_lta2 is talairach.xfm, specify source for talairach
    tal_template_file:
    # type=file|default=<undefined>: if in_lta2 is talairach.xfm, specify template for talairach
    subject:
    # type=str|default='': set subject in output LTA
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_lta1:
    # type=file|default=<undefined>: maps some src1 to dst1
    in_lta2: '"lta2.lta"'
    # type=traitcompound|default=None: maps dst1(src2) to dst2
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_lta2: '"identity.nofile"'
    # type=traitcompound|default=None: maps dst1(src2) to dst2
    invert_1: 'True'
    # type=bool|default=False: invert in_lta1 before applying it
    out_file: '"inv1.lta"'
    # type=file: the combined LTA maps: src1 to dst2 = LTA2*LTA1
    # type=file|default=<undefined>: the combined LTA maps: src1 to dst2 = LTA2*LTA1
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    out_type: '"RAS2RAS"'
    # type=enum|default='VOX2VOX'|allowed['RAS2RAS','VOX2VOX']: set final LTA type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_concatenate_lta lta1.lta lta2.lta lta1_concat.lta
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_lta1: '"lta1.lta"'
    # type=file|default=<undefined>: maps some src1 to dst1
    in_lta2: '"lta2.lta"'
    # type=traitcompound|default=None: maps dst1(src2) to dst2
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: mri_concatenate_lta -invert1 lta1.lta identity.nofile inv1.lta
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_lta2: '"identity.nofile"'
    # type=traitcompound|default=None: maps dst1(src2) to dst2
    invert_1: 'True'
    # type=bool|default=False: invert in_lta1 before applying it
    out_file: '"inv1.lta"'
    # type=file: the combined LTA maps: src1 to dst2 = LTA2*LTA1
    # type=file|default=<undefined>: the combined LTA maps: src1 to dst2 = LTA2*LTA1
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: mri_concatenate_lta -invert1 -out_type 1 lta1.lta identity.nofile inv1.lta
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    out_type: '"RAS2RAS"'
    # type=enum|default='VOX2VOX'|allowed['RAS2RAS','VOX2VOX']: set final LTA type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
