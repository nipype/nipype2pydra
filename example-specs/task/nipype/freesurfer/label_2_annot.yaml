# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.model.Label2Annot' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Converts a set of surface labels to an annotation file
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.freesurfer import Label2Annot
#     >>> l2a = Label2Annot()
#     >>> l2a.inputs.hemisphere = 'lh'
#     >>> l2a.inputs.subject_id = '10335'
#     >>> l2a.inputs.in_labels = ['lh.aparc.label']
#     >>> l2a.inputs.orig = 'lh.pial'
#     >>> l2a.inputs.out_annot = 'test'
#     >>> l2a.cmdline
#     'mris_label2annot --hemi lh --l lh.aparc.label --a test --s 10335'
#     
task_name: Label2Annot
nipype_name: Label2Annot
nipype_module: nipype.interfaces.freesurfer.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    color_table: generic/file
    # type=file|default=<undefined>: File that defines the structure names, their indices, and their color
    orig: medimage-freesurfer/pial
    # type=file|default=<undefined>: implicit {hemisphere}.orig
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Output annotation file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    hemisphere:
    # type=enum|default='lh'|allowed['lh','rh']: Input hemisphere
    subject_id:
    # type=string|default='subject_id': Subject name/ID
    in_labels:
    # type=list|default=[]: List of input label files
    out_annot:
    # type=string|default='': Name of the annotation to create
    orig:
    # type=file|default=<undefined>: implicit {hemisphere}.orig
    keep_max:
    # type=bool|default=False: Keep label with highest 'stat' value
    verbose_off:
    # type=bool|default=False: Turn off overlap and stat override messages
    color_table:
    # type=file|default=<undefined>: File that defines the structure names, their indices, and their color
    copy_inputs:
    # type=bool|default=False: copy implicit inputs and create a temp subjects_dir
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Input hemisphere
    subject_id: '"10335"'
    # type=string|default='subject_id': Subject name/ID
    in_labels: '["lh.aparc.label"]'
    # type=list|default=[]: List of input label files
    orig:
    # type=file|default=<undefined>: implicit {hemisphere}.orig
    out_annot: '"test"'
    # type=string|default='': Name of the annotation to create
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mris_label2annot --hemi lh --l lh.aparc.label --a test --s 10335
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Input hemisphere
    subject_id: '"10335"'
    # type=string|default='subject_id': Subject name/ID
    in_labels: '["lh.aparc.label"]'
    # type=list|default=[]: List of input label files
    orig: '"lh.pial"'
    # type=file|default=<undefined>: implicit {hemisphere}.orig
    out_annot: '"test"'
    # type=string|default='': Name of the annotation to create
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
