# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.longitudinal.RobustTemplate' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# construct an unbiased robust template for longitudinal volumes
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.freesurfer import RobustTemplate
#     >>> template = RobustTemplate()
#     >>> template.inputs.in_files = ['structural.nii', 'functional.nii']
#     >>> template.inputs.auto_detect_sensitivity = True
#     >>> template.inputs.average_metric = 'mean'
#     >>> template.inputs.initial_timepoint = 1
#     >>> template.inputs.fixed_timepoint = True
#     >>> template.inputs.no_iteration = True
#     >>> template.inputs.subsample_threshold = 200
#     >>> template.cmdline  #doctest:
#     'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template mri_robust_template_out.mgz --subsample 200'
#     >>> template.inputs.out_file = 'T1.nii'
#     >>> template.cmdline  #doctest:
#     'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template T1.nii --subsample 200'
# 
#     >>> template.inputs.transform_outputs = ['structural.lta',
#     ...                                      'functional.lta']
#     >>> template.inputs.scaled_intensity_outputs = ['structural-iscale.txt',
#     ...                                             'functional-iscale.txt']
#     >>> template.cmdline    #doctest: +ELLIPSIS
#     'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template T1.nii --iscaleout .../structural-iscale.txt .../functional-iscale.txt --subsample 200 --lta .../structural.lta .../functional.lta'
# 
#     >>> template.inputs.transform_outputs = True
#     >>> template.inputs.scaled_intensity_outputs = True
#     >>> template.cmdline    #doctest: +ELLIPSIS
#     'mri_robust_template --satit --average 0 --fixtp --mov structural.nii functional.nii --inittp 1 --noit --template T1.nii --iscaleout .../is1.txt .../is2.txt --subsample 200 --lta .../tp1.lta .../tp2.lta'
# 
#     >>> template.run()  #doctest: +SKIP
# 
#     References
#     ----------
#     [https://surfer.nmr.mgh.harvard.edu/fswiki/mri_robust_template]
# 
#     
task_name: RobustTemplate
nipype_name: RobustTemplate
nipype_module: nipype.interfaces.freesurfer.longitudinal
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_files: medimage/nifti1+list-of
    # type=inputmultiobject|default=[]: input movable volumes to be aligned to common mean/median template
    in_intensity_scales: generic/file+list-of
    # type=inputmultiobject|default=[]: use initial intensity scales
    initial_transforms: generic/file+list-of
    # type=inputmultiobject|default=[]: use initial transforms (lta) on source
    out_file: Path
    # type=file: output template volume (final mean/median image)
    # type=file|default='mri_robust_template_out.mgz': output template volume (final mean/median image)
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/nifti1
    # type=file: output template volume (final mean/median image)
    # type=file|default='mri_robust_template_out.mgz': output template volume (final mean/median image)
    scaled_intensity_outputs: text/text-file+list-of
    # type=outputmultiobject: output final intensity scales
    # type=traitcompound|default=[None]: final intensity scales (will activate --iscale)
    transform_outputs: '[generic/file,medimage-freesurfer/lta]+list-of'
    # type=outputmultiobject: output xform files from moving to template
    # type=traitcompound|default=[None]: output xforms to template (for each input)
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: input movable volumes to be aligned to common mean/median template
    out_file:
    # type=file: output template volume (final mean/median image)
    # type=file|default='mri_robust_template_out.mgz': output template volume (final mean/median image)
    auto_detect_sensitivity:
    # type=bool|default=False: auto-detect good sensitivity (recommended for head or full brain scans)
    outlier_sensitivity:
    # type=float|default=0.0: set outlier sensitivity manually (e.g. "--sat 4.685" ). Higher values mean less sensitivity.
    transform_outputs:
    # type=outputmultiobject: output xform files from moving to template
    # type=traitcompound|default=[None]: output xforms to template (for each input)
    intensity_scaling:
    # type=bool|default=False: allow also intensity scaling (default off)
    scaled_intensity_outputs:
    # type=outputmultiobject: output final intensity scales
    # type=traitcompound|default=[None]: final intensity scales (will activate --iscale)
    subsample_threshold:
    # type=int|default=0: subsample if dim > # on all axes (default no subs.)
    average_metric:
    # type=enum|default='median'|allowed['mean','median']: construct template from: 0 Mean, 1 Median (default)
    initial_timepoint:
    # type=int|default=0: use TP# for spacial init (default random), 0: no init
    fixed_timepoint:
    # type=bool|default=False: map everything to init TP# (init TP is not resampled)
    no_iteration:
    # type=bool|default=False: do not iterate, just create first template
    initial_transforms:
    # type=inputmultiobject|default=[]: use initial transforms (lta) on source
    in_intensity_scales:
    # type=inputmultiobject|default=[]: use initial intensity scales
    num_threads:
    # type=int|default=0: allows for specifying more threads
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: input movable volumes to be aligned to common mean/median template
    auto_detect_sensitivity: 'True'
    # type=bool|default=False: auto-detect good sensitivity (recommended for head or full brain scans)
    average_metric: '"mean"'
    # type=enum|default='median'|allowed['mean','median']: construct template from: 0 Mean, 1 Median (default)
    initial_timepoint: '1'
    # type=int|default=0: use TP# for spacial init (default random), 0: no init
    fixed_timepoint: 'True'
    # type=bool|default=False: map everything to init TP# (init TP is not resampled)
    no_iteration: 'True'
    # type=bool|default=False: do not iterate, just create first template
    subsample_threshold: '200'
    # type=int|default=0: subsample if dim > # on all axes (default no subs.)
    out_file: '"T1.nii"'
    # type=file: output template volume (final mean/median image)
    # type=file|default='mri_robust_template_out.mgz': output template volume (final mean/median image)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    transform_outputs: '["structural.lta","functional.lta"]'
    # type=outputmultiobject: output xform files from moving to template
    # type=traitcompound|default=[None]: output xforms to template (for each input)
    scaled_intensity_outputs: '["structural-iscale.txt","functional-iscale.txt"]'
    # type=outputmultiobject: output final intensity scales
    # type=traitcompound|default=[None]: final intensity scales (will activate --iscale)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    transform_outputs: 'True'
    # type=outputmultiobject: output xform files from moving to template
    # type=traitcompound|default=[None]: output xforms to template (for each input)
    scaled_intensity_outputs: 'True'
    # type=outputmultiobject: output final intensity scales
    # type=traitcompound|default=[None]: final intensity scales (will activate --iscale)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline:
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_files: '["structural.nii", "functional.nii"]'
    # type=inputmultiobject|default=[]: input movable volumes to be aligned to common mean/median template
    auto_detect_sensitivity: 'True'
    # type=bool|default=False: auto-detect good sensitivity (recommended for head or full brain scans)
    average_metric: '"mean"'
    # type=enum|default='median'|allowed['mean','median']: construct template from: 0 Mean, 1 Median (default)
    initial_timepoint: '1'
    # type=int|default=0: use TP# for spacial init (default random), 0: no init
    fixed_timepoint: 'True'
    # type=bool|default=False: map everything to init TP# (init TP is not resampled)
    no_iteration: 'True'
    # type=bool|default=False: do not iterate, just create first template
    subsample_threshold: '200'
    # type=int|default=0: subsample if dim > # on all axes (default no subs.)
    out_file: '"T1.nii"'
    # type=file: output template volume (final mean/median image)
    # type=file|default='mri_robust_template_out.mgz': output template volume (final mean/median image)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline:
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    transform_outputs: '["structural.lta","functional.lta"]'
    # type=outputmultiobject: output xform files from moving to template
    # type=traitcompound|default=[None]: output xforms to template (for each input)
    scaled_intensity_outputs: '["structural-iscale.txt","functional-iscale.txt"]'
    # type=outputmultiobject: output final intensity scales
    # type=traitcompound|default=[None]: final intensity scales (will activate --iscale)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline:
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    transform_outputs: 'True'
    # type=outputmultiobject: output xform files from moving to template
    # type=traitcompound|default=[None]: output xforms to template (for each input)
    scaled_intensity_outputs: 'True'
    # type=outputmultiobject: output final intensity scales
    # type=traitcompound|default=[None]: final intensity scales (will activate --iscale)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
