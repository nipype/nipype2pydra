# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.petsurfer.GTMSeg' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# create an anatomical segmentation for the geometric transfer matrix (GTM).
# 
#     Examples
#     --------
#     >>> gtmseg = GTMSeg()
#     >>> gtmseg.inputs.subject_id = 'subject_id'
#     >>> gtmseg.cmdline
#     'gtmseg --o gtmseg.mgz --s subject_id'
#     
task_name: GTMSeg
nipype_name: GTMSeg
nipype_module: nipype.interfaces.freesurfer.petsurfer
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    colortable: generic/file
    # type=file|default=<undefined>: colortable
    out_file: Path
    # type=file: GTM segmentation
    # type=file|default='gtmseg.mgz': output volume relative to subject/mri
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: GTM segmentation
    # type=file|default='gtmseg.mgz': output volume relative to subject/mri
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    subject_id:
    # type=string|default='': subject id
    xcerseg:
    # type=bool|default=False: run xcerebralseg on this subject to create apas+head.mgz
    out_file:
    # type=file: GTM segmentation
    # type=file|default='gtmseg.mgz': output volume relative to subject/mri
    upsampling_factor:
    # type=int|default=0: upsampling factor (default is 2)
    subsegwm:
    # type=bool|default=False: subsegment WM into lobes (default)
    keep_hypo:
    # type=bool|default=False: do not relabel hypointensities as WM when subsegmenting WM
    keep_cc:
    # type=bool|default=False: do not relabel corpus callosum as WM
    dmax:
    # type=float|default=0.0: distance threshold to use when subsegmenting WM (default is 5)
    ctx_annot:
    # type=tuple|default=('', 0, 0): annot lhbase rhbase : annotation to use for cortical segmentation (default is aparc 1000 2000)
    wm_annot:
    # type=tuple|default=('', 0, 0): annot lhbase rhbase : annotation to use for WM segmentation (with --subsegwm, default is lobes 3200 4200)
    output_upsampling_factor:
    # type=int|default=0: set output USF different than USF, mostly for debugging
    head:
    # type=string|default='': use headseg instead of apas+head.mgz
    subseg_cblum_wm:
    # type=bool|default=False: subsegment cerebellum WM into core and gyri
    no_pons:
    # type=bool|default=False: do not add pons segmentation when doing ---xcerseg
    no_vermis:
    # type=bool|default=False: do not add vermis segmentation when doing ---xcerseg
    colortable:
    # type=file|default=<undefined>: colortable
    no_seg_stats:
    # type=bool|default=False: do not compute segmentation stats
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    subject_id: '"subject_id"'
    # type=string|default='': subject id
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: gtmseg --o gtmseg.mgz --s subject_id
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    subject_id: '"subject_id"'
    # type=string|default='': subject id
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
