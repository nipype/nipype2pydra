# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.svm.SVMTest' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Temporally predictive modeling with the support vector machine
#     SVM Test Only
#     For complete details, see the `3dsvm Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dsvm.html>`_
# 
#     Examples
#     ========
# 
#     >>> from nipype.interfaces import afni as afni
#     >>> svmTest = afni.SVMTest()
#     >>> svmTest.inputs.in_file= 'run2+orig'
#     >>> svmTest.inputs.model= 'run1+orig_model'
#     >>> svmTest.inputs.testlabels= 'run2_categories.1D'
#     >>> svmTest.inputs.out_file= 'pred2_model1'
#     >>> res = svmTest.run() # doctest: +SKIP
# 
#     
task_name: SVMTest
nipype_name: SVMTest
nipype_module: nipype.interfaces.afni.svm
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: A 3D or 3D+t AFNI brik dataset to be used for testing.
    out_file: Path
    # type=file: output file
    # type=file|default=<undefined>: filename for .1D prediction file(s).
    testlabels: generic/file
    # type=file|default=<undefined>: *true* class category .1D labels for the test dataset. It is used to calculate the prediction accuracy performance
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: filename for .1D prediction file(s).
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    model:
    # type=str|default='': modname is the basename for the brik containing the SVM model
    in_file:
    # type=file|default=<undefined>: A 3D or 3D+t AFNI brik dataset to be used for testing.
    out_file:
    # type=file: output file
    # type=file|default=<undefined>: filename for .1D prediction file(s).
    testlabels:
    # type=file|default=<undefined>: *true* class category .1D labels for the test dataset. It is used to calculate the prediction accuracy performance
    classout:
    # type=bool|default=False: Flag to specify that pname files should be integer-valued, corresponding to class category decisions.
    nopredcensord:
    # type=bool|default=False: Flag to prevent writing predicted values for censored time-points
    nodetrend:
    # type=bool|default=False: Flag to specify that pname files should not be linearly detrended
    multiclass:
    # type=bool|default=False: Specifies multiclass algorithm for classification
    options:
    # type=str|default='': additional options for SVM-light
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
