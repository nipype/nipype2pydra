# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.utils.OneDToolPy' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# This program is meant to read/manipulate/write/diagnose 1D datasets.
#     Input can be specified using AFNI sub-brick[]/time{} selectors.
# 
#     >>> from nipype.interfaces import afni
#     >>> odt = afni.OneDToolPy()
#     >>> odt.inputs.in_file = 'f1.1D'
#     >>> odt.inputs.set_nruns = 3
#     >>> odt.inputs.demean = True
#     >>> odt.inputs.out_file = 'motion_dmean.1D'
#     >>> odt.cmdline # doctest: +ELLIPSIS
#     'python2 ...1d_tool.py -demean -infile f1.1D -write motion_dmean.1D -set_nruns 3'
#      >>> res = odt.run()  # doctest: +SKIP
task_name: OneDToolPy
nipype_name: OneDToolPy
nipype_module: nipype.interfaces.afni.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage-afni/oned
    # type=file|default=<undefined>: input file to OneDTool
    out_file: Path
    # type=file: output of 1D_tool.py
    # type=file|default=<undefined>: write the current 1D data to FILE
    show_cormat_warnings: generic/file
    # type=file|default=<undefined>: Write cormat warnings to a file
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage-afni/oned
    # type=file: output of 1D_tool.py
    # type=file|default=<undefined>: write the current 1D data to FILE
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to OneDTool
    set_nruns:
    # type=int|default=0: treat the input data as if it has nruns
    derivative:
    # type=bool|default=False: take the temporal derivative of each vector (done as first backward difference)
    demean:
    # type=bool|default=False: demean each run (new mean of each run = 0.0)
    out_file:
    # type=file: output of 1D_tool.py
    # type=file|default=<undefined>: write the current 1D data to FILE
    show_censor_count:
    # type=bool|default=False: display the total number of censored TRs  Note : if input is a valid xmat.1D dataset, then the count will come from the header.  Otherwise the input is assumed to be a binary censorfile, and zeros are simply counted.
    censor_motion:
    # type=tuple|default=(<traits.trait_types.Float object at 0x1155ce990>, <nipype.interfaces.base.traits_extension.File object at 0x1155cea50>): Tuple of motion limit and outfile prefix. need to also set set_nruns -r set_run_lengths
    censor_prev_TR:
    # type=bool|default=False: for each censored TR, also censor previous
    show_trs_uncensored:
    # type=enum|default='comma'|allowed['comma','encoded','space','verbose']: display a list of TRs which were not censored in the specified style
    show_cormat_warnings:
    # type=file|default=<undefined>: Write cormat warnings to a file
    show_indices_interest:
    # type=bool|default=False: display column indices for regs of interest
    show_trs_run:
    # type=int|default=0: restrict -show_trs_[un]censored to the given 1-based run
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    py27_path:
    # type=traitcompound|default='python2': 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to OneDTool
    set_nruns: '3'
    # type=int|default=0: treat the input data as if it has nruns
    demean: 'True'
    # type=bool|default=False: demean each run (new mean of each run = 0.0)
    out_file: '"motion_dmean.1D"'
    # type=file: output of 1D_tool.py
    # type=file|default=<undefined>: write the current 1D data to FILE
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: python2 ...1d_tool.py -demean -infile f1.1D -write motion_dmean.1D -set_nruns 3
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: input file to OneDTool
    set_nruns: '3'
    # type=int|default=0: treat the input data as if it has nruns
    demean: 'True'
    # type=bool|default=False: demean each run (new mean of each run = 0.0)
    out_file: '"motion_dmean.1D"'
    # type=file: output of 1D_tool.py
    # type=file|default=<undefined>: write the current 1D data to FILE
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
