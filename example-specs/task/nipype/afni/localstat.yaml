# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.utils.Localstat' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 3dLocalstat - computes statistics at each voxel,
#     based on a local neighborhood of that voxel.
# 
#     For complete details, see the `3dLocalstat Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dLocalstat.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> localstat = afni.Localstat()
#     >>> localstat.inputs.in_file = 'functional.nii'
#     >>> localstat.inputs.mask_file = 'skeleton_mask.nii.gz'
#     >>> localstat.inputs.neighborhood = ('SPHERE', 45)
#     >>> localstat.inputs.stat = 'mean'
#     >>> localstat.inputs.nonmask = True
#     >>> localstat.inputs.outputtype = 'NIFTI_GZ'
#     >>> localstat.cmdline
#     "3dLocalstat -prefix functional_localstat.nii -mask skeleton_mask.nii.gz -nbhd 'SPHERE(45.0)' -use_nonmask -stat mean functional.nii"
#     >>> res = localstat.run()  # doctest: +SKIP
# 
#     
task_name: Localstat
nipype_name: Localstat
nipype_module: nipype.interfaces.afni.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input dataset
    mask_file: medimage/nifti-gz
    # type=file|default=<undefined>: Mask image file name. Voxels NOT in the mask will not be used in the neighborhood of any voxel. Also, a voxel NOT in the mask will have its statistic(s) computed as zero (0) unless the parameter 'nonmask' is set to true.
    out_file: Path
    # type=file: output file
    # type=file|default=<undefined>: Output dataset.
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: Output dataset.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset
    neighborhood:
    # type=traitcompound|default=None: The region around each voxel that will be extracted for the statistics calculation. Possible regions are: 'SPHERE', 'RHDD' (rhombic dodecahedron), 'TOHD' (truncated octahedron) with a given radius in mm or 'RECT' (rectangular block) with dimensions to specify in mm.
    stat:
    # type=inputmultiobject|default=[]: statistics to compute. Possible names are:   * mean   = average of the values  * stdev  = standard deviation  * var    = variance (stdev\*stdev)  * cvar   = coefficient of variation = stdev/fabs(mean)  * median = median of the values  * MAD    = median absolute deviation  * min    = minimum  * max    = maximum  * absmax = maximum of the absolute values  * num    = number of the values in the region:             with the use of -mask or -automask,             the size of the region around any given             voxel will vary; this option lets you             map that size.  It may be useful if you             plan to compute a t-statistic (say) from             the mean and stdev outputs.  * sum    = sum of the values in the region  * FWHM   = compute (like 3dFWHM) image smoothness             inside each voxel's neighborhood.  Results             are in 3 sub-bricks: FWHMx, FHWMy, and FWHMz.             Places where an output is -1 are locations             where the FWHM value could not be computed             (e.g., outside the mask).  * FWHMbar= Compute just the average of the 3 FWHM values             (normally would NOT do this with FWHM also).  * perc:P0:P1:Pstep =             Compute percentiles between P0 and P1 with a             step of Pstep.             Default P1 is equal to P0 and default P2 = 1  * rank   = rank of the voxel's intensity  * frank  = rank / number of voxels in neighborhood  * P2skew = Pearson's second skewness coefficient              3 \* (mean - median) / stdev  * ALL    = all of the above, in that order             (except for FWHMbar and perc).  * mMP2s  = Exactly the same output as:             median, MAD, P2skew,             but a little faster  * mmMP2s = Exactly the same output as:             mean, median, MAD, P2skew  More than one option can be used.
    mask_file:
    # type=file|default=<undefined>: Mask image file name. Voxels NOT in the mask will not be used in the neighborhood of any voxel. Also, a voxel NOT in the mask will have its statistic(s) computed as zero (0) unless the parameter 'nonmask' is set to true.
    automask:
    # type=bool|default=False: Compute the mask as in program 3dAutomask.
    nonmask:
    # type=bool|default=False: Voxels not in the mask WILL have their local statistics computed from all voxels in their neighborhood that ARE in the mask. For instance, this option can be used to compute the average local white matter time series, even at non-WM voxels.
    reduce_grid:
    # type=traitcompound|default=None: Compute output on a grid that is reduced by the specified factors. If a single value is passed, output is resampled to the specified isotropic grid. Otherwise, the 3 inputs describe the reduction in the X, Y, and Z directions. This option speeds up computations at the expense of resolution. It should only be used when the nbhd is quite large with respect to the input's resolution, and the resultant stats are expected to be smooth.
    reduce_restore_grid:
    # type=traitcompound|default=None: Like reduce_grid, but also resample output back to inputgrid.
    reduce_max_vox:
    # type=float|default=0.0: Like reduce_restore_grid, but automatically set Rx Ry Rz sothat the computation grid is at a resolution of nbhd/MAX_VOXvoxels.
    grid_rmode:
    # type=enum|default='NN'|allowed['Bk','Cu','Li','NN']: Interpolant to use when resampling the output with thereduce_restore_grid option. The resampling method string RESAM should come from the set {'NN', 'Li', 'Cu', 'Bk'}. These stand for 'Nearest Neighbor', 'Linear', 'Cubic', and 'Blocky' interpolation, respectively.
    quiet:
    # type=bool|default=False: Stop the highly informative progress reports.
    overwrite:
    # type=bool|default=False: overwrite output file if it already exists
    out_file:
    # type=file: output file
    # type=file|default=<undefined>: Output dataset.
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset
    mask_file:
    # type=file|default=<undefined>: Mask image file name. Voxels NOT in the mask will not be used in the neighborhood of any voxel. Also, a voxel NOT in the mask will have its statistic(s) computed as zero (0) unless the parameter 'nonmask' is set to true.
    neighborhood: ("SPHERE", 45)
    # type=traitcompound|default=None: The region around each voxel that will be extracted for the statistics calculation. Possible regions are: 'SPHERE', 'RHDD' (rhombic dodecahedron), 'TOHD' (truncated octahedron) with a given radius in mm or 'RECT' (rectangular block) with dimensions to specify in mm.
    stat: '"mean"'
    # type=inputmultiobject|default=[]: statistics to compute. Possible names are:   * mean   = average of the values  * stdev  = standard deviation  * var    = variance (stdev\*stdev)  * cvar   = coefficient of variation = stdev/fabs(mean)  * median = median of the values  * MAD    = median absolute deviation  * min    = minimum  * max    = maximum  * absmax = maximum of the absolute values  * num    = number of the values in the region:             with the use of -mask or -automask,             the size of the region around any given             voxel will vary; this option lets you             map that size.  It may be useful if you             plan to compute a t-statistic (say) from             the mean and stdev outputs.  * sum    = sum of the values in the region  * FWHM   = compute (like 3dFWHM) image smoothness             inside each voxel's neighborhood.  Results             are in 3 sub-bricks: FWHMx, FHWMy, and FWHMz.             Places where an output is -1 are locations             where the FWHM value could not be computed             (e.g., outside the mask).  * FWHMbar= Compute just the average of the 3 FWHM values             (normally would NOT do this with FWHM also).  * perc:P0:P1:Pstep =             Compute percentiles between P0 and P1 with a             step of Pstep.             Default P1 is equal to P0 and default P2 = 1  * rank   = rank of the voxel's intensity  * frank  = rank / number of voxels in neighborhood  * P2skew = Pearson's second skewness coefficient              3 \* (mean - median) / stdev  * ALL    = all of the above, in that order             (except for FWHMbar and perc).  * mMP2s  = Exactly the same output as:             median, MAD, P2skew,             but a little faster  * mmMP2s = Exactly the same output as:             mean, median, MAD, P2skew  More than one option can be used.
    nonmask: 'True'
    # type=bool|default=False: Voxels not in the mask WILL have their local statistics computed from all voxels in their neighborhood that ARE in the mask. For instance, this option can be used to compute the average local white matter time series, even at non-WM voxels.
    outputtype: '"NIFTI_GZ"'
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dLocalstat -prefix functional_localstat.nii -mask skeleton_mask.nii.gz -nbhd "SPHERE(45.0)" -use_nonmask -stat mean functional.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: input dataset
    mask_file:
    # type=file|default=<undefined>: Mask image file name. Voxels NOT in the mask will not be used in the neighborhood of any voxel. Also, a voxel NOT in the mask will have its statistic(s) computed as zero (0) unless the parameter 'nonmask' is set to true.
    neighborhood: ("SPHERE", 45)
    # type=traitcompound|default=None: The region around each voxel that will be extracted for the statistics calculation. Possible regions are: 'SPHERE', 'RHDD' (rhombic dodecahedron), 'TOHD' (truncated octahedron) with a given radius in mm or 'RECT' (rectangular block) with dimensions to specify in mm.
    stat: '"mean"'
    # type=inputmultiobject|default=[]: statistics to compute. Possible names are:   * mean   = average of the values  * stdev  = standard deviation  * var    = variance (stdev\*stdev)  * cvar   = coefficient of variation = stdev/fabs(mean)  * median = median of the values  * MAD    = median absolute deviation  * min    = minimum  * max    = maximum  * absmax = maximum of the absolute values  * num    = number of the values in the region:             with the use of -mask or -automask,             the size of the region around any given             voxel will vary; this option lets you             map that size.  It may be useful if you             plan to compute a t-statistic (say) from             the mean and stdev outputs.  * sum    = sum of the values in the region  * FWHM   = compute (like 3dFWHM) image smoothness             inside each voxel's neighborhood.  Results             are in 3 sub-bricks: FWHMx, FHWMy, and FWHMz.             Places where an output is -1 are locations             where the FWHM value could not be computed             (e.g., outside the mask).  * FWHMbar= Compute just the average of the 3 FWHM values             (normally would NOT do this with FWHM also).  * perc:P0:P1:Pstep =             Compute percentiles between P0 and P1 with a             step of Pstep.             Default P1 is equal to P0 and default P2 = 1  * rank   = rank of the voxel's intensity  * frank  = rank / number of voxels in neighborhood  * P2skew = Pearson's second skewness coefficient              3 \* (mean - median) / stdev  * ALL    = all of the above, in that order             (except for FWHMbar and perc).  * mMP2s  = Exactly the same output as:             median, MAD, P2skew,             but a little faster  * mmMP2s = Exactly the same output as:             mean, median, MAD, P2skew  More than one option can be used.
    nonmask: 'True'
    # type=bool|default=False: Voxels not in the mask WILL have their local statistics computed from all voxels in their neighborhood that ARE in the mask. For instance, this option can be used to compute the average local white matter time series, even at non-WM voxels.
    outputtype: '"NIFTI_GZ"'
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
