# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.utils.NwarpAdjust' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# This program takes as input a bunch of 3D warps, averages them,
#     and computes the inverse of this average warp.  It then composes
#     each input warp with this inverse average to 'adjust' the set of
#     warps.  Optionally, it can also read in a set of 1-brick datasets
#     corresponding to the input warps, and warp each of them, and average
#     those.
# 
#     For complete details, see the `3dNwarpAdjust Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dNwarpAdjust.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> adjust = afni.NwarpAdjust()
#     >>> adjust.inputs.warps = ['func2anat_InverseWarp.nii.gz', 'func2anat_InverseWarp.nii.gz', 'func2anat_InverseWarp.nii.gz', 'func2anat_InverseWarp.nii.gz', 'func2anat_InverseWarp.nii.gz']
#     >>> adjust.cmdline
#     '3dNwarpAdjust -nwarp func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz'
#     >>> res = adjust.run()  # doctest: +SKIP
# 
#     
task_name: NwarpAdjust
nipype_name: NwarpAdjust
nipype_module: nipype.interfaces.afni.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_files: generic/file+list-of
    # type=inputmultiobject|default=[]: List of input 3D datasets to be warped by the adjusted warp datasets.  There must be exactly as many of these datasets as there are input warps.
    out_file: Path
    # type=file: output file
    # type=file|default=<undefined>: Output mean dataset, only needed if in_files are also given. The output dataset will be on the common grid shared by the source datasets.
    warps: medimage/nifti-gz+list-of
    # type=inputmultiobject|default=[]: List of input 3D warp datasets
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: Output mean dataset, only needed if in_files are also given. The output dataset will be on the common grid shared by the source datasets.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    warps:
    # type=inputmultiobject|default=[]: List of input 3D warp datasets
    in_files:
    # type=inputmultiobject|default=[]: List of input 3D datasets to be warped by the adjusted warp datasets.  There must be exactly as many of these datasets as there are input warps.
    out_file:
    # type=file: output file
    # type=file|default=<undefined>: Output mean dataset, only needed if in_files are also given. The output dataset will be on the common grid shared by the source datasets.
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    warps:
    # type=inputmultiobject|default=[]: List of input 3D warp datasets
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dNwarpAdjust -nwarp func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz func2anat_InverseWarp.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    warps: '["func2anat_InverseWarp.nii.gz", "func2anat_InverseWarp.nii.gz", "func2anat_InverseWarp.nii.gz", "func2anat_InverseWarp.nii.gz", "func2anat_InverseWarp.nii.gz"]'
    # type=inputmultiobject|default=[]: List of input 3D warp datasets
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
