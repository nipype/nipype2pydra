# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.model.Synthesize' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Reads a '-cbucket' dataset and a '.xmat.1D' matrix from 3dDeconvolve,
#        and synthesizes a fit dataset using user-selected sub-bricks and
#        matrix columns.
# 
#     For complete details, see the `3dSynthesize Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dSynthesize.html>`_
# 
#     Examples
#     ========
# 
#     >>> from nipype.interfaces import afni
#     >>> synthesize = afni.Synthesize()
#     >>> synthesize.inputs.cbucket = 'functional.nii'
#     >>> synthesize.inputs.matrix = 'output.1D'
#     >>> synthesize.inputs.select = ['baseline']
#     >>> synthesize.cmdline
#     '3dSynthesize -cbucket functional.nii -matrix output.1D -select baseline'
#     >>> syn = synthesize.run()  # doctest: +SKIP
#     
task_name: Synthesize
nipype_name: Synthesize
nipype_module: nipype.interfaces.afni.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    cbucket: medimage/nifti1
    # type=file|default=<undefined>: Read the dataset output from 3dDeconvolve via the '-cbucket' option.
    matrix: medimage-afni/oned
    # type=file|default=<undefined>: Read the matrix output from 3dDeconvolve via the '-x1D' option.
    out_file: Path
    # type=file: output file
    # type=file|default=<undefined>: output dataset prefix name (default 'syn')
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output dataset prefix name (default 'syn')
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    cbucket:
    # type=file|default=<undefined>: Read the dataset output from 3dDeconvolve via the '-cbucket' option.
    matrix:
    # type=file|default=<undefined>: Read the matrix output from 3dDeconvolve via the '-x1D' option.
    select:
    # type=list|default=[]: A list of selected columns from the matrix (and the corresponding coefficient sub-bricks from the cbucket). Valid types include 'baseline',  'polort', 'allfunc', 'allstim', 'all', Can also provide 'something' where something matches a stim_label from 3dDeconvolve, and 'digits' where digits are the numbers of the select matrix columns by numbers (starting at 0), or number ranges of the form '3..7' and '3-7'.
    out_file:
    # type=file: output file
    # type=file|default=<undefined>: output dataset prefix name (default 'syn')
    dry_run:
    # type=bool|default=False: Don't compute the output, just check the inputs.
    TR:
    # type=float|default=0.0: TR to set in the output.  The default value of TR is read from the header of the matrix file.
    cenfill:
    # type=enum|default='zero'|allowed['nbhr','none','zero']: Determines how censored time points from the 3dDeconvolve run will be filled. Valid types are 'zero', 'nbhr' and 'none'.
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    cbucket:
    # type=file|default=<undefined>: Read the dataset output from 3dDeconvolve via the '-cbucket' option.
    matrix:
    # type=file|default=<undefined>: Read the matrix output from 3dDeconvolve via the '-x1D' option.
    select: '["baseline"]'
    # type=list|default=[]: A list of selected columns from the matrix (and the corresponding coefficient sub-bricks from the cbucket). Valid types include 'baseline',  'polort', 'allfunc', 'allstim', 'all', Can also provide 'something' where something matches a stim_label from 3dDeconvolve, and 'digits' where digits are the numbers of the select matrix columns by numbers (starting at 0), or number ranges of the form '3..7' and '3-7'.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dSynthesize -cbucket functional.nii -matrix output.1D -select baseline
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    cbucket:
    # type=file|default=<undefined>: Read the dataset output from 3dDeconvolve via the '-cbucket' option.
    matrix:
    # type=file|default=<undefined>: Read the matrix output from 3dDeconvolve via the '-x1D' option.
    select: '["baseline"]'
    # type=list|default=[]: A list of selected columns from the matrix (and the corresponding coefficient sub-bricks from the cbucket). Valid types include 'baseline',  'polort', 'allfunc', 'allstim', 'all', Can also provide 'something' where something matches a stim_label from 3dDeconvolve, and 'digits' where digits are the numbers of the select matrix columns by numbers (starting at 0), or number ranges of the form '3..7' and '3-7'.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
