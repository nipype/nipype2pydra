# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.utils.Unifize' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 3dUnifize - for uniformizing image intensity
# 
#     * The input dataset is supposed to be a T1-weighted volume,
#       possibly already skull-stripped (e.g., via 3dSkullStrip).
#       However, this program can be a useful step to take BEFORE
#       3dSkullStrip, since the latter program can fail if the input
#       volume is strongly shaded -- 3dUnifize will (mostly) remove
#       such shading artifacts.
# 
#     * The output dataset has the white matter (WM) intensity approximately
#       uniformized across space, and scaled to peak at about 1000.
# 
#     * The output dataset is always stored in float format!
# 
#     * If the input dataset has more than 1 sub-brick, only sub-brick
#       #0 will be processed!
# 
#     * Want to correct EPI datasets for nonuniformity?
#       You can try the new and experimental [Mar 2017] '-EPI' option.
# 
#     * The principal motive for this program is for use in an image
#       registration script, and it may or may not be useful otherwise.
# 
#     * This program replaces the older (and very different) 3dUniformize,
#       which is no longer maintained and may sublimate at any moment.
#       (In other words, we do not recommend the use of 3dUniformize.)
# 
#     For complete details, see the `3dUnifize Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dUnifize.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> unifize = afni.Unifize()
#     >>> unifize.inputs.in_file = 'structural.nii'
#     >>> unifize.inputs.out_file = 'structural_unifized.nii'
#     >>> unifize.cmdline
#     '3dUnifize -prefix structural_unifized.nii -input structural.nii'
#     >>> res = unifize.run()  # doctest: +SKIP
# 
#     
task_name: Unifize
nipype_name: Unifize
nipype_module: nipype.interfaces.afni.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input file to 3dUnifize
    out_file: Path
    # type=file: unifized file
    # type=file|default=<undefined>: output image file name
    scale_file: Path
    # type=file: scale factor file
    # type=file|default=<undefined>: output file name to save the scale factor used at each voxel 
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/nifti1
    # type=file: unifized file
    # type=file|default=<undefined>: output image file name
    scale_file: generic/file
    # type=file: scale factor file
    # type=file|default=<undefined>: output file name to save the scale factor used at each voxel 
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dUnifize
    out_file:
    # type=file: unifized file
    # type=file|default=<undefined>: output image file name
    t2:
    # type=bool|default=False: Treat the input as if it were T2-weighted, rather than T1-weighted. This processing is done simply by inverting the image contrast, processing it as if that result were T1-weighted, and then re-inverting the results counts of voxel overlap, i.e., each voxel will contain the number of masks that it is set in.
    gm:
    # type=bool|default=False: Also scale to unifize 'gray matter' = lower intensity voxels (to aid in registering images from different scanners).
    urad:
    # type=float|default=0.0: Sets the radius (in voxels) of the ball used for the sneaky trick. Default value is 18.3, and should be changed proportionally if the dataset voxel size differs significantly from 1 mm.
    scale_file:
    # type=file: scale factor file
    # type=file|default=<undefined>: output file name to save the scale factor used at each voxel 
    no_duplo:
    # type=bool|default=False: Do NOT use the 'duplo down' step; this can be useful for lower resolution datasets.
    epi:
    # type=bool|default=False: Assume the input dataset is a T2 (or T2\*) weighted EPI time series. After computing the scaling, apply it to ALL volumes (TRs) in the input dataset. That is, a given voxel will be scaled by the same factor at each TR. This option also implies '-noduplo' and '-T2'.This option turns off '-GM' if you turned it on.
    rbt:
    # type=tuple|default=(0.0, 0.0, 0.0): Option for AFNI experts only.Specify the 3 parameters for the algorithm: R = radius; same as given by option '-Urad', [default=18.3] b = bottom percentile of normalizing data range, [default=70.0] r = top percentile of normalizing data range, [default=80.0] 
    t2_up:
    # type=float|default=0.0: Option for AFNI experts only.Set the upper percentile point used for T2-T1 inversion. Allowed to be anything between 90 and 100 (inclusive), with default to 98.5  (for no good reason).
    cl_frac:
    # type=float|default=0.0: Option for AFNI experts only.Set the automask 'clip level fraction'. Must be between 0.1 and 0.9. A small fraction means to make the initial threshold for clipping (a la 3dClipLevel) smaller, which will tend to make the mask larger.  [default=0.1]
    quiet:
    # type=bool|default=False: Don't print the progress messages.
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dUnifize
    out_file: '"structural_unifized.nii"'
    # type=file: unifized file
    # type=file|default=<undefined>: output image file name
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dUnifize -prefix structural_unifized.nii -input structural.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"structural.nii"'
    # type=file|default=<undefined>: input file to 3dUnifize
    out_file: '"structural_unifized.nii"'
    # type=file: unifized file
    # type=file|default=<undefined>: output image file name
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
