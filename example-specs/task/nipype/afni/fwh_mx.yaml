# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.utils.FWHMx' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Unlike the older 3dFWHM, this program computes FWHMs for all sub-bricks
#     in the input dataset, each one separately.  The output for each one is
#     written to the file specified by '-out'.  The mean (arithmetic or geometric)
#     of all the FWHMs along each axis is written to stdout.  (A non-positive
#     output value indicates something bad happened; e.g., FWHM in z is meaningless
#     for a 2D dataset; the estimation method computed incoherent intermediate results.)
# 
#     For complete details, see the `3dFWHMx Documentation.
#     <https://afni.nimh.nih.gov/pub../pub/dist/doc/program_help/3dFWHMx.html>`_
# 
#     (Classic) METHOD:
# 
#       * Calculate ratio of variance of first differences to data variance.
#       * Should be the same as 3dFWHM for a 1-brick dataset.
#         (But the output format is simpler to use in a script.)
# 
# 
#     .. note:: IMPORTANT NOTE [AFNI > 16]
# 
#       A completely new method for estimating and using noise smoothness values is
#       now available in 3dFWHMx and 3dClustSim. This method is implemented in the
#       '-acf' options to both programs.  'ACF' stands for (spatial) AutoCorrelation
#       Function, and it is estimated by calculating moments of differences out to
#       a larger radius than before.
# 
#       Notably, real FMRI data does not actually have a Gaussian-shaped ACF, so the
#       estimated ACF is then fit (in 3dFWHMx) to a mixed model (Gaussian plus
#       mono-exponential) of the form
# 
#         .. math::
# 
#           ACF(r) = a * exp(-r*r/(2*b*b)) + (1-a)*exp(-r/c)
# 
# 
#       where :math:`r` is the radius, and :math:`a, b, c` are the fitted parameters.
#       The apparent FWHM from this model is usually somewhat larger in real data
#       than the FWHM estimated from just the nearest-neighbor differences used
#       in the 'classic' analysis.
# 
#       The longer tails provided by the mono-exponential are also significant.
#       3dClustSim has also been modified to use the ACF model given above to generate
#       noise random fields.
# 
#     .. note:: TL;DR or summary
# 
#       The take-awaymessage is that the 'classic' 3dFWHMx and
#       3dClustSim analysis, using a pure Gaussian ACF, is not very correct for
#       FMRI data -- I cannot speak for PET or MEG data.
# 
#     .. warning::
# 
#       Do NOT use 3dFWHMx on the statistical results (e.g., '-bucket') from
#       3dDeconvolve or 3dREMLfit!!!  The function of 3dFWHMx is to estimate
#       the smoothness of the time series NOISE, not of the statistics. This
#       proscription is especially true if you plan to use 3dClustSim next!!
# 
#     .. note:: Recommendations
# 
#       * For FMRI statistical purposes, you DO NOT want the FWHM to reflect
#         the spatial structure of the underlying anatomy.  Rather, you want
#         the FWHM to reflect the spatial structure of the noise.  This means
#         that the input dataset should not have anatomical (spatial) structure.
#       * One good form of input is the output of '3dDeconvolve -errts', which is
#         the dataset of residuals left over after the GLM fitted signal model is
#         subtracted out from each voxel's time series.
#       * If you don't want to go to that much trouble, use '-detrend' to approximately
#         subtract out the anatomical spatial structure, OR use the output of 3dDetrend
#         for the same purpose.
#       * If you do not use '-detrend', the program attempts to find non-zero spatial
#         structure in the input, and will print a warning message if it is detected.
# 
#     .. note:: Notes on -demend
# 
#       * I recommend this option, and it is not the default only for historical
#         compatibility reasons.  It may become the default someday.
#       * It is already the default in program 3dBlurToFWHM. This is the same detrending
#         as done in 3dDespike; using 2*q+3 basis functions for q > 0.
#       * If you don't use '-detrend', the program now [Aug 2010] checks if a large number
#         of voxels are have significant nonzero means. If so, the program will print a
#         warning message suggesting the use of '-detrend', since inherent spatial
#         structure in the image will bias the estimation of the FWHM of the image time
#         series NOISE (which is usually the point of using 3dFWHMx).
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> fwhm = afni.FWHMx()
#     >>> fwhm.inputs.in_file = 'functional.nii'
#     >>> fwhm.cmdline
#     '3dFWHMx -input functional.nii -out functional_subbricks.out > functional_fwhmx.out'
#     >>> res = fwhm.run()  # doctest: +SKIP
# 
#     
task_name: FWHMx
nipype_name: FWHMx
nipype_module: nipype.interfaces.afni.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input dataset
    mask: generic/file
    # type=file|default=<undefined>: use only voxels that are nonzero in mask
    out_detrend: Path
    # type=file: output file, detrended
    # type=file|default=<undefined>: Save the detrended file into a dataset
    out_file: Path
    # type=file: output file
    # type=file|default=<undefined>: output file
    out_subbricks: Path
    # type=file: output file (subbricks)
    # type=file|default=<undefined>: output file listing the subbricks FWHM
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_acf: generic/file
    # type=file: output acf file
    out_detrend: generic/file
    # type=file: output file, detrended
    # type=file|default=<undefined>: Save the detrended file into a dataset
    out_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
    out_subbricks: generic/file
    # type=file: output file (subbricks)
    # type=file|default=<undefined>: output file listing the subbricks FWHM
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
    acf_param: acf_param_callable
    # type=traitcompound: fitted ACF model parameters
    fwhm: fwhm_callable
    # type=traitcompound: FWHM along each axis
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset
    out_file:
    # type=file: output file
    # type=file|default=<undefined>: output file
    out_subbricks:
    # type=file: output file (subbricks)
    # type=file|default=<undefined>: output file listing the subbricks FWHM
    mask:
    # type=file|default=<undefined>: use only voxels that are nonzero in mask
    automask:
    # type=bool|default=False: compute a mask from THIS dataset, a la 3dAutomask
    detrend:
    # type=traitcompound|default=False: instead of demed (0th order detrending), detrend to the specified order.  If order is not given, the program picks q=NT/30. -detrend disables -demed, and includes -unif.
    demed:
    # type=bool|default=False: If the input dataset has more than one sub-brick (e.g., has a time axis), then subtract the median of each voxel's time series before processing FWHM. This will tend to remove intrinsic spatial structure and leave behind the noise.
    unif:
    # type=bool|default=False: If the input dataset has more than one sub-brick, then normalize each voxel's time series to have the same MAD before processing FWHM.
    out_detrend:
    # type=file: output file, detrended
    # type=file|default=<undefined>: Save the detrended file into a dataset
    geom:
    # type=bool|default=False: if in_file has more than one sub-brick, compute the final estimate as the geometric mean of the individual sub-brick FWHM estimates
    arith:
    # type=bool|default=False: if in_file has more than one sub-brick, compute the final estimate as the arithmetic mean of the individual sub-brick FWHM estimates
    combine:
    # type=bool|default=False: combine the final measurements along each axis
    compat:
    # type=bool|default=False: be compatible with the older 3dFWHM
    acf:
    # type=traitcompound|default=False: computes the spatial autocorrelation
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dFWHMx -input functional.nii -out functional_subbricks.out > functional_fwhmx.out
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: input dataset
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
