# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.robex.preprocess.RobexSegment' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
# 
#     ROBEX is an automatic whole-brain extraction tool for T1-weighted MRI data (commonly known as skull stripping).
#     ROBEX aims for robust skull-stripping across datasets with no parameter settings. It fits a triangular mesh,
#     constrained by a shape model, to the probabilistic output of a supervised brain boundary classifier.
#     Because the shape model cannot perfectly accommodate unseen cases, a small free deformation is subsequently allowed.
#     The deformation is optimized using graph cuts.
#     The method ROBEX is based on was published in IEEE Transactions on Medical Imaging;
#     please visit the website http://www.jeiglesias.com to download the paper.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.robex.preprocess import RobexSegment
#     >>> robex = RobexSegment()
#     >>> robex.inputs.in_file = 'structural.nii'
#     >>> robex.cmdline
#     'runROBEX.sh structural.nii structural_brain.nii structural_brainmask.nii'
#     >>> robex.run() # doctest: +SKIP
# 
#     
task_name: RobexSegment
nipype_name: RobexSegment
nipype_module: nipype.interfaces.robex.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: Input volume
    out_file: generic/file
    # type=file: Output volume
    # type=file|default=<undefined>: Output volume
    out_mask: generic/file
    # type=file: Output mask
    # type=file|default=<undefined>: Output mask
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Output volume
    # type=file|default=<undefined>: Output volume
    out_mask: generic/file
    # type=file: Output mask
    # type=file|default=<undefined>: Output mask
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input volume
    out_file:
    # type=file: Output volume
    # type=file|default=<undefined>: Output volume
    out_mask:
    # type=file: Output mask
    # type=file|default=<undefined>: Output mask
    seed:
    # type=int|default=0: Seed for random number generator
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input volume
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: runROBEX.sh structural.nii structural_brain.nii structural_brainmask.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: Input volume
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
