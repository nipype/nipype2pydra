# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.dipy.simulate.SimulateMultiTensor' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Interface to MultiTensor model simulator in dipy
#     http://nipy.org/dipy/examples_built/simulate_multi_tensor.html
# 
#     Example
#     -------
# 
#     >>> import nipype.interfaces.dipy as dipy
#     >>> sim = dipy.SimulateMultiTensor()
#     >>> sim.inputs.in_dirs = ['fdir00.nii', 'fdir01.nii']
#     >>> sim.inputs.in_frac = ['ffra00.nii', 'ffra01.nii']
#     >>> sim.inputs.in_vfms = ['tpm_00.nii.gz', 'tpm_01.nii.gz',
#     ...                       'tpm_02.nii.gz']
#     >>> sim.inputs.baseline = 'b0.nii'
#     >>> sim.inputs.in_bvec = 'bvecs'
#     >>> sim.inputs.in_bval = 'bvals'
#     >>> sim.run()                           # doctest: +SKIP
#     
task_name: SimulateMultiTensor
nipype_name: SimulateMultiTensor
nipype_module: nipype.interfaces.dipy.simulate
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_dirs: generic/file+list-of
    # type=inputmultiobject|default=[]: list of fibers (principal directions)
    in_frac: generic/file+list-of
    # type=inputmultiobject|default=[]: volume fraction of each fiber
    in_vfms: generic/file+list-of
    # type=inputmultiobject|default=[]: volume fractions of isotropic compartiments
    in_mask: generic/file
    # type=file|default=<undefined>: mask to simulate data
    baseline: generic/file
    # type=file|default=<undefined>: baseline T2 signal
    gradients: generic/file
    # type=file|default=<undefined>: gradients file
    in_bvec: generic/file
    # type=file|default=<undefined>: input bvecs file
    in_bval: generic/file
    # type=file|default=<undefined>: input bvals file
    out_file: generic/file
    # type=file: simulated DWIs
    # type=file|default='sim_dwi.nii.gz': output file with fractions to be simluated
    out_mask: generic/file
    # type=file: mask file
    # type=file|default='sim_msk.nii.gz': file with the mask simulated
    out_bvec: generic/file
    # type=file: simulated b vectors
    # type=file|default='bvec.sim': simulated b vectors
    out_bval: generic/file
    # type=file: simulated b values
    # type=file|default='bval.sim': simulated b values
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: simulated DWIs
    # type=file|default='sim_dwi.nii.gz': output file with fractions to be simluated
    out_mask: generic/file
    # type=file: mask file
    # type=file|default='sim_msk.nii.gz': file with the mask simulated
    out_bvec: generic/file
    # type=file: simulated b vectors
    # type=file|default='bvec.sim': simulated b vectors
    out_bval: generic/file
    # type=file: simulated b values
    # type=file|default='bval.sim': simulated b values
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_dirs:
    # type=inputmultiobject|default=[]: list of fibers (principal directions)
    in_frac:
    # type=inputmultiobject|default=[]: volume fraction of each fiber
    in_vfms:
    # type=inputmultiobject|default=[]: volume fractions of isotropic compartiments
    in_mask:
    # type=file|default=<undefined>: mask to simulate data
    diff_iso:
    # type=list|default=[0.003, 0.00096, 0.00068]: Diffusivity of isotropic compartments
    diff_sf:
    # type=tuple|default=(0.0017, 0.0002, 0.0002): Single fiber tensor
    n_proc:
    # type=int|default=0: number of processes
    baseline:
    # type=file|default=<undefined>: baseline T2 signal
    gradients:
    # type=file|default=<undefined>: gradients file
    in_bvec:
    # type=file|default=<undefined>: input bvecs file
    in_bval:
    # type=file|default=<undefined>: input bvals file
    num_dirs:
    # type=int|default=32: number of gradient directions (when table is automatically generated)
    bvalues:
    # type=list|default=[1000, 3000]: list of b-values (when table is automatically generated)
    out_file:
    # type=file: simulated DWIs
    # type=file|default='sim_dwi.nii.gz': output file with fractions to be simluated
    out_mask:
    # type=file: mask file
    # type=file|default='sim_msk.nii.gz': file with the mask simulated
    out_bvec:
    # type=file: simulated b vectors
    # type=file|default='bvec.sim': simulated b vectors
    out_bval:
    # type=file: simulated b values
    # type=file|default='bval.sim': simulated b values
    snr:
    # type=int|default=0: signal-to-noise ratio (dB)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
