# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.dipy.reconstruction.CSD' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Uses CSD [Tournier2007]_ to generate the fODF of DWIs. The interface uses
#     :py:mod:`dipy`, as explained in `dipy's CSD example
#     <http://nipy.org/dipy/examples_built/reconst_csd.html>`_.
# 
#     .. [Tournier2007] Tournier, J.D., et al. NeuroImage 2007.
#       Robust determination of the fibre orientation distribution in diffusion
#       MRI: Non-negativity constrained super-resolved spherical deconvolution
# 
# 
#     Example
#     -------
# 
#     >>> from nipype.interfaces import dipy as ndp
#     >>> csd = ndp.CSD()
#     >>> csd.inputs.in_file = '4d_dwi.nii'
#     >>> csd.inputs.in_bval = 'bvals'
#     >>> csd.inputs.in_bvec = 'bvecs'
#     >>> res = csd.run() # doctest: +SKIP
#     
task_name: CSD
nipype_name: CSD
nipype_module: nipype.interfaces.dipy.reconstruction
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_mask: generic/file
    # type=file|default=<undefined>: input mask in which compute tensors
    response: generic/file
    # type=file|default=<undefined>: single fiber estimated response
    out_fods: generic/file
    # type=file: fODFs output file name
    # type=file|default=<undefined>: fODFs output file name
    in_file: generic/file
    # type=file|default=<undefined>: input diffusion data
    in_bval: generic/file
    # type=file|default=<undefined>: input b-values table
    in_bvec: generic/file
    # type=file|default=<undefined>: input b-vectors table
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    model: generic/file
    # type=file: Python pickled object of the CSD model fitted.
    out_fods: generic/file
    # type=file: fODFs output file name
    # type=file|default=<undefined>: fODFs output file name
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_mask:
    # type=file|default=<undefined>: input mask in which compute tensors
    response:
    # type=file|default=<undefined>: single fiber estimated response
    sh_order:
    # type=int|default=8: maximal shperical harmonics order
    save_fods:
    # type=bool|default=True: save fODFs in file
    out_fods:
    # type=file: fODFs output file name
    # type=file|default=<undefined>: fODFs output file name
    in_file:
    # type=file|default=<undefined>: input diffusion data
    in_bval:
    # type=file|default=<undefined>: input b-values table
    in_bvec:
    # type=file|default=<undefined>: input b-vectors table
    b0_thres:
    # type=int|default=700: b0 threshold
    out_prefix:
    # type=str|default='': output prefix for file names
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
