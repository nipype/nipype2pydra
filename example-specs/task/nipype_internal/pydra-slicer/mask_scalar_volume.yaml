# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.filtering.arithmetic.MaskScalarVolume' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Mask Scalar Volume
# 
#     category: Filtering.Arithmetic
# 
#     description: Masks two images. The output image is set to 0 everywhere except where the chosen label from the mask volume is present, at which point it will retain it's original values. Although all image types are supported on input, only signed types are produced. The two images do not have to have the same dimensions.
# 
#     version: 0.1.0.$Revision: 8595 $(alpha)
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/Mask
# 
#     contributor: Nicole Aucoin (SPL, BWH), Ron Kikinis (SPL, BWH)
# 
#     acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
#     
task_name: MaskScalarVolume
nipype_name: MaskScalarVolume
nipype_module: nipype.interfaces.slicer.filtering.arithmetic
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    InputVolume: generic/file
    # type=file|default=<undefined>: Input volume to be masked
    MaskVolume: generic/file
    # type=file|default=<undefined>: Label volume containing the mask
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    OutputVolume: generic/file
    # type=file: Output volume: Input Volume masked by label value from Mask Volume
    # type=traitcompound|default=None: Output volume: Input Volume masked by label value from Mask Volume
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    InputVolume:
    # type=file|default=<undefined>: Input volume to be masked
    MaskVolume:
    # type=file|default=<undefined>: Label volume containing the mask
    OutputVolume:
    # type=file: Output volume: Input Volume masked by label value from Mask Volume
    # type=traitcompound|default=None: Output volume: Input Volume masked by label value from Mask Volume
    label:
    # type=int|default=0: Label value in the Mask Volume to use as the mask
    replace:
    # type=int|default=0: Value to use for the output volume outside of the mask
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
