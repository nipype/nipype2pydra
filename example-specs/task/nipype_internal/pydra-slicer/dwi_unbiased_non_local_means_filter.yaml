# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.legacy.diffusion.denoising.DWIUnbiasedNonLocalMeansFilter' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: DWI Unbiased Non Local Means Filter
# 
#     category: Legacy.Diffusion.Denoising
# 
#     description: This module reduces noise (or unwanted detail) on a set of diffusion weighted images. For this, it filters the images using a Unbiased Non Local Means for Rician noise algorithm. It exploits not only the spatial redundancy, but the redundancy in similar gradient directions as well; it takes into account the N closest gradient directions to the direction being processed (a maximum of 5 gradient directions is allowed to keep a reasonable computational load, since we do not use neither similarity maps nor block-wise implementation).
#     The noise parameter is automatically estimated in the same way as in the jointLMMSE module.
#     A complete description of the algorithm may be found in:
#     Antonio Tristan-Vega and Santiago Aja-Fernandez, DWI filtering using joint information for DTI and HARDI, Medical Image Analysis, Volume 14, Issue 2, Pages 205-218. 2010.
#     Please, note that the execution of this filter is extremely slow, son only very conservative parameters (block size and search size as small as possible) should be used. Even so, its execution may take several hours. The advantage of this filter over joint LMMSE is its better preservation of edges and fine structures.
# 
#     version: 0.0.1.$Revision: 1 $(alpha)
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/UnbiasedNonLocalMeansFilterForDWI
# 
#     contributor: Antonio Tristan Vega (UVa), Santiago Aja Fernandez (UVa)
# 
#     acknowledgements: Partially founded by grant number TEC2007-67073/TCM from the Comision Interministerial de Ciencia y Tecnologia (Spain).
#     
task_name: DWIUnbiasedNonLocalMeansFilter
nipype_name: DWIUnbiasedNonLocalMeansFilter
nipype_module: nipype.interfaces.slicer.legacy.diffusion.denoising
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputVolume: generic/file
    # type=file|default=<undefined>: Input DWI volume.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputVolume: generic/file
    # type=file: Output DWI volume.
    # type=traitcompound|default=None: Output DWI volume.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    rs:
    # type=inputmultiobject|default=[]: The algorithm search for similar voxels in a neighborhood of this size (larger sizes than the default one are extremely slow).
    rc:
    # type=inputmultiobject|default=[]: Similarity between blocks is measured using windows of this size.
    hp:
    # type=float|default=0.0: This parameter is related to noise; the larger the parameter, the more aggressive the filtering. Should be near 1, and only values between 0.8 and 1.2 are allowed
    ng:
    # type=int|default=0: The number of the closest gradients that are used to jointly filter a given gradient direction (a maximum of 5 is allowed).
    re:
    # type=inputmultiobject|default=[]: A neighborhood of this size is used to compute the statistics for noise estimation.
    inputVolume:
    # type=file|default=<undefined>: Input DWI volume.
    outputVolume:
    # type=file: Output DWI volume.
    # type=traitcompound|default=None: Output DWI volume.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
