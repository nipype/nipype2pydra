# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.quantification.petstandarduptakevaluecomputation.PETStandardUptakeValueComputation' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: PET Standard Uptake Value Computation
# 
#     category: Quantification
# 
#     description: Computes the standardized uptake value based on body weight. Takes an input PET image in DICOM and NRRD format (DICOM header must contain Radiopharmaceutical parameters). Produces a CSV file that contains patientID, studyDate, dose, labelID, suvmin, suvmax, suvmean, labelName for each volume of interest. It also displays some of the information as output strings in the GUI, the CSV file is optional in that case. The CSV file is appended to on each execution of the CLI.
# 
#     version: 0.1.0.$Revision: 8595 $(alpha)
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/ComputeSUVBodyWeight
# 
#     contributor: Wendy Plesniak (SPL, BWH), Nicole Aucoin (SPL, BWH), Ron Kikinis (SPL, BWH)
# 
#     acknowledgements: This work is funded by the Harvard Catalyst, and the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
#     
task_name: PETStandardUptakeValueComputation
nipype_name: PETStandardUptakeValueComputation
nipype_module: nipype.interfaces.slicer.quantification.petstandarduptakevaluecomputation
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    petVolume: generic/file
    # type=file|default=<undefined>: Input PET volume for SUVbw computation (must be the same volume as pointed to by the DICOM path!).
    labelMap: generic/file
    # type=file|default=<undefined>: Input label volume containing the volumes of interest
    color: generic/file
    # type=file|default=<undefined>: Color table to to map labels to colors and names
    petDICOMPath: generic/directory
    # type=directory|default=<undefined>: Input path to a directory containing a PET volume containing DICOM header information for SUV computation
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    csvFile: generic/file
    # type=file: A file holding the output SUV values in comma separated lines, one per label. Optional.
    # type=traitcompound|default=None: A file holding the output SUV values in comma separated lines, one per label. Optional.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    petDICOMPath:
    # type=directory|default=<undefined>: Input path to a directory containing a PET volume containing DICOM header information for SUV computation
    petVolume:
    # type=file|default=<undefined>: Input PET volume for SUVbw computation (must be the same volume as pointed to by the DICOM path!).
    labelMap:
    # type=file|default=<undefined>: Input label volume containing the volumes of interest
    color:
    # type=file|default=<undefined>: Color table to to map labels to colors and names
    csvFile:
    # type=file: A file holding the output SUV values in comma separated lines, one per label. Optional.
    # type=traitcompound|default=None: A file holding the output SUV values in comma separated lines, one per label. Optional.
    OutputLabel:
    # type=str|default='': List of labels for which SUV values were computed
    OutputLabelValue:
    # type=str|default='': List of label values for which SUV values were computed
    SUVMax:
    # type=str|default='': SUV max for each label
    SUVMean:
    # type=str|default='': SUV mean for each label
    SUVMin:
    # type=str|default='': SUV minimum for each label
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
