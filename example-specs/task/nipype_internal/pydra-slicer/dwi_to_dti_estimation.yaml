# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.diffusion.diffusion.DWIToDTIEstimation' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: DWI to DTI Estimation
# 
#     category: Diffusion.Diffusion Weighted Images
# 
#     description: Performs a tensor model estimation from diffusion weighted images.
# 
#     There are three estimation methods available: least squares, weighted least squares and non-linear estimation. The first method is the traditional method for tensor estimation and the fastest one. Weighted least squares takes into account the noise characteristics of the MRI images to weight the DWI samples used in the estimation based on its intensity magnitude. The last method is the more complex.
# 
#     version: 0.1.0.$Revision: 1892 $(alpha)
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/DiffusionTensorEstimation
# 
#     license: slicer3
# 
#     contributor: Raul San Jose (SPL, BWH)
# 
#     acknowledgements: This command module is based on the estimation functionality provided by the Teem library. This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
#     
task_name: DWIToDTIEstimation
nipype_name: DWIToDTIEstimation
nipype_module: nipype.interfaces.slicer.diffusion.diffusion
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputVolume: generic/file
    # type=file|default=<undefined>: Input DWI volume
    mask: generic/file
    # type=file|default=<undefined>: Mask where the tensors will be computed
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputTensor: generic/file
    # type=file: Estimated DTI volume
    # type=traitcompound|default=None: Estimated DTI volume
    outputBaseline: generic/file
    # type=file: Estimated baseline volume
    # type=traitcompound|default=None: Estimated baseline volume
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputVolume:
    # type=file|default=<undefined>: Input DWI volume
    mask:
    # type=file|default=<undefined>: Mask where the tensors will be computed
    outputTensor:
    # type=file: Estimated DTI volume
    # type=traitcompound|default=None: Estimated DTI volume
    outputBaseline:
    # type=file: Estimated baseline volume
    # type=traitcompound|default=None: Estimated baseline volume
    enumeration:
    # type=enum|default='LS'|allowed['LS','WLS']: LS: Least Squares, WLS: Weighted Least Squares
    shiftNeg:
    # type=bool|default=False: Shift eigenvalues so all are positive (accounts for bad tensors related to noise or acquisition error)
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
