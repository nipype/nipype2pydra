# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.diffusion.diffusion.TractographyLabelMapSeeding' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Tractography Label Map Seeding
# 
#     category: Diffusion.Diffusion Tensor Images
# 
#     description: Seed tracts on a Diffusion Tensor Image (DT) from a label map
# 
#     version: 0.1.0.$Revision: 1892 $(alpha)
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/Seeding
# 
#     license: slicer3
# 
#     contributor: Raul San Jose (SPL, BWH), Demian Wassermann (SPL, BWH)
# 
#     acknowledgements: Laboratory of Mathematics in Imaging. This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
#     
task_name: TractographyLabelMapSeeding
nipype_name: TractographyLabelMapSeeding
nipype_module: nipype.interfaces.slicer.diffusion.diffusion
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    InputVolume: generic/file
    # type=file|default=<undefined>: Input DTI volume
    inputroi: generic/file
    # type=file|default=<undefined>: Label map with seeding ROIs
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    OutputFibers: generic/file
    # type=file: Tractography result
    # type=traitcompound|default=None: Tractography result
    outputdirectory: generic/directory
    # type=directory: Directory in which to save fiber(s)
    # type=traitcompound|default=None: Directory in which to save fiber(s)
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    InputVolume:
    # type=file|default=<undefined>: Input DTI volume
    inputroi:
    # type=file|default=<undefined>: Label map with seeding ROIs
    OutputFibers:
    # type=file: Tractography result
    # type=traitcompound|default=None: Tractography result
    useindexspace:
    # type=bool|default=False: Seed at IJK voxel grid
    seedspacing:
    # type=float|default=0.0: Spacing (in mm) between seed points, only matters if use Use Index Space is off
    randomgrid:
    # type=bool|default=False: Enable random placing of seeds
    clthreshold:
    # type=float|default=0.0: Minimum Linear Measure for the seeding to start.
    minimumlength:
    # type=float|default=0.0: Minimum length of the fibers (in mm)
    maximumlength:
    # type=float|default=0.0: Maximum length of fibers (in mm)
    stoppingmode:
    # type=enum|default='LinearMeasure'|allowed['FractionalAnisotropy','LinearMeasure']: Tensor measurement used to stop the tractography
    stoppingvalue:
    # type=float|default=0.0: Tractography will stop when the stopping measurement drops below this value
    stoppingcurvature:
    # type=float|default=0.0: Tractography will stop if radius of curvature becomes smaller than this number units are degrees per mm
    integrationsteplength:
    # type=float|default=0.0: Distance between points on the same fiber in mm
    label:
    # type=int|default=0: Label value that defines seeding region.
    writetofile:
    # type=bool|default=False: Write fibers to disk or create in the scene?
    outputdirectory:
    # type=directory: Directory in which to save fiber(s)
    # type=traitcompound|default=None: Directory in which to save fiber(s)
    name:
    # type=str|default='': Name to use for fiber files
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
