# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.filtering.resamplescalarvectordwivolume.ResampleScalarVectorDWIVolume' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Resample Scalar/Vector/DWI Volume
# 
#     category: Filtering
# 
#     description: This module implements image and vector-image resampling through  the use of itk Transforms.It can also handle diffusion weighted MRI image resampling. "Resampling" is performed in space coordinates, not pixel/grid coordinates. It is quite important to ensure that image spacing is properly set on the images involved. The interpolator is required since the mapping from one space to the other will often require evaluation of the intensity of the image at non-grid positions.
# 
#     Warning: To resample DWMR Images, use nrrd input and output files.
# 
#     Warning: Do not use to resample Diffusion Tensor Images, tensors would  not be reoriented
# 
#     version: 0.1
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/ResampleScalarVectorDWIVolume
# 
#     contributor: Francois Budin (UNC)
# 
#     acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149. Information on the National Centers for Biomedical Computing can be obtained from http://nihroadmap.nih.gov/bioinformatics
#     
task_name: ResampleScalarVectorDWIVolume
nipype_name: ResampleScalarVectorDWIVolume
nipype_module: nipype.interfaces.slicer.filtering.resamplescalarvectordwivolume
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputVolume: generic/file
    # type=file|default=<undefined>: Input Volume to be resampled
    Reference: generic/file
    # type=file|default=<undefined>: Reference Volume (spacing,size,orientation,origin)
    transformationFile: generic/file
    # type=file|default=<undefined>: 
    defField: generic/file
    # type=file|default=<undefined>: File containing the deformation field (3D vector image containing vectors with 3 components)
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputVolume: generic/file
    # type=file: Resampled Volume
    # type=traitcompound|default=None: Resampled Volume
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputVolume:
    # type=file|default=<undefined>: Input Volume to be resampled
    outputVolume:
    # type=file: Resampled Volume
    # type=traitcompound|default=None: Resampled Volume
    Reference:
    # type=file|default=<undefined>: Reference Volume (spacing,size,orientation,origin)
    transformationFile:
    # type=file|default=<undefined>: 
    defField:
    # type=file|default=<undefined>: File containing the deformation field (3D vector image containing vectors with 3 components)
    hfieldtype:
    # type=enum|default='displacement'|allowed['displacement','h-Field']: Set if the deformation field is an h-Field
    interpolation:
    # type=enum|default='linear'|allowed['bs','linear','nn','ws']: Sampling algorithm (linear or nn (nearest neighbor), ws (WindowedSinc), bs (BSpline) )
    transform_order:
    # type=enum|default='input-to-output'|allowed['input-to-output','output-to-input']: Select in what order the transforms are read
    notbulk:
    # type=bool|default=False: The transform following the BSpline transform is not set as a bulk transform for the BSpline transform
    spaceChange:
    # type=bool|default=False: Space Orientation between transform and image is different (RAS/LPS) (warning: if the transform is a Transform Node in Slicer3, do not select)
    rotation_point:
    # type=list|default=[]: Rotation Point in case of rotation around a point (otherwise useless)
    centered_transform:
    # type=bool|default=False: Set the center of the transformation to the center of the input image
    image_center:
    # type=enum|default='input'|allowed['input','output']: Image to use to center the transform (used only if 'Centered Transform' is selected)
    Inverse_ITK_Transformation:
    # type=bool|default=False: Inverse the transformation before applying it from output image to input image
    spacing:
    # type=inputmultiobject|default=[]: Spacing along each dimension (0 means use input spacing)
    size:
    # type=inputmultiobject|default=[]: Size along each dimension (0 means use input size)
    origin:
    # type=list|default=[]: Origin of the output Image
    direction_matrix:
    # type=inputmultiobject|default=[]: 9 parameters of the direction matrix by rows (ijk to LPS if LPS transform, ijk to RAS if RAS transform)
    number_of_thread:
    # type=int|default=0: Number of thread used to compute the output image
    default_pixel_value:
    # type=float|default=0.0: Default pixel value for samples falling outside of the input region
    window_function:
    # type=enum|default='h'|allowed['b','c','h','l','w']: Window Function , h = Hamming , c = Cosine , w = Welch , l = Lanczos , b = Blackman
    spline_order:
    # type=int|default=0: Spline Order
    transform_matrix:
    # type=inputmultiobject|default=[]: 12 parameters of the transform matrix by rows ( --last 3 being translation-- )
    transform:
    # type=enum|default='rt'|allowed['a','rt']: Transform algorithm, rt = Rigid Transform, a = Affine Transform
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
