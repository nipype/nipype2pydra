# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.legacy.registration.BSplineDeformableRegistration' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: BSpline Deformable Registration
# 
#     category: Legacy.Registration
# 
#     description: Registers two images together using BSpline transform and mutual information.
# 
#     version: 0.1.0.$Revision: 19608 $(alpha)
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/BSplineDeformableRegistration
# 
#     contributor: Bill Lorensen (GE)
# 
#     acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
#     
task_name: BSplineDeformableRegistration
nipype_name: BSplineDeformableRegistration
nipype_module: nipype.interfaces.slicer.legacy.registration
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    initialtransform: generic/file
    # type=file|default=<undefined>: Initial transform for aligning the fixed and moving image. Maps positions in the fixed coordinate frame to positions in the moving coordinate frame. This transform should be an affine or rigid transform.  It is used an a bulk transform for the BSpline. Optional.
    FixedImageFileName: generic/file
    # type=file|default=<undefined>: Fixed image to which to register
    MovingImageFileName: generic/file
    # type=file|default=<undefined>: Moving image
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputtransform: generic/file
    # type=file: Transform calculated that aligns the fixed and moving image. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional (specify an output transform or an output volume or both).
    # type=traitcompound|default=None: Transform calculated that aligns the fixed and moving image. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional (specify an output transform or an output volume or both).
    outputwarp: generic/file
    # type=file: Vector field that applies an equivalent warp as the BSpline. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional.
    # type=traitcompound|default=None: Vector field that applies an equivalent warp as the BSpline. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional.
    resampledmovingfilename: generic/file
    # type=file: Resampled moving image to fixed image coordinate frame. Optional (specify an output transform or an output volume or both).
    # type=traitcompound|default=None: Resampled moving image to fixed image coordinate frame. Optional (specify an output transform or an output volume or both).
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    iterations:
    # type=int|default=0: Number of iterations
    gridSize:
    # type=int|default=0: Number of grid points on interior of the fixed image. Larger grid sizes allow for finer registrations.
    histogrambins:
    # type=int|default=0: Number of histogram bins to use for Mattes Mutual Information. Reduce the number of bins if a deformable registration fails. If the number of bins is too large, the estimated PDFs will be a field of impulses and will inhibit reliable registration estimation.
    spatialsamples:
    # type=int|default=0: Number of spatial samples to use in estimating Mattes Mutual Information. Larger values yield more accurate PDFs and improved registration quality.
    constrain:
    # type=bool|default=False: Constrain the deformation to the amount specified in Maximum Deformation
    maximumDeformation:
    # type=float|default=0.0: If Constrain Deformation is checked, limit the deformation to this amount.
    default:
    # type=int|default=0: Default pixel value used if resampling a pixel outside of the volume.
    initialtransform:
    # type=file|default=<undefined>: Initial transform for aligning the fixed and moving image. Maps positions in the fixed coordinate frame to positions in the moving coordinate frame. This transform should be an affine or rigid transform.  It is used an a bulk transform for the BSpline. Optional.
    FixedImageFileName:
    # type=file|default=<undefined>: Fixed image to which to register
    MovingImageFileName:
    # type=file|default=<undefined>: Moving image
    outputtransform:
    # type=file: Transform calculated that aligns the fixed and moving image. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional (specify an output transform or an output volume or both).
    # type=traitcompound|default=None: Transform calculated that aligns the fixed and moving image. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional (specify an output transform or an output volume or both).
    outputwarp:
    # type=file: Vector field that applies an equivalent warp as the BSpline. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional.
    # type=traitcompound|default=None: Vector field that applies an equivalent warp as the BSpline. Maps positions from the fixed coordinate frame to the moving coordinate frame. Optional.
    resampledmovingfilename:
    # type=file: Resampled moving image to fixed image coordinate frame. Optional (specify an output transform or an output volume or both).
    # type=traitcompound|default=None: Resampled moving image to fixed image coordinate frame. Optional (specify an output transform or an output volume or both).
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
