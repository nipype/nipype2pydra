# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.slicer.legacy.registration.MultiResolutionAffineRegistration' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Robust Multiresolution Affine Registration
# 
#     category: Legacy.Registration
# 
#     description: Provides affine registration using multiple resolution levels and decomposed affine transforms.
# 
#     version: 0.1.0.$Revision: 2104 $(alpha)
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/MultiResolutionAffineRegistration
# 
#     contributor: Casey B Goodlett (Utah)
# 
#     acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
#     
task_name: MultiResolutionAffineRegistration
nipype_name: MultiResolutionAffineRegistration
nipype_module: nipype.interfaces.slicer.legacy.registration
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fixedImage: generic/file
    # type=file|default=<undefined>: Image which defines the space into which the moving image is registered
    movingImage: generic/file
    # type=file|default=<undefined>: The transform goes from the fixed image's space into the moving image's space
    fixedImageMask: generic/file
    # type=file|default=<undefined>: Label image which defines a mask of interest for the fixed image
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    resampledImage: generic/file
    # type=file: Registration results
    # type=traitcompound|default=None: Registration results
    saveTransform: generic/file
    # type=file: Save the output transform from the registration
    # type=traitcompound|default=None: Save the output transform from the registration
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    fixedImage:
    # type=file|default=<undefined>: Image which defines the space into which the moving image is registered
    movingImage:
    # type=file|default=<undefined>: The transform goes from the fixed image's space into the moving image's space
    resampledImage:
    # type=file: Registration results
    # type=traitcompound|default=None: Registration results
    saveTransform:
    # type=file: Save the output transform from the registration
    # type=traitcompound|default=None: Save the output transform from the registration
    fixedImageMask:
    # type=file|default=<undefined>: Label image which defines a mask of interest for the fixed image
    fixedImageROI:
    # type=list|default=[]: Label image which defines a ROI of interest for the fixed image
    numIterations:
    # type=int|default=0: Number of iterations to run at each resolution level.
    numLineIterations:
    # type=int|default=0: Number of iterations to run at each resolution level.
    stepSize:
    # type=float|default=0.0: The maximum step size of the optimizer in voxels
    stepTolerance:
    # type=float|default=0.0: The maximum step size of the optimizer in voxels
    metricTolerance:
    # type=float|default=0.0: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
