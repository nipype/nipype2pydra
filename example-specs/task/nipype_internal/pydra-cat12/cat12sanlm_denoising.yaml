# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.cat12.preprocess.CAT12SANLMDenoising' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Spatially adaptive non-local means (SANLM) denoising filter
# 
#     This  function  applies  an spatial adaptive (sub-resolution) non-local means denoising filter
#     to  the  data.  This  filter  will  remove  noise  while  preserving  edges. The filter strength is
#     automatically estimated based on the standard deviation of the noise.
# 
#     This   filter   is  internally  used  in  the  segmentation  procedure  anyway.  Thus,  it  is  not
#     necessary (and not recommended) to apply the filter before segmentation.
#     ______________________________________________________________________
#     Christian Gaser, Robert Dahnke
#     Structural Brain Mapping Group (http://www.neuro.uni-jena.de)
#     Departments of Neurology and Psychiatry
#     Jena University Hospital
#     ______________________________________________________________________
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import cat12
#     >>> c = cat12.CAT12SANLMDenoising()
#     >>> c.inputs.in_files = 'anatomical.nii'
#     >>> c.run() # doctest: +SKIP
#     
task_name: CAT12SANLMDenoising
nipype_name: CAT12SANLMDenoising
nipype_module: nipype.interfaces.cat12.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: out file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: Images for filtering.
    spm_type:
    # type=enum|default='float32'|allowed['float32','same','uint16','uint8']: Data type of the output images. 'same' matches the input image type.
    intlim:
    # type=int|default=100: intensity limitation (default = 100)
    filename_prefix:
    # type=str|default='sanlm_': Filename prefix. Specify  the  string  to be prepended to the filenames of the filtered image file(s).
    filename_suffix:
    # type=str|default='': Filename suffix. Specify  the  string  to  be  appended  to the filenames of the filtered image file(s).
    addnoise:
    # type=float|default=0.5: Strength of additional noise in noise-free regions.         Add  minimal  amount  of noise in regions without any noise to avoid image segmentation problems.         This parameter defines the strength of additional noise as percentage of the average signal intensity.
    rician:
    # type=bool|default=True: Rician noise         MRIs  can  have  Gaussian  or  Rician  distributed  noise with uniform or nonuniform variance across the image.         If SNR is high enough (>3)  noise  can  be  well  approximated by Gaussian noise in the foreground. However, for         SENSE reconstruction or DTI data a Rician distribution is expected. Please note that the Rician noise estimation         is sensitive for large signals in the neighbourhood and can lead to artefacts, e.g. cortex can be affected by         very high values in the scalp or in blood vessels.
    replace_nan_and_inf:
    # type=bool|default=True: Replace NAN by 0, -INF by the minimum and INF by the maximum of the image.
    noisecorr_strength:
    # type=enum|default='-Inf'|allowed['-Inf',2,4]: Strength of Noise Corrections         Strength  of  the  (sub-resolution)  spatial  adaptive    non local means (SANLM) noise correction. Please note         that the filter strength is automatically  estimated.  Change this parameter only for specific conditions. The         "light" option applies half of the filter strength of the adaptive  "medium"  cases,  whereas  the  "strong"         option  uses  the  full  filter  strength,  force sub-resolution filtering and applies an additional  iteration.         Sub-resolution  filtering  is  only  used  in  case  of  high image resolution below 0.8 mm or in case of the         "strong" option. light = 2, medium = -Inf, strong = 4
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
