# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.nilearn.SignalExtraction' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Extracts signals over tissue classes or brain regions
# 
#     >>> seinterface = SignalExtraction()
#     >>> seinterface.inputs.in_file = 'functional.nii'
#     >>> seinterface.inputs.label_files = 'segmentation0.nii.gz'
#     >>> seinterface.inputs.out_file = 'means.tsv'
#     >>> segments = ['CSF', 'GrayMatter', 'WhiteMatter']
#     >>> seinterface.inputs.class_labels = segments
#     >>> seinterface.inputs.detrend = True
#     >>> seinterface.inputs.include_global = True
#     
task_name: SignalExtraction
nipype_name: SignalExtraction
nipype_module: nipype.interfaces.nilearn
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: 4-D fMRI nii file
    label_files: generic/file+list-of
    # type=inputmultiobject|default=[]: a 3-D label image, with 0 denoting background, or a list of 3-D probability maps (one per label) or the equivalent 4D file.
    out_file: generic/file
    # type=file: tsv file containing the computed signals, with as many columns as there are labels and as many rows as there are timepoints in in_file, plus a header row with values from class_labels
    # type=file|default='signals.tsv': The name of the file to output to. signals.tsv by default
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: tsv file containing the computed signals, with as many columns as there are labels and as many rows as there are timepoints in in_file, plus a header row with values from class_labels
    # type=file|default='signals.tsv': The name of the file to output to. signals.tsv by default
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: 4-D fMRI nii file
    label_files:
    # type=inputmultiobject|default=[]: a 3-D label image, with 0 denoting background, or a list of 3-D probability maps (one per label) or the equivalent 4D file.
    class_labels:
    # type=list|default=[]: Human-readable labels for each segment in the label file, in order. The length of class_labels must be equal to the number of segments (background excluded). This list corresponds to the class labels in label_file in ascending order
    out_file:
    # type=file: tsv file containing the computed signals, with as many columns as there are labels and as many rows as there are timepoints in in_file, plus a header row with values from class_labels
    # type=file|default='signals.tsv': The name of the file to output to. signals.tsv by default
    incl_shared_variance:
    # type=bool|default=True: By default (True), returns simple time series calculated from each region independently (e.g., for noise regression). If False, returns unique signals for each region, discarding shared variance (e.g., for connectivity. Only has effect with 4D probability maps.
    include_global:
    # type=bool|default=False: If True, include an extra column labeled "GlobalSignal", with values calculated from the entire brain (instead of just regions).
    detrend:
    # type=bool|default=False: If True, perform detrending using nilearn.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
