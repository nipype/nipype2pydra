# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.diffusion_toolkit.dti.DTITracker' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
task_name: DTITracker
nipype_name: DTITracker
nipype_module: nipype.interfaces.diffusion_toolkit.dti
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    tensor_file: generic/file
    # type=file|default=<undefined>: reconstructed tensor file
    mask1_file: generic/file
    # type=file|default=<undefined>: first mask image
    mask2_file: generic/file
    # type=file|default=<undefined>: second mask image
    output_file: generic/file
    # type=file|default='tracks.trk': 
    output_mask: generic/file
    # type=file|default=<undefined>: output a binary mask file in analyze format
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    track_file: generic/file
    # type=file: 
    mask_file: generic/file
    # type=file: 
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    tensor_file:
    # type=file|default=<undefined>: reconstructed tensor file
    input_type:
    # type=enum|default='nii'|allowed['analyze','ni1','nii','nii.gz']: Input and output file type. Accepted values are:  * analyze -> analyze format 7.5 * ni1     -> nifti format saved in separate .hdr and .img file * nii     -> nifti format with one .nii file * nii.gz  -> nifti format with compression  Default type is 'nii' 
    tracking_method:
    # type=enum|default='fact'|allowed['fact','rk2','sl','tl']: Tracking algorithm.  * fact -> use FACT method for tracking. This is the default method. * rk2  -> use 2nd order Runge-Kutta method for tracking. * tl   -> use tensorline method for tracking. * sl   -> use interpolated streamline method with fixed step-length  
    step_length:
    # type=float|default=0.0: Step length, in the unit of minimum voxel size. default value is 0.5 for interpolated streamline method and 0.1 for other methods
    angle_threshold:
    # type=float|default=0.0: set angle threshold. default value is 35 degree
    angle_threshold_weight:
    # type=float|default=0.0: set angle threshold weighting factor. weighting will be applied on top of the angle_threshold
    random_seed:
    # type=int|default=0: use random location in a voxel instead of the center of the voxel to seed. can also define number of seed per voxel. default is 1
    invert_x:
    # type=bool|default=False: invert x component of the vector
    invert_y:
    # type=bool|default=False: invert y component of the vector
    invert_z:
    # type=bool|default=False: invert z component of the vector
    swap_xy:
    # type=bool|default=False: swap x & y vectors while tracking
    swap_yz:
    # type=bool|default=False: swap y & z vectors while tracking
    swap_zx:
    # type=bool|default=False: swap x & z vectors while tracking
    mask1_file:
    # type=file|default=<undefined>: first mask image
    mask1_threshold:
    # type=float|default=0.0: threshold value for the first mask image, if not given, the program will try automatically find the threshold
    mask2_file:
    # type=file|default=<undefined>: second mask image
    mask2_threshold:
    # type=float|default=0.0: threshold value for the second mask image, if not given, the program will try automatically find the threshold
    input_data_prefix:
    # type=str|default='dti': for internal naming use only
    output_file:
    # type=file|default='tracks.trk': 
    output_mask:
    # type=file|default=<undefined>: output a binary mask file in analyze format
    primary_vector:
    # type=enum|default='v2'|allowed['v2','v3']: which vector to use for fibre tracking: v2 or v3. If not set use v1
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
