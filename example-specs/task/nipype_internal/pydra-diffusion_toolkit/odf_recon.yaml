# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.diffusion_toolkit.odf.ODFRecon' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use odf_recon to generate tensors and other maps
task_name: ODFRecon
nipype_name: ODFRecon
nipype_module: nipype.interfaces.diffusion_toolkit.odf
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    DWI: generic/file
    # type=file: 
    # type=file|default=<undefined>: Input raw data
    matrix: generic/file
    # type=file|default=<undefined>: use given file as reconstruction matrix.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    B0: generic/file
    # type=file: 
    DWI: generic/file
    # type=file: 
    # type=file|default=<undefined>: Input raw data
    max: generic/file
    # type=file: 
    ODF: generic/file
    # type=file: 
    entropy: generic/file
    # type=file: 
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    DWI:
    # type=file: 
    # type=file|default=<undefined>: Input raw data
    n_directions:
    # type=int|default=0: Number of directions
    n_output_directions:
    # type=int|default=0: Number of output directions
    out_prefix:
    # type=str|default='odf': Output file prefix
    matrix:
    # type=file|default=<undefined>: use given file as reconstruction matrix.
    n_b0:
    # type=int|default=0: number of b0 scans. by default the program gets this information from the number of directions and number of volumes in the raw data. useful when dealing with incomplete raw data set or only using part of raw data set to reconstruct
    output_type:
    # type=enum|default='nii'|allowed['analyze','ni1','nii','nii.gz']: output file type
    sharpness:
    # type=float|default=0.0: smooth or sharpen the raw data. factor > 0 is smoothing. factor < 0 is sharpening. default value is 0 NOTE: this option applies to DSI study only
    filter:
    # type=bool|default=False: apply a filter (e.g. high pass) to the raw image
    subtract_background:
    # type=bool|default=False: subtract the background value before reconstruction
    dsi:
    # type=bool|default=False: indicates that the data is dsi
    output_entropy:
    # type=bool|default=False: output entropy map
    image_orientation_vectors:
    # type=list|default=[]: specify image orientation vectors. if just one argument given, will treat it as filename and read the orientation vectors from the file. if 6 arguments are given, will treat them as 6 float numbers and construct the 1st and 2nd vector and calculate the 3rd one automatically. this information will be used to determine image orientation, as well as to adjust gradient vectors with oblique angle when
    oblique_correction:
    # type=bool|default=False: when oblique angle(s) applied, some SIEMENS dti protocols do not adjust gradient accordingly, thus it requires adjustment for correct diffusion tensor calculation
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
