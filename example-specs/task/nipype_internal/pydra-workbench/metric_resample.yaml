# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.workbench.metric.MetricResample' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Resample a metric file to a different mesh
# 
#     Resamples a metric file, given two spherical surfaces that are in
#     register.  If ``ADAP_BARY_AREA`` is used, exactly one of -area-surfs or
#     ``-area-metrics`` must be specified.
# 
#     The ``ADAP_BARY_AREA`` method is recommended for ordinary metric data,
#     because it should use all data while downsampling, unlike ``BARYCENTRIC``.
#     The recommended areas option for most data is individual midthicknesses
#     for individual data, and averaged vertex area metrics from individual
#     midthicknesses for group average data.
# 
#     The ``-current-roi`` option only masks the input, the output may be slightly
#     dilated in comparison, consider using ``-metric-mask`` on the output when
#     using ``-current-roi``.
# 
#     The ``-largest option`` results in nearest vertex behavior when used with
#     ``BARYCENTRIC``.  When resampling a binary metric, consider thresholding at
#     0.5 after resampling rather than using ``-largest``.
# 
#     >>> from nipype.interfaces.workbench import MetricResample
#     >>> metres = MetricResample()
#     >>> metres.inputs.in_file = 'sub-01_task-rest_bold_space-fsaverage5.L.func.gii'
#     >>> metres.inputs.method = 'ADAP_BARY_AREA'
#     >>> metres.inputs.current_sphere = 'fsaverage5_std_sphere.L.10k_fsavg_L.surf.gii'
#     >>> metres.inputs.new_sphere = 'fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.gii'
#     >>> metres.inputs.area_metrics = True
#     >>> metres.inputs.current_area = 'fsaverage5.L.midthickness_va_avg.10k_fsavg_L.shape.gii'
#     >>> metres.inputs.new_area = 'fs_LR.L.midthickness_va_avg.32k_fs_LR.shape.gii'
#     >>> metres.cmdline
#     'wb_command -metric-resample sub-01_task-rest_bold_space-fsaverage5.L.func.gii     fsaverage5_std_sphere.L.10k_fsavg_L.surf.gii     fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.gii     ADAP_BARY_AREA fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.out     -area-metrics fsaverage5.L.midthickness_va_avg.10k_fsavg_L.shape.gii     fs_LR.L.midthickness_va_avg.32k_fs_LR.shape.gii'
#     
task_name: MetricResample
nipype_name: MetricResample
nipype_module: nipype.interfaces.workbench.metric
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/gifti
    # type=file|default=<undefined>: The metric file to resample
    current_sphere: medimage/gifti
    # type=file|default=<undefined>: A sphere surface with the mesh that the metric is currently on
    new_sphere: medimage/gifti
    # type=file|default=<undefined>: A sphere surface that is in register with <current-sphere> and has the desired output mesh
    out_file: generic/file
    # type=file: the output metric
    # type=file|default=<undefined>: The output metric
    current_area: medimage/gifti
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
    new_area: medimage/gifti
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
    roi_metric: generic/file
    # type=file|default=<undefined>: Input roi on the current mesh used to exclude non-data vertices
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: the output metric
    # type=file|default=<undefined>: The output metric
    roi_file: generic/file
    # type=file: ROI of vertices that got data from valid source vertices
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: The metric file to resample
    current_sphere:
    # type=file|default=<undefined>: A sphere surface with the mesh that the metric is currently on
    new_sphere:
    # type=file|default=<undefined>: A sphere surface that is in register with <current-sphere> and has the desired output mesh
    method:
    # type=enum|default='ADAP_BARY_AREA'|allowed['ADAP_BARY_AREA','BARYCENTRIC']: The method name - ADAP_BARY_AREA method is recommended for ordinary metric data, because it should use all data while downsampling, unlike BARYCENTRIC. If ADAP_BARY_AREA is used, exactly one of area_surfs or area_metrics must be specified
    out_file:
    # type=file: the output metric
    # type=file|default=<undefined>: The output metric
    area_surfs:
    # type=bool|default=False: Specify surfaces to do vertex area correction based on
    area_metrics:
    # type=bool|default=False: Specify vertex area metrics to do area correction based on
    current_area:
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
    new_area:
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
    roi_metric:
    # type=file|default=<undefined>: Input roi on the current mesh used to exclude non-data vertices
    valid_roi_out:
    # type=bool|default=False: Output the ROI of vertices that got data from valid source vertices
    largest:
    # type=bool|default=False: Use only the value of the vertex with the largest weight
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: The metric file to resample
    method: '"ADAP_BARY_AREA"'
    # type=enum|default='ADAP_BARY_AREA'|allowed['ADAP_BARY_AREA','BARYCENTRIC']: The method name - ADAP_BARY_AREA method is recommended for ordinary metric data, because it should use all data while downsampling, unlike BARYCENTRIC. If ADAP_BARY_AREA is used, exactly one of area_surfs or area_metrics must be specified
    current_sphere:
    # type=file|default=<undefined>: A sphere surface with the mesh that the metric is currently on
    new_sphere:
    # type=file|default=<undefined>: A sphere surface that is in register with <current-sphere> and has the desired output mesh
    area_metrics: 'True'
    # type=bool|default=False: Specify vertex area metrics to do area correction based on
    current_area:
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
    new_area:
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: wb_command -metric-resample sub-01_task-rest_bold_space-fsaverage5.L.func.gii fsaverage5_std_sphere.L.10k_fsavg_L.surf.gii fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.gii ADAP_BARY_AREA fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.out -area-metrics fsaverage5.L.midthickness_va_avg.10k_fsavg_L.shape.gii fs_LR.L.midthickness_va_avg.32k_fs_LR.shape.gii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: The metric file to resample
    method: '"ADAP_BARY_AREA"'
    # type=enum|default='ADAP_BARY_AREA'|allowed['ADAP_BARY_AREA','BARYCENTRIC']: The method name - ADAP_BARY_AREA method is recommended for ordinary metric data, because it should use all data while downsampling, unlike BARYCENTRIC. If ADAP_BARY_AREA is used, exactly one of area_surfs or area_metrics must be specified
    current_sphere:
    # type=file|default=<undefined>: A sphere surface with the mesh that the metric is currently on
    new_sphere:
    # type=file|default=<undefined>: A sphere surface that is in register with <current-sphere> and has the desired output mesh
    area_metrics: 'True'
    # type=bool|default=False: Specify vertex area metrics to do area correction based on
    current_area:
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
    new_area:
    # type=file|default=<undefined>: A relevant anatomical surface with <current-sphere> mesh OR a metric file with vertex areas for <current-sphere> mesh
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
