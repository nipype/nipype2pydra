# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.dti.PicoPDFs' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Constructs a spherical PDF in each voxel for probabilistic tractography.
# 
#     Example
#     -------
#     >>> import nipype.interfaces.camino as cmon
#     >>> pdf = cmon.PicoPDFs()
#     >>> pdf.inputs.inputmodel = 'dt'
#     >>> pdf.inputs.luts = ['lut_file']
#     >>> pdf.inputs.in_file = 'voxel-order_data.Bfloat'
#     >>> pdf.run()          # doctest: +SKIP
# 
#     
task_name: PicoPDFs
nipype_name: PicoPDFs
nipype_module: nipype.interfaces.camino.dti
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: voxel-order data filename
    luts: generic/file+list-of
    # type=inputmultiobject|default=[]: Files containing the lookup tables.For tensor data, one lut must be specified for each type of inversion used in the image (one-tensor, two-tensor, three-tensor).For pds, the number of LUTs must match -numpds (it is acceptable to use the same LUT several times - see example, above).These LUTs may be generated with dtlutgen.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    pdfs: generic/file
    # type=file: path/name of 4D volume in voxel order
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: voxel-order data filename
    inputmodel:
    # type=enum|default='dt'|allowed['dt','multitensor','pds']: input model type
    luts:
    # type=inputmultiobject|default=[]: Files containing the lookup tables.For tensor data, one lut must be specified for each type of inversion used in the image (one-tensor, two-tensor, three-tensor).For pds, the number of LUTs must match -numpds (it is acceptable to use the same LUT several times - see example, above).These LUTs may be generated with dtlutgen.
    pdf:
    # type=enum|default='bingham'|allowed['acg','bingham','watson']: Specifies the PDF to use. There are three choices:    * watson - The Watson distribution. This distribution is rotationally symmetric.   * bingham - The Bingham distributionn, which allows elliptical probability density contours.   * acg - The Angular Central Gaussian distribution, which also allows elliptical probability     density contours.  
    directmap:
    # type=bool|default=False: Only applicable when using pds as the inputmodel. Use direct mapping between the eigenvalues and the distribution parameters instead of the log of the eigenvalues.
    maxcomponents:
    # type=int|default=0: The maximum number of tensor components in a voxel (default 2) for multitensor data.Currently, only the default is supported, but future releases may allow the input of three-tensor data using this option.
    numpds:
    # type=int|default=0: The maximum number of PDs in a voxel (default 3) for PD data.This option determines the size of the input and output voxels.This means that the data file may be large enough to accommodate three or more PDs,but does not mean that any of the voxels are classified as containing three or more PDs.
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
