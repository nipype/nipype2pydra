# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.convert.NIfTIDT2Camino' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Converts NIFTI-1 diffusion tensors to Camino format. The program reads the
#     NIFTI header but does not apply any spatial transformations to the data. The
#     NIFTI intensity scaling parameters are applied.
# 
#     The output is the tensors in Camino voxel ordering: [exit, ln(S0), dxx, dxy,
#     dxz, dyy, dyz, dzz].
# 
#     The exit code is set to 0 unless a background mask is supplied, in which case
#     the code is 0 in brain voxels and -1 in background voxels.
# 
#     The value of ln(S0) in the output is taken from a file if one is supplied,
#     otherwise it is set to 0.
# 
#     NOTE FOR FSL USERS - FSL's dtifit can output NIFTI tensors, but they are not
#     stored in the usual way (which is using NIFTI_INTENT_SYMMATRIX). FSL's
#     tensors follow the ITK / VTK "upper-triangular" convention, so you will need
#     to use the -uppertriangular option to convert these correctly.
# 
#     
task_name: NIfTIDT2Camino
nipype_name: NIfTIDT2Camino
nipype_module: nipype.interfaces.camino.convert
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: A NIFTI-1 dataset containing diffusion tensors. The tensors are assumed to be in lower-triangular order as specified by the NIFTI standard for the storage of symmetric matrices. This file should be either a .nii or a .hdr file.
    s0_file: generic/file
    # type=file|default=<undefined>: File containing the unweighted signal for each voxel, may be a raw binary file (specify type with -inputdatatype) or a supported image file.
    lns0_file: generic/file
    # type=file|default=<undefined>: File containing the log of the unweighted signal for each voxel, may be a raw binary file (specify type with -inputdatatype) or a supported image file.
    bgmask: generic/file
    # type=file|default=<undefined>: Binary valued brain / background segmentation, may be a raw binary file (specify type with -maskdatatype) or a supported image file.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: diffusion tensors data in Camino format
    # type=file|default=<undefined>: 
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file: diffusion tensors data in Camino format
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: A NIFTI-1 dataset containing diffusion tensors. The tensors are assumed to be in lower-triangular order as specified by the NIFTI standard for the storage of symmetric matrices. This file should be either a .nii or a .hdr file.
    s0_file:
    # type=file|default=<undefined>: File containing the unweighted signal for each voxel, may be a raw binary file (specify type with -inputdatatype) or a supported image file.
    lns0_file:
    # type=file|default=<undefined>: File containing the log of the unweighted signal for each voxel, may be a raw binary file (specify type with -inputdatatype) or a supported image file.
    bgmask:
    # type=file|default=<undefined>: Binary valued brain / background segmentation, may be a raw binary file (specify type with -maskdatatype) or a supported image file.
    scaleslope:
    # type=float|default=0.0: A value v in the diffusion tensor is scaled to v * s + i. This is applied after any scaling specified by the input image. Default is 1.0.
    scaleinter:
    # type=float|default=0.0: A value v in the diffusion tensor is scaled to v * s + i. This is applied after any scaling specified by the input image. Default is 0.0.
    uppertriangular:
    # type=bool|default=False: Specifies input in upper-triangular (VTK style) order.
    out_file:
    # type=file: diffusion tensors data in Camino format
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
