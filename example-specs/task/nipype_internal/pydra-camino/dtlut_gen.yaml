# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.dti.DTLUTGen' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Calibrates the PDFs for PICo probabilistic tractography.
# 
#     This program needs to be run once for every acquisition scheme.
#     It outputs a lookup table that is used by the dtpicoparams program to find PICo PDF
#     parameters for an image.
#     The default single tensor LUT contains parameters of the Bingham distribution and is
#     generated by supplying a scheme file and an estimated signal to noise in white matter
#     regions of the (q=0) image.
#     The default inversion is linear (inversion index 1).
# 
#     Advanced users can control several options, including the extent and resolution of the LUT,
#     the inversion index, and the type of PDF. See dtlutgen(1) for details.
# 
#     Example
#     -------
#     >>> import nipype.interfaces.camino as cmon
#     >>> dtl = cmon.DTLUTGen()
#     >>> dtl.inputs.snr = 16
#     >>> dtl.inputs.scheme_file = 'A.scheme'
#     >>> dtl.run()          # doctest: +SKIP
# 
#     
task_name: DTLUTGen
nipype_name: DTLUTGen
nipype_module: nipype.interfaces.camino.dti
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    scheme_file: generic/file
    # type=file|default=<undefined>: The scheme file of the images to be processed using this LUT.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    dtLUT: generic/file
    # type=file: Lookup Table
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    lrange:
    # type=list|default=[]: Index to one-tensor LUTs. This is the ratio L1/L3 and L2 / L3.The LUT is square, with half the values calculated (because L2 / L3 cannot be less than L1 / L3 by definition).The minimum must be >= 1. For comparison, a ratio L1 / L3 = 10 with L2 / L3 = 1 corresponds to an FA of 0.891, and L1 / L3 = 15 with L2 / L3 = 1 corresponds to an FA of 0.929. The default range is 1 to 10.
    frange:
    # type=list|default=[]: Index to two-tensor LUTs. This is the fractional anisotropy of the two tensors. The default is 0.3 to 0.94
    step:
    # type=float|default=0.0: Distance between points in the LUT.For example, if lrange is 1 to 10 and the step is 0.1, LUT entries will be computed at L1 / L3 = 1, 1.1, 1.2 ... 10.0 and at L2 / L3 = 1.0, 1.1 ... L1 / L3.For single tensor LUTs, the default step is 0.2, for two-tensor LUTs it is 0.02.
    samples:
    # type=int|default=0: The number of synthetic measurements to generate at each point in the LUT. The default is 2000.
    snr:
    # type=float|default=0.0: The signal to noise ratio of the unweighted (q = 0) measurements.This should match the SNR (in white matter) of the images that the LUTs are used with.
    bingham:
    # type=bool|default=False: Compute a LUT for the Bingham PDF. This is the default.
    acg:
    # type=bool|default=False: Compute a LUT for the ACG PDF.
    watson:
    # type=bool|default=False: Compute a LUT for the Watson PDF.
    inversion:
    # type=int|default=0: Index of the inversion to use. The default is 1 (linear single tensor inversion).
    trace:
    # type=float|default=0.0: Trace of the diffusion tensor(s) used in the test function in the LUT generation. The default is 2100E-12 m^2 s^-1.
    scheme_file:
    # type=file|default=<undefined>: The scheme file of the images to be processed using this LUT.
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
