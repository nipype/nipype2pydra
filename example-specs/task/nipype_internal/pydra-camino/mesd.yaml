# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.odf.MESD' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     MESD is a general program for maximum entropy spherical deconvolution.
#     It also runs PASMRI, which is a special case of spherical deconvolution.
#     The input data must be in voxel order.
# 
#     The format of the output in each voxel is:
#     { exitcode, ln(A^star(0)), lambda_0, lambda_1, ..., lambda_N }
# 
#     The  exitcode  contains  the  results of three tests. The first test thresholds
#     the maximum relative error between the numerical integrals computed at con-
#     vergence and those computed using a larger test point set; if the error is
#     greater than a threshold the exitcode is increased from zero to one as a
#     warning; if it is greater than a larger threshold the exitcode is increased to
#     two to suggest failure. The  second  test  thresholds  the predicted  error in
#     numerical integrals computed using the test point set; if the predicted error
#     is greater than a threshold the exitcode is increased by 10. The third test
#     thresholds the RMS error between the measurements and their predictions from
#     the fitted deconvolution; if the errors are greater than a threshold, the exit
#     code is increased by 100. An exitcode of 112 means that all three tests were
#     failed and the result is likely to be unreliable.  If all is well the exitcode
#     is zero. Results are often still reliable even if one or two of the tests are
#     failed.
# 
#     Other possible exitcodes are:
# 
#         - 5 - The optimization failed to converge
#         - -1 - Background
#         - -100 - Something wrong in the MRI data, e.g. negative or zero measurements,
#           so that the optimization could not run.
# 
#     The  standard  MESD  implementation  is computationally demanding, particularly
#     as the number of measurements increases (computation is approximately O(N^2),
#     where N is the number of measurements). There are two ways to obtain significant
#     computational speed-up:
# 
#     i) Turn off error checks and use a small point set for computing numerical
#     integrals in the algorithm by adding the flag -fastmesd. Sakaie CDMRI 2008
#     shows that using the smallest point set  (-basepointset  0)  with  no
#     error  checks  usually  has only a minor effect on the output of the algorithm,
#     but provides a major reduction in computation time. You can increase the point
#     set size using -basepointset with an argument higher than 0, which may produce
#     better results in some voxels, but will increase computation time, which
#     approximately doubles every time the point set index increases by 1.
# 
#     ii) Reduce the complexity of the maximum entropy encoding using -mepointset <X>.
#     By default <X> = N, the number of measurements, and is the number of parameters
#     in the max.  ent. representation of the  output  function, ie  the  number of
#     lambda parameters, as described in Jansons and Alexander Inverse Problems 2003.
#     However, we can represent the function using less components and <X> here
#     specifies the number of lambda parameters. To obtain speed-up, set <X>
#     < N; complexity become O(<X>^2) rather than O(N^2). Note that <X> must be chosen
#     so that the camino/PointSets directory contains a point set  with  that  number
#     of  elements.  When  -mepointset decreases, the  numerical  integration checks
#     make less and less of a difference and smaller point sets for numerical
#     integration (see -basepointset) become adequate. So when <X> is low -fastmesd is
#     worth using to get even more speed-up.
# 
#     The choice of <X> is a parameter of the technique. Too low and you lose angular
#     resoloution; too high and you see no computational benefit and may even suffer
#     from overfitting. Empirically, we  have  found  that  <X>=16 often  gives  good
#     results and good speed up, but it is worth trying a few values a comparing
#     performance. The reduced encoding is described in the following ISMRM abstract:
#     Sweet and Alexander "Reduced Encoding Persistent Angular Structure" 572 ISMRM 2010.
# 
#     Example
#     -------
#     Run MESD on every voxel of the data file SubjectA.Bfloat using the PASMRI kernel.
# 
#     >>> import nipype.interfaces.camino as cam
#     >>> mesd = cam.MESD()
#     >>> mesd.inputs.in_file = 'SubjectA.Bfloat'
#     >>> mesd.inputs.scheme_file = 'A.scheme'
#     >>> mesd.inputs.inverter = 'PAS'
#     >>> mesd.inputs.inverter_param = 1.4
#     >>> mesd.run()    # doctest: +SKIP
# 
#     
task_name: MESD
nipype_name: MESD
nipype_module: nipype.interfaces.camino.odf
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: voxel-order data filename
    scheme_file: generic/file
    # type=file|default=<undefined>: Specifies the scheme file for the diffusion MRI data
    bgmask: generic/file
    # type=file|default=<undefined>: background mask
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    mesd_data: generic/file
    # type=file: MESD data
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: voxel-order data filename
    inverter:
    # type=enum|default='SPIKE'|allowed['PAS','SPIKE']:  The inversion index specifies the type of inversion to perform on the data. The currently available choices are:    +----------------+---------------------------------------------+   | Inverter name  | Inverter parameters                         |   +================+=============================================+   | SPIKE          | bd (b-value x diffusivity along the fibre.) |   +----------------+---------------------------------------------+   | PAS            | r                                           |   +----------------+---------------------------------------------+  
    inverter_param:
    # type=float|default=0.0: Parameter associated with the inverter. Cf. inverter description formore information.
    fastmesd:
    # type=bool|default=False: Turns off numerical integration checks and fixes the integration point set size at that ofthe index specified by -basepointset..
    mepointset:
    # type=int|default=0: Use a set of directions other than those in the scheme file for the deconvolution kernel.The number refers to the number of directions on the unit sphere. For example, "-mepointset 54" uses the directions in "camino/PointSets/Elec054.txt".
    scheme_file:
    # type=file|default=<undefined>: Specifies the scheme file for the diffusion MRI data
    bgmask:
    # type=file|default=<undefined>: background mask
    inputdatatype:
    # type=enum|default='float'|allowed['char','double','float','int','long','short']: Specifies the data type of the input file: "char", "short", "int", "long","float" or "double". The input file must have BIG-ENDIAN ordering.By default, the input type is "float".
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
