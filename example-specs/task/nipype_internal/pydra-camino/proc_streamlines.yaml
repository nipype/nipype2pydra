# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.convert.ProcStreamlines' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Process streamline data
# 
#     This program does post-processing of streamline output from track. It can either output streamlines or connection probability maps.
#      * http://web4.cs.ucl.ac.uk/research/medic/camino/pmwiki/pmwiki.php?n=Man.procstreamlines
# 
#     Examples
#     --------
# 
#     >>> import nipype.interfaces.camino as cmon
#     >>> proc = cmon.ProcStreamlines()
#     >>> proc.inputs.in_file = 'tract_data.Bfloat'
#     >>> proc.run()          # doctest: +SKIP
#     
task_name: ProcStreamlines
nipype_name: ProcStreamlines
nipype_module: nipype.interfaces.camino.convert
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: data file
    seedfile: generic/file
    # type=file|default=<undefined>: Image Containing Seed Points
    targetfile: generic/file
    # type=file|default=<undefined>: Image containing target volumes.
    waypointfile: generic/file
    # type=file|default=<undefined>: Image containing waypoints. Waypoints are defined as regions of the image with the same intensity, where 0 is background and any value > 0 is a waypoint.
    exclusionfile: generic/file
    # type=file|default=<undefined>: Image containing exclusion ROIs. This should be an Analyze 7.5 header / image file.hdr and file.img.
    endpointfile: generic/file
    # type=file|default=<undefined>: Image containing endpoint ROIs. This should be an Analyze 7.5 header / image file.hdr and file.img.
    outputroot: generic/file
    # type=file|default=<undefined>: Prepended onto all output file names.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    proc: generic/file
    # type=file: Processed Streamlines
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputmodel:
    # type=enum|default='raw'|allowed['raw','voxels']: input model type (raw or voxels)
    in_file:
    # type=file|default=<undefined>: data file
    maxtractpoints:
    # type=int|default=0: maximum number of tract points
    mintractpoints:
    # type=int|default=0: minimum number of tract points
    maxtractlength:
    # type=int|default=0: maximum length of tracts
    mintractlength:
    # type=int|default=0: minimum length of tracts
    datadims:
    # type=list|default=[]: data dimensions in voxels
    voxeldims:
    # type=list|default=[]: voxel dimensions in mm
    seedpointmm:
    # type=list|default=[]: The coordinates of a single seed point for tractography in mm
    seedpointvox:
    # type=list|default=[]: The coordinates of a single seed point for tractography in voxels
    seedfile:
    # type=file|default=<undefined>: Image Containing Seed Points
    regionindex:
    # type=int|default=0: index of specific region to process
    iterations:
    # type=float|default=0.0: Number of streamlines generated for each seed. Not required when outputting streamlines, but needed to create PICo images. The default is 1 if the output is streamlines, and 5000 if the output is connection probability images.
    targetfile:
    # type=file|default=<undefined>: Image containing target volumes.
    allowmultitargets:
    # type=bool|default=False: Allows streamlines to connect to multiple target volumes.
    directional:
    # type=list|default=[]: Splits the streamlines at the seed point and computes separate connection probabilities for each segment. Streamline segments are grouped according to their dot product with the vector (X, Y, Z). The ideal vector will be tangential to the streamline trajectory at the seed, such that the streamline projects from the seed along (X, Y, Z) and -(X, Y, Z). However, it is only necessary for the streamline trajectory to not be orthogonal to (X, Y, Z).
    waypointfile:
    # type=file|default=<undefined>: Image containing waypoints. Waypoints are defined as regions of the image with the same intensity, where 0 is background and any value > 0 is a waypoint.
    truncateloops:
    # type=bool|default=False: This option allows streamlines to enter a waypoint exactly once. After the streamline leaves the waypoint, it is truncated upon a second entry to the waypoint.
    discardloops:
    # type=bool|default=False: This option allows streamlines to enter a waypoint exactly once. After the streamline leaves the waypoint, the entire streamline is discarded upon a second entry to the waypoint.
    exclusionfile:
    # type=file|default=<undefined>: Image containing exclusion ROIs. This should be an Analyze 7.5 header / image file.hdr and file.img.
    truncateinexclusion:
    # type=bool|default=False: Retain segments of a streamline before entry to an exclusion ROI.
    endpointfile:
    # type=file|default=<undefined>: Image containing endpoint ROIs. This should be an Analyze 7.5 header / image file.hdr and file.img.
    resamplestepsize:
    # type=float|default=0.0: Each point on a streamline is tested for entry into target, exclusion or waypoint volumes. If the length between points on a tract is not much smaller than the voxel length, then streamlines may pass through part of a voxel without being counted. To avoid this, the program resamples streamlines such that the step size is one tenth of the smallest voxel dimension in the image. This increases the size of raw or oogl streamline output and incurs some performance penalty. The resample resolution can be controlled with this option or disabled altogether by passing a negative step size or by passing the -noresample option.
    noresample:
    # type=bool|default=False: Disables resampling of input streamlines. Resampling is automatically disabled if the input model is voxels.
    outputtracts:
    # type=bool|default=False: Output streamlines in raw binary format.
    outputroot:
    # type=file|default=<undefined>: Prepended onto all output file names.
    gzip:
    # type=bool|default=False: save the output image in gzip format
    outputcp:
    # type=bool|default=False: output the connection probability map (Analyze image, float)
    outputsc:
    # type=bool|default=False: output the connection probability map (raw streamlines, int)
    outputacm:
    # type=bool|default=False: output all tracts in a single connection probability map (Analyze image)
    outputcbs:
    # type=bool|default=False: outputs connectivity-based segmentation maps; requires target outputfile
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
