# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.dti.DTMetric' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Computes tensor metric statistics based on the eigenvalues l1 >= l2 >= l3
#     typically obtained from ComputeEigensystem.
# 
#     The full list of statistics is:
# 
#      - <cl> = (l1 - l2) / l1 , a measure of linearity
#      - <cp> = (l2 - l3) / l1 , a measure of planarity
#      - <cs> = l3 / l1 , a measure of isotropy
#        with: cl + cp + cs = 1
#      - <l1> = first eigenvalue
#      - <l2> = second eigenvalue
#      - <l3> = third eigenvalue
#      - <tr> = l1 + l2 + l3
#      - <md> = tr / 3
#      - <rd> = (l2 + l3) / 2
#      - <fa> = fractional anisotropy. (Basser et al, J Magn Reson B 1996)
#      - <ra> = relative anisotropy (Basser et al, J Magn Reson B 1996)
#      - <2dfa> = 2D FA of the two minor eigenvalues l2 and l3
#        i.e. sqrt( 2 * [(l2 - <l>)^2 + (l3 - <l>)^2] / (l2^2 + l3^2) )
#        with: <l> = (l2 + l3) / 2
# 
# 
#     Example
#     -------
#     Compute the CP planar metric as float data type.
# 
#     >>> import nipype.interfaces.camino as cam
#     >>> dtmetric = cam.DTMetric()
#     >>> dtmetric.inputs.eigen_data = 'dteig.Bdouble'
#     >>> dtmetric.inputs.metric = 'cp'
#     >>> dtmetric.inputs.outputdatatype = 'float'
#     >>> dtmetric.run()          # doctest: +SKIP
# 
#     
task_name: DTMetric
nipype_name: DTMetric
nipype_module: nipype.interfaces.camino.dti
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    eigen_data: generic/file
    # type=file|default=<undefined>: voxel-order data filename
    data_header: generic/file
    # type=file|default=<undefined>: A Nifti .nii or .nii.gz file containing the header information. Usually this will be the header of the raw data file from which the diffusion tensors were reconstructed.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    metric_stats: generic/file
    # type=file: Diffusion Tensor statistics of the chosen metric
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    outputfile: outputfile
    # type=file|default=<undefined>: Output name. Output will be a .nii.gz file if data_header is provided andin voxel order with outputdatatype datatype (default: double) otherwise.
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    eigen_data:
    # type=file|default=<undefined>: voxel-order data filename
    metric:
    # type=enum|default='fa'|allowed['2dfa','cl','cp','cs','fa','l1','l2','l3','md','ra','rd','tr']: Specifies the metric to compute.
    inputdatatype:
    # type=enum|default='double'|allowed['char','double','float','int','long','short']: Specifies the data type of the input data.
    outputdatatype:
    # type=enum|default='double'|allowed['char','double','float','int','long','short']: Specifies the data type of the output data.
    data_header:
    # type=file|default=<undefined>: A Nifti .nii or .nii.gz file containing the header information. Usually this will be the header of the raw data file from which the diffusion tensors were reconstructed.
    outputfile:
    # type=file|default=<undefined>: Output name. Output will be a .nii.gz file if data_header is provided andin voxel order with outputdatatype datatype (default: double) otherwise.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
