# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.dti.DTIFit' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Reads diffusion MRI data, acquired using the acquisition scheme detailed in the scheme file,
#     from the data file.
# 
#     Use non-linear fitting instead of the default linear regression to the log measurements.
#     The data file stores the diffusion MRI data in voxel order with the measurements stored
#     in big-endian format and ordered as in the scheme file.
#     The default input data type is four-byte float.
#     The default output data type is eight-byte double.
#     See modelfit and camino for the format of the data file and scheme file.
#     The program fits the diffusion tensor to each voxel and outputs the results,
#     in voxel order and as big-endian eight-byte doubles, to the standard output.
#     The program outputs eight values in each voxel:
#     [exit code, ln(S(0)), D_xx, D_xy, D_xz, D_yy, D_yz, D_zz].
#     An exit code of zero indicates no problems.
#     For a list of other exit codes, see modelfit(1).
#     The entry S(0) is an estimate of the signal at q=0.
# 
#     Example
#     -------
#     >>> import nipype.interfaces.camino as cmon
#     >>> fit = cmon.DTIFit()
#     >>> fit.inputs.scheme_file = 'A.scheme'
#     >>> fit.inputs.in_file = 'tensor_fitted_data.Bdouble'
#     >>> fit.run()          # doctest: +SKIP
# 
#     
task_name: DTIFit
nipype_name: DTIFit
nipype_module: nipype.interfaces.camino.dti
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: voxel-order data filename
    bgmask: generic/file
    # type=file|default=<undefined>: Provides the name of a file containing a background mask computed using, for example, FSL bet2 program. The mask file contains zero in background voxels and non-zero in foreground.
    scheme_file: generic/file
    # type=file|default=<undefined>: Camino scheme file (b values / vectors, see camino.fsl2scheme)
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    tensor_fitted: generic/file
    # type=file: path/name of 4D volume in voxel order
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: voxel-order data filename
    bgmask:
    # type=file|default=<undefined>: Provides the name of a file containing a background mask computed using, for example, FSL bet2 program. The mask file contains zero in background voxels and non-zero in foreground.
    scheme_file:
    # type=file|default=<undefined>: Camino scheme file (b values / vectors, see camino.fsl2scheme)
    non_linear:
    # type=bool|default=False: Use non-linear fitting instead of the default linear regression to the log measurements. 
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
