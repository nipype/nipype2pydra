# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.odf.LinRecon' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Runs a linear transformation in each voxel.
# 
#     Reads  a  linear  transformation from the matrix file assuming the
#     imaging scheme specified in the scheme file. Performs the linear
#     transformation on the data in every voxel and outputs the result to
#     the standard output. The output in every voxel is actually: ::
# 
#         [exit code, ln(S(0)), p1, ..., pR]
# 
#     where p1, ..., pR are the parameters of the reconstruction.
#     Possible exit codes are:
# 
#         - 0. No problems.
#         - 6. Bad data replaced by substitution of zero.
# 
#     The matrix must be R by N+M where N+M is the number of measurements
#     and R is the number of parameters of the reconstruction. The matrix
#     file contains binary double-precision floats. The matrix elements
#     are stored row by row.
# 
#     Example
#     -------
#     First run QBallMX and create a linear transform matrix using
#     Spherical Harmonics (sh).
# 
#     >>> import nipype.interfaces.camino as cam
#     >>> qballmx = cam.QBallMX()
#     >>> qballmx.inputs.scheme_file = 'A.scheme'
#     >>> qballmx.inputs.basistype = 'sh'
#     >>> qballmx.inputs.order = 4
#     >>> qballmx.run()    # doctest: +SKIP
# 
#     Then run it over each voxel using LinRecon
# 
#     >>> qballcoeffs = cam.LinRecon()
#     >>> qballcoeffs.inputs.in_file = 'SubjectA.Bfloat'
#     >>> qballcoeffs.inputs.scheme_file = 'A.scheme'
#     >>> qballcoeffs.inputs.qball_mat = 'A_qmat.Bdouble'
#     >>> qballcoeffs.inputs.normalize = True
#     >>> qballcoeffs.run() # doctest: +SKIP
# 
#     
task_name: LinRecon
nipype_name: LinRecon
nipype_module: nipype.interfaces.camino.odf
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: voxel-order data filename
    scheme_file: generic/file
    # type=file|default=<undefined>: Specifies the scheme file for the diffusion MRI data
    qball_mat: generic/file
    # type=file|default=<undefined>: Linear transformation matrix.
    bgmask: generic/file
    # type=file|default=<undefined>: background mask
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    recon_data: generic/file
    # type=file: Transformed data
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: voxel-order data filename
    scheme_file:
    # type=file|default=<undefined>: Specifies the scheme file for the diffusion MRI data
    qball_mat:
    # type=file|default=<undefined>: Linear transformation matrix.
    normalize:
    # type=bool|default=False: Normalize the measurements and discard the zero measurements before the linear transform.
    log:
    # type=bool|default=False: Transform the log measurements rather than the measurements themselves
    bgmask:
    # type=file|default=<undefined>: background mask
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
