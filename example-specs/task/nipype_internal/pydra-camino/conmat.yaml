# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.connectivity.Conmat' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Creates  a  connectivity  matrix  using a 3D label image (the target image)
#     and a set of streamlines. The connectivity matrix records how many stream-
#     lines connect each pair of targets, and optionally the mean tractwise
#     statistic (eg tract-averaged FA, or length).
# 
#     The output is a comma separated variable file or files. The first row of
#     the output matrix is label names. Label names may be defined by the user,
#     otherwise  they  are assigned based on label intensity.
# 
#     Starting  from the seed point, we move along the streamline until we find
#     a point in a labeled region. This is done in both directions from the seed
#     point. Streamlines are counted if they connect two target regions, one on
#     either side of the seed point. Only the labeled region closest to the seed
#     is counted, for example if the  input contains two streamlines: ::
# 
#          1: A-----B------SEED---C
#          2: A--------SEED-----------
# 
#     then the output would be ::
# 
#          A,B,C
#          0,0,0
#          0,0,1
#          0,1,0
# 
#     There  are  zero  connections  to A because in streamline 1, the connection
#     to B is closer to the seed than the connection to A, and in streamline 2
#     there is no region reached in the other direction.
# 
#     The connected target regions can have the same label, as long as the seed
#     point is outside of the labeled region and both ends connect to the same
#     label (which may  be in different locations). Therefore this is allowed: ::
# 
#          A------SEED-------A
# 
#     Such fibers will add to the diagonal elements of the matrix. To remove
#     these entries, run procstreamlines with -endpointfile before running conmat.
# 
#     If the seed point is inside a labeled region, it counts as one end of the
#     connection.  So ::
# 
#          ----[SEED inside A]---------B
# 
#     counts as a connection between A and B, while ::
# 
#          C----[SEED inside A]---------B
# 
#     counts as a connection between A and C, because C is closer to the seed point.
# 
#     In all cases, distance to the seed point is defined along the streamline path.
# 
#     Examples
#     --------
#     To create a standard connectivity matrix based on streamline counts.
# 
#     >>> import nipype.interfaces.camino as cam
#     >>> conmat = cam.Conmat()
#     >>> conmat.inputs.in_file = 'tracts.Bdouble'
#     >>> conmat.inputs.target_file = 'atlas.nii.gz'
#     >>> conmat.run()# doctest: +SKIP
# 
#     To create a standard connectivity matrix and mean tractwise FA statistics.
# 
#     >>> import nipype.interfaces.camino as cam
#     >>> conmat = cam.Conmat()
#     >>> conmat.inputs.in_file = 'tracts.Bdouble'
#     >>> conmat.inputs.target_file = 'atlas.nii.gz'
#     >>> conmat.inputs.scalar_file = 'fa.nii.gz'
#     >>> conmat.tract_stat         = 'mean'
#     >>> conmat.run()# doctest: +SKIP
# 
#     
task_name: Conmat
nipype_name: Conmat
nipype_module: nipype.interfaces.camino.connectivity
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: Streamlines as generated by the Track interface
    target_file: generic/file
    # type=file|default=<undefined>: An image containing targets, as used in ProcStreamlines interface.
    scalar_file: generic/file
    # type=file|default=<undefined>: Optional scalar file for computing tract-based statistics. Must be in the same space as the target file.
    targetname_file: generic/file
    # type=file|default=<undefined>: Optional names of targets. This file should contain one entry per line, with the target intensity followed by the name, separated by white space. For example:   1  some_brain_region   2     some_other_region These names will be used in the output. The names themselves should not contain spaces or commas. The labels may be in any order but the output matrices will be ordered by label intensity.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    conmat_sc: generic/file
    # type=file: Connectivity matrix in CSV file.
    conmat_ts: generic/file
    # type=file: Tract statistics in CSV file.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_root: output_root
    # type=file|default=<undefined>: filename root prepended onto the names of the output files. The extension will be determined from the input.
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Streamlines as generated by the Track interface
    target_file:
    # type=file|default=<undefined>: An image containing targets, as used in ProcStreamlines interface.
    scalar_file:
    # type=file|default=<undefined>: Optional scalar file for computing tract-based statistics. Must be in the same space as the target file.
    targetname_file:
    # type=file|default=<undefined>: Optional names of targets. This file should contain one entry per line, with the target intensity followed by the name, separated by white space. For example:   1  some_brain_region   2     some_other_region These names will be used in the output. The names themselves should not contain spaces or commas. The labels may be in any order but the output matrices will be ordered by label intensity.
    tract_stat:
    # type=enum|default='mean'|allowed['max','mean','median','min','sum','var']: Tract statistic to use. See TractStats for other options.
    tract_prop:
    # type=enum|default='length'|allowed['endpointsep','length']: Tract property average to compute in the connectivity matrix. See TractStats for details.
    output_root:
    # type=file|default=<undefined>: filename root prepended onto the names of the output files. The extension will be determined from the input.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
