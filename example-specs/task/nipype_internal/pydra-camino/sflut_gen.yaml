# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.camino.calib.SFLUTGen' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Generates PICo lookup tables (LUT) for multi-fibre methods such as
#     PASMRI and Q-Ball.
# 
#     SFLUTGen creates the lookup tables for the generalized multi-fibre
#     implementation of the PICo tractography algorithm.  The outputs of
#     this utility are either surface or line coefficients up to a given
#     order. The calibration can be performed for different distributions,
#     such as the Bingham and Watson distributions.
# 
#     This utility uses calibration data generated from SFPICOCalibData
#     and peak information created by SFPeaks.
# 
#     The utility outputs two lut's, ``*_oneFibreSurfaceCoeffs.Bdouble`` and
#     ``*_twoFibreSurfaceCoeffs.Bdouble``. Each of these files contains big-endian doubles
#     as standard. The format of the output is::
# 
#           dimensions    (1 for Watson, 2 for Bingham)
#           order         (the order of the polynomial)
#           coefficient_1
#           coefficient_2
#           ...
#           coefficient_N
# 
#     In  the case of the Watson, there is a single set of coefficients,
#     which are ordered::
# 
#           constant, x, x^2, ..., x^order.
# 
#     In the case of the Bingham, there are two sets of coefficients (one
#     for each surface), ordered so that::
# 
#           for j = 1 to order
#             for k = 1 to order
#               coeff_i = x^j * y^k
#           where j+k < order
# 
#     Example
#     -------
#     To create a calibration dataset using the default settings
# 
#     >>> import nipype.interfaces.camino as cam
#     >>> lutgen = cam.SFLUTGen()
#     >>> lutgen.inputs.in_file = 'QSH_peaks.Bdouble'
#     >>> lutgen.inputs.info_file = 'PICO_calib.info'
#     >>> lutgen.run()# doctest: +SKIP
# 
#     
task_name: SFLUTGen
nipype_name: SFLUTGen
nipype_module: nipype.interfaces.camino.calib
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: Voxel-order data of the spherical functions peaks.
    info_file: generic/file
    # type=file|default=<undefined>: The Info file that corresponds to the calibration datafile used in the reconstruction.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    lut_one_fibre: generic/file
    # type=file: PICo lut for one-fibre model
    lut_two_fibres: generic/file
    # type=file: PICo lut for two-fibre model
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Voxel-order data of the spherical functions peaks.
    info_file:
    # type=file|default=<undefined>: The Info file that corresponds to the calibration datafile used in the reconstruction.
    outputstem:
    # type=str|default='LUT': Define the name of the generated luts.  The form of the filenames will be [outputstem]_oneFibreSurfaceCoeffs.Bdouble and [outputstem]_twoFibreSurfaceCoeffs.Bdouble
    pdf:
    # type=enum|default='bingham'|allowed['bingham','watson']: Sets the distribution to use for the calibration. The default is the Bingham distribution, which allows elliptical probability density contours. Currently supported options are:    * bingham -- The Bingham distribution, which allows elliptical probability     density contours.   * watson -- The Watson distribution. This distribution is rotationally symmetric.  
    binincsize:
    # type=int|default=0: Sets the size of the bins.  In the case of 2D histograms such as the Bingham, the bins are always square. Default is 1.
    minvectsperbin:
    # type=int|default=0: Specifies the minimum number of fibre-orientation estimates a bin must contain before it is used in the lut line/surface generation. Default is 50. If you get the error "no fibre-orientation estimates in histogram!", the calibration data set is too small to get enough samples in any of the  histogram  bins. You can decrease the minimum number  per  bin to get things running in quick tests, but the sta- tistics will not be reliable and for serious applications, you need  to increase the size of the calibration data set until the error goes.
    directmap:
    # type=bool|default=False: Use direct mapping between the eigenvalues and the distribution parameters instead of the log of the eigenvalues.
    order:
    # type=int|default=0: The order of the polynomial fitting the surface. Order 1 is linear. Order 2 (default) is quadratic.
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
