# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.elastix.registration.Registration' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Elastix nonlinear registration interface
# 
#     Example
#     -------
# 
#     >>> from nipype.interfaces.elastix import Registration
#     >>> reg = Registration()
#     >>> reg.inputs.fixed_image = 'fixed1.nii'
#     >>> reg.inputs.moving_image = 'moving1.nii'
#     >>> reg.inputs.parameters = ['elastix.txt']
#     >>> reg.cmdline
#     'elastix -f fixed1.nii -m moving1.nii -threads 1 -out ./ -p elastix.txt'
# 
# 
#     
task_name: Registration
nipype_name: Registration
nipype_module: nipype.interfaces.elastix.registration
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fixed_image: medimage/nifti1
    # type=file|default=<undefined>: fixed image
    moving_image: medimage/nifti1
    # type=file|default=<undefined>: moving image
    parameters: text/text-file+list-of
    # type=inputmultiobject|default=[]: parameter file, elastix handles 1 or more -p
    fixed_mask: generic/file
    # type=file|default=<undefined>: mask for fixed image
    moving_mask: generic/file
    # type=file|default=<undefined>: mask for moving image
    initial_transform: generic/file
    # type=file|default=<undefined>: parameter file for initial transform
    output_path: generic/directory
    # type=directory|default='./': output directory
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    warped_file: generic/file
    # type=file: input moving image warped to fixed image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    fixed_image:
    # type=file|default=<undefined>: fixed image
    moving_image:
    # type=file|default=<undefined>: moving image
    parameters:
    # type=inputmultiobject|default=[]: parameter file, elastix handles 1 or more -p
    fixed_mask:
    # type=file|default=<undefined>: mask for fixed image
    moving_mask:
    # type=file|default=<undefined>: mask for moving image
    initial_transform:
    # type=file|default=<undefined>: parameter file for initial transform
    output_path:
    # type=directory|default='./': output directory
    num_threads:
    # type=int|default=1: set the maximum number of threads of elastix
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    fixed_image:
    # type=file|default=<undefined>: fixed image
    moving_image:
    # type=file|default=<undefined>: moving image
    parameters:
    # type=inputmultiobject|default=[]: parameter file, elastix handles 1 or more -p
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: elastix -f fixed1.nii -m moving1.nii -threads 1 -out ./ -p elastix.txt
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    fixed_image:
    # type=file|default=<undefined>: fixed image
    moving_image:
    # type=file|default=<undefined>: moving image
    parameters:
    # type=inputmultiobject|default=[]: parameter file, elastix handles 1 or more -p
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
