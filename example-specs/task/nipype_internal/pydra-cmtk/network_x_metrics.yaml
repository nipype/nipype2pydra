# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.cmtk.nx.NetworkXMetrics' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Calculates and outputs NetworkX-based measures for an input network
# 
#     Example
#     -------
#     >>> import nipype.interfaces.cmtk as cmtk
#     >>> nxmetrics = cmtk.NetworkXMetrics()
#     >>> nxmetrics.inputs.in_file = 'subj1.pck'
#     >>> nxmetrics.run()         # doctest: +SKIP
# 
#     
task_name: NetworkXMetrics
nipype_name: NetworkXMetrics
nipype_module: nipype.interfaces.cmtk.nx
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: Input network
    out_k_core: generic/file
    # type=file|default='k_core': Computed k-core network stored as a NetworkX pickle.
    out_k_shell: generic/file
    # type=file|default='k_shell': Computed k-shell network stored as a NetworkX pickle.
    out_k_crust: generic/file
    # type=file|default='k_crust': Computed k-crust network stored as a NetworkX pickle.
    out_pickled_extra_measures: generic/file
    # type=file|default='extra_measures': Network measures for group 1 that return dictionaries stored as a Pickle.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    global_measures_matlab: generic/file
    # type=file: Output global metrics in MATLAB .mat format
    node_measures_matlab: generic/file
    # type=file: Output node metrics in MATLAB .mat format
    edge_measures_matlab: generic/file
    # type=file: Output edge metrics in MATLAB .mat format
    k_core: generic/file
    # type=file: Computed k-core network stored as a NetworkX pickle.
    k_shell: generic/file
    # type=file: Computed k-shell network stored as a NetworkX pickle.
    k_crust: generic/file
    # type=file: Computed k-crust network stored as a NetworkX pickle.
    pickled_extra_measures: generic/file
    # type=file: Network measures for the group that return dictionaries, stored as a Pickle.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_global_metrics_matlab: out_global_metrics_matlab
    # type=file|default=<undefined>: Output node metrics in MATLAB .mat format
    out_node_metrics_matlab: out_node_metrics_matlab
    # type=file|default=<undefined>: Output node metrics in MATLAB .mat format
    out_edge_metrics_matlab: out_edge_metrics_matlab
    # type=file|default=<undefined>: Output edge metrics in MATLAB .mat format
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input network
    out_k_core:
    # type=file|default='k_core': Computed k-core network stored as a NetworkX pickle.
    out_k_shell:
    # type=file|default='k_shell': Computed k-shell network stored as a NetworkX pickle.
    out_k_crust:
    # type=file|default='k_crust': Computed k-crust network stored as a NetworkX pickle.
    treat_as_weighted_graph:
    # type=bool|default=True: Some network metrics can be calculated while considering only a binarized version of the graph
    compute_clique_related_measures:
    # type=bool|default=False: Computing clique-related measures (e.g. node clique number) can be very time consuming
    out_global_metrics_matlab:
    # type=file|default=<undefined>: Output node metrics in MATLAB .mat format
    out_node_metrics_matlab:
    # type=file|default=<undefined>: Output node metrics in MATLAB .mat format
    out_edge_metrics_matlab:
    # type=file|default=<undefined>: Output edge metrics in MATLAB .mat format
    out_pickled_extra_measures:
    # type=file|default='extra_measures': Network measures for group 1 that return dictionaries stored as a Pickle.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
