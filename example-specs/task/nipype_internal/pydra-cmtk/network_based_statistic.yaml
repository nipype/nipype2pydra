# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.cmtk.nbs.NetworkBasedStatistic' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Calculates and outputs the average network given a set of input NetworkX gpickle files
# 
#     See Also
#     --------
#     For documentation of Network-based statistic parameters:
#     https://github.com/LTS5/connectomeviewer/blob/master/cviewer/libs/pyconto/groupstatistics/nbs/_nbs.py
# 
#     Example
#     -------
#     >>> import nipype.interfaces.cmtk as cmtk
#     >>> nbs = cmtk.NetworkBasedStatistic()
#     >>> nbs.inputs.in_group1 = ['subj1.pck', 'subj2.pck'] # doctest: +SKIP
#     >>> nbs.inputs.in_group2 = ['pat1.pck', 'pat2.pck'] # doctest: +SKIP
#     >>> nbs.run()         # doctest: +SKIP
# 
#     
task_name: NetworkBasedStatistic
nipype_name: NetworkBasedStatistic
nipype_module: nipype.interfaces.cmtk.nbs
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_group1: generic/file+list-of
    # type=inputmultiobject|default=[]: Networks for the first group of subjects
    in_group2: generic/file+list-of
    # type=inputmultiobject|default=[]: Networks for the second group of subjects
    node_position_network: generic/file
    # type=file|default=<undefined>: An optional network used to position the nodes for the output networks
    out_nbs_network: generic/file
    # type=file|default=<undefined>: Output network with edges identified by the NBS
    out_nbs_pval_network: generic/file
    # type=file|default=<undefined>: Output network with p-values to weight the edges identified by the NBS
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    nbs_network: generic/file
    # type=file: Output network with edges identified by the NBS
    nbs_pval_network: generic/file
    # type=file: Output network with p-values to weight the edges identified by the NBS
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_group1:
    # type=inputmultiobject|default=[]: Networks for the first group of subjects
    in_group2:
    # type=inputmultiobject|default=[]: Networks for the second group of subjects
    node_position_network:
    # type=file|default=<undefined>: An optional network used to position the nodes for the output networks
    number_of_permutations:
    # type=int|default=1000: Number of permutations to perform
    threshold:
    # type=float|default=3: T-statistic threshold
    t_tail:
    # type=enum|default='left'|allowed['both','left','right']: Can be one of "left", "right", or "both"
    edge_key:
    # type=str|default='number_of_fibers': Usually "number_of_fibers, "fiber_length_mean", "fiber_length_std" for matrices made with CMTKSometimes "weight" or "value" for functional networks.
    out_nbs_network:
    # type=file|default=<undefined>: Output network with edges identified by the NBS
    out_nbs_pval_network:
    # type=file|default=<undefined>: Output network with p-values to weight the edges identified by the NBS
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
