# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.cmtk.cmtk.CreateMatrix' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Performs connectivity mapping and outputs the result as a NetworkX graph and a Matlab matrix
# 
#     Example
#     -------
# 
#     >>> import nipype.interfaces.cmtk as cmtk
#     >>> conmap = cmtk.CreateMatrix()
#     >>> conmap.inputs.roi_file = 'fsLUT_aparc+aseg.nii'
#     >>> conmap.inputs.tract_file = 'fibers.trk'
#     >>> conmap.run()         # doctest: +SKIP
#     
task_name: CreateMatrix
nipype_name: CreateMatrix
nipype_module: nipype.interfaces.cmtk.cmtk
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    roi_file: generic/file
    # type=file|default=<undefined>: Freesurfer aparc+aseg file
    tract_file: generic/file
    # type=file|default=<undefined>: Trackvis tract file
    resolution_network_file: generic/file
    # type=file|default=<undefined>: Parcellation files from Connectome Mapping Toolkit
    out_matrix_mat_file: generic/file
    # type=file|default='cmatrix.mat': Matlab matrix describing the connectivity
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    matrix_file: generic/file
    # type=file: NetworkX graph describing the connectivity
    intersection_matrix_file: generic/file
    # type=file: NetworkX graph describing the connectivity
    matrix_mat_file: generic/file
    # type=file: Matlab matrix describing the connectivity
    intersection_matrix_mat_file: generic/file
    # type=file: Matlab matrix describing the mean fiber lengths between each node.
    mean_fiber_length_matrix_mat_file: generic/file
    # type=file: Matlab matrix describing the mean fiber lengths between each node.
    median_fiber_length_matrix_mat_file: generic/file
    # type=file: Matlab matrix describing the median fiber lengths between each node.
    fiber_length_std_matrix_mat_file: generic/file
    # type=file: Matlab matrix describing the deviation in fiber lengths connecting each node.
    endpoint_file: generic/file
    # type=file: Saved Numpy array with the endpoints of each fiber
    endpoint_file_mm: generic/file
    # type=file: Saved Numpy array with the endpoints of each fiber (in millimeters)
    fiber_length_file: generic/file
    # type=file: Saved Numpy array with the lengths of each fiber
    fiber_label_file: generic/file
    # type=file: Saved Numpy array with the labels for each fiber
    fiber_labels_noorphans: generic/file
    # type=file: Saved Numpy array with the labels for each non-orphan fiber
    filtered_tractography: generic/file
    # type=file: TrackVis file containing only those fibers originate in one and terminate in another region
    filtered_tractography_by_intersections: generic/file
    # type=file: TrackVis file containing all fibers which connect two regions
    stats_file: generic/file
    # type=file: Saved Matlab .mat file with the number of fibers saved at each stage
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_matrix_file: out_matrix_file
    # type=file|default=<undefined>: NetworkX graph describing the connectivity
    out_mean_fiber_length_matrix_mat_file: out_mean_fiber_length_matrix_mat_file
    # type=file|default=<undefined>: Matlab matrix describing the mean fiber lengths between each node.
    out_median_fiber_length_matrix_mat_file: out_median_fiber_length_matrix_mat_file
    # type=file|default=<undefined>: Matlab matrix describing the mean fiber lengths between each node.
    out_fiber_length_std_matrix_mat_file: out_fiber_length_std_matrix_mat_file
    # type=file|default=<undefined>: Matlab matrix describing the deviation in fiber lengths connecting each node.
    out_intersection_matrix_mat_file: out_intersection_matrix_mat_file
    # type=file|default=<undefined>: Matlab connectivity matrix if all region/fiber intersections are counted.
    out_endpoint_array_name: out_endpoint_array_name
    # type=file|default=<undefined>: Name for the generated endpoint arrays
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    roi_file:
    # type=file|default=<undefined>: Freesurfer aparc+aseg file
    tract_file:
    # type=file|default=<undefined>: Trackvis tract file
    resolution_network_file:
    # type=file|default=<undefined>: Parcellation files from Connectome Mapping Toolkit
    count_region_intersections:
    # type=bool|default=False: Counts all of the fiber-region traversals in the connectivity matrix (requires significantly more computational time)
    out_matrix_file:
    # type=file|default=<undefined>: NetworkX graph describing the connectivity
    out_matrix_mat_file:
    # type=file|default='cmatrix.mat': Matlab matrix describing the connectivity
    out_mean_fiber_length_matrix_mat_file:
    # type=file|default=<undefined>: Matlab matrix describing the mean fiber lengths between each node.
    out_median_fiber_length_matrix_mat_file:
    # type=file|default=<undefined>: Matlab matrix describing the mean fiber lengths between each node.
    out_fiber_length_std_matrix_mat_file:
    # type=file|default=<undefined>: Matlab matrix describing the deviation in fiber lengths connecting each node.
    out_intersection_matrix_mat_file:
    # type=file|default=<undefined>: Matlab connectivity matrix if all region/fiber intersections are counted.
    out_endpoint_array_name:
    # type=file|default=<undefined>: Name for the generated endpoint arrays
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
