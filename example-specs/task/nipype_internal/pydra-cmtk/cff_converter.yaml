# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.cmtk.convert.CFFConverter' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Creates a Connectome File Format (CFF) file from input networks, surfaces, volumes, tracts, etcetera....
# 
#     Example
#     -------
# 
#     >>> import nipype.interfaces.cmtk as cmtk
#     >>> cvt = cmtk.CFFConverter()
#     >>> cvt.inputs.title = 'subject 1'
#     >>> cvt.inputs.gifti_surfaces = ['lh.pial_converted.gii', 'rh.pial_converted.gii']
#     >>> cvt.inputs.tract_files = ['streamlines.trk']
#     >>> cvt.inputs.gpickled_networks = ['network0.gpickle']
#     >>> cvt.run()         # doctest: +SKIP
#     
task_name: CFFConverter
nipype_name: CFFConverter
nipype_module: nipype.interfaces.cmtk.convert
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    graphml_networks: generic/file+list-of
    # type=inputmultiobject|default=[]: list of graphML networks
    gpickled_networks: generic/file+list-of
    # type=inputmultiobject|default=[]: list of gpickled Networkx graphs
    gifti_surfaces: generic/file+list-of
    # type=inputmultiobject|default=[]: list of GIFTI surfaces
    gifti_labels: generic/file+list-of
    # type=inputmultiobject|default=[]: list of GIFTI labels
    nifti_volumes: generic/file+list-of
    # type=inputmultiobject|default=[]: list of NIFTI volumes
    tract_files: generic/file+list-of
    # type=inputmultiobject|default=[]: list of Trackvis fiber files
    timeseries_files: generic/file+list-of
    # type=inputmultiobject|default=[]: list of HDF5 timeseries files
    script_files: generic/file+list-of
    # type=inputmultiobject|default=[]: list of script files to include
    data_files: generic/file+list-of
    # type=inputmultiobject|default=[]: list of external data files (i.e. Numpy, HD5, XML) 
    out_file: generic/file
    # type=file|default='connectome.cff': Output connectome file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    connectome_file: generic/file
    # type=file: Output connectome file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    graphml_networks:
    # type=inputmultiobject|default=[]: list of graphML networks
    gpickled_networks:
    # type=inputmultiobject|default=[]: list of gpickled Networkx graphs
    gifti_surfaces:
    # type=inputmultiobject|default=[]: list of GIFTI surfaces
    gifti_labels:
    # type=inputmultiobject|default=[]: list of GIFTI labels
    nifti_volumes:
    # type=inputmultiobject|default=[]: list of NIFTI volumes
    tract_files:
    # type=inputmultiobject|default=[]: list of Trackvis fiber files
    timeseries_files:
    # type=inputmultiobject|default=[]: list of HDF5 timeseries files
    script_files:
    # type=inputmultiobject|default=[]: list of script files to include
    data_files:
    # type=inputmultiobject|default=[]: list of external data files (i.e. Numpy, HD5, XML) 
    title:
    # type=str|default='': Connectome Title
    creator:
    # type=str|default='': Creator
    email:
    # type=str|default='': Email address
    publisher:
    # type=str|default='': Publisher
    license:
    # type=str|default='': License
    rights:
    # type=str|default='': Rights
    references:
    # type=str|default='': References
    relation:
    # type=str|default='': Relation
    species:
    # type=str|default='Homo sapiens': Species
    description:
    # type=str|default='Created with the Nipype CFF converter': Description
    out_file:
    # type=file|default='connectome.cff': Output connectome file
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
