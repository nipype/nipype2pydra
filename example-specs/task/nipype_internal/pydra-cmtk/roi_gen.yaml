# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.cmtk.cmtk.ROIGen' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Generates a ROI file for connectivity mapping and a dictionary file containing relevant node information
# 
#     Example
#     -------
# 
#     >>> import nipype.interfaces.cmtk as cmtk
#     >>> rg = cmtk.ROIGen()
#     >>> rg.inputs.aparc_aseg_file = 'aparc+aseg.nii'
#     >>> rg.inputs.use_freesurfer_LUT = True
#     >>> rg.inputs.freesurfer_dir = '/usr/local/freesurfer'
#     >>> rg.run() # doctest: +SKIP
# 
#     The label dictionary is written to disk using Pickle. Resulting data can be loaded using:
# 
#     >>> file = open("FreeSurferColorLUT_adapted_aparc+aseg_out.pck", "r")
#     >>> file = open("fsLUT_aparc+aseg.pck", "r")
#     >>> labelDict = pickle.load(file) # doctest: +SKIP
#     >>> labelDict             # doctest: +SKIP
#     
task_name: ROIGen
nipype_name: ROIGen
nipype_module: nipype.interfaces.cmtk.cmtk
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    aparc_aseg_file: generic/file
    # type=file|default=<undefined>: Freesurfer aparc+aseg file
    LUT_file: generic/file
    # type=file|default=<undefined>: Custom lookup table (cf. FreeSurferColorLUT.txt)
    freesurfer_dir: generic/directory
    # type=directory|default=<undefined>: Freesurfer main directory
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    roi_file: generic/file
    # type=file: Region of Interest file for connectivity mapping
    dict_file: generic/file
    # type=file: Label dictionary saved in Pickle format
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_roi_file: out_roi_file
    # type=file|default=<undefined>: Region of Interest file for connectivity mapping
    out_dict_file: out_dict_file
    # type=file|default=<undefined>: Label dictionary saved in Pickle format
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    aparc_aseg_file:
    # type=file|default=<undefined>: Freesurfer aparc+aseg file
    LUT_file:
    # type=file|default=<undefined>: Custom lookup table (cf. FreeSurferColorLUT.txt)
    use_freesurfer_LUT:
    # type=bool|default=False: Boolean value; Set to True to use default Freesurfer LUT, False for custom LUT
    freesurfer_dir:
    # type=directory|default=<undefined>: Freesurfer main directory
    out_roi_file:
    # type=file|default=<undefined>: Region of Interest file for connectivity mapping
    out_dict_file:
    # type=file|default=<undefined>: Label dictionary saved in Pickle format
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
