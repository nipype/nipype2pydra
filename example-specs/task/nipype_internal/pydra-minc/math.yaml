# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.Math' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Various mathematical operations supplied by mincmath.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import Math
#     >>> from nipype.interfaces.minc.testdata import minc2Dfile
# 
#     Scale: volume*3.0 + 2:
# 
#     >>> scale = Math(input_files=[minc2Dfile], scale=(3.0, 2))
#     >>> scale.run() # doctest: +SKIP
# 
#     Test if >= 1.5:
# 
#     >>> gt = Math(input_files=[minc2Dfile], test_gt=1.5)
#     >>> gt.run() # doctest: +SKIP
#     
task_name: Math
nipype_name: Math
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_files: generic/file+list-of
    # type=inputmultiobject|default=[]: input file(s) for calculation
    filelist: generic/file
    # type=file|default=<undefined>: Specify the name of a file containing input file names.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_file: output_file
    # type=file: output file
    # type=file|default=<undefined>: output file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_files:
    # type=inputmultiobject|default=[]: input file(s) for calculation
    output_file:
    # type=file: output file
    # type=file|default=<undefined>: output file
    filelist:
    # type=file|default=<undefined>: Specify the name of a file containing input file names.
    clobber:
    # type=bool|default=True: Overwrite existing file.
    two:
    # type=bool|default=False: Create a MINC 2 output file.
    copy_header:
    # type=bool|default=False: Copy all of the header from the first file (default for one file).
    no_copy_header:
    # type=bool|default=False: Do not copy all of the header from the first file (default for many files)).
    format_filetype:
    # type=bool|default=False: Use data type of first file (default).
    format_byte:
    # type=bool|default=False: Write out byte data.
    format_short:
    # type=bool|default=False: Write out short integer data.
    format_int:
    # type=bool|default=False: Write out 32-bit integer data.
    format_long:
    # type=bool|default=False: Superseded by -int.
    format_float:
    # type=bool|default=False: Write out single-precision floating-point data.
    format_double:
    # type=bool|default=False: Write out double-precision floating-point data.
    format_signed:
    # type=bool|default=False: Write signed integer data.
    format_unsigned:
    # type=bool|default=False: Write unsigned integer data (default).
    voxel_range:
    # type=tuple|default=(0, 0): Valid range for output data.
    max_buffer_size_in_kb:
    # type=range|default=4096: Specify the maximum size of the internal buffers (in kbytes).
    check_dimensions:
    # type=bool|default=False: Check that dimension info matches across files (default).
    no_check_dimensions:
    # type=bool|default=False: Do not check dimension info.
    dimension:
    # type=str|default='': Specify a dimension along which we wish to perform a calculation.
    ignore_nan:
    # type=bool|default=False: Ignore invalid data (NaN) for accumulations.
    propagate_nan:
    # type=bool|default=False: Invalid data in any file at a voxel produces a NaN (default).
    output_nan:
    # type=bool|default=False: Output NaN when an illegal operation is done (default).
    output_zero:
    # type=bool|default=False: Output zero when an illegal operation is done.
    output_illegal:
    # type=bool|default=False: Value to write out when an illegal operationis done. Default value: 1.79769e+308
    test_gt:
    # type=traitcompound|default=None: Test for vol1 > vol2 or vol1 > constant.
    test_lt:
    # type=traitcompound|default=None: Test for vol1 < vol2 or vol1 < constant.
    test_eq:
    # type=traitcompound|default=None: Test for integer vol1 == vol2 or vol1 == constant.
    test_ne:
    # type=traitcompound|default=None: Test for integer vol1 != vol2 or vol1 != const.
    test_ge:
    # type=traitcompound|default=None: Test for vol1 >= vol2 or vol1 >= const.
    test_le:
    # type=traitcompound|default=None: Test for vol1 <= vol2 or vol1 <= const.
    calc_add:
    # type=traitcompound|default=None: Add N volumes or volume + constant.
    calc_sub:
    # type=traitcompound|default=None: Subtract 2 volumes or volume - constant.
    calc_mul:
    # type=traitcompound|default=None: Multiply N volumes or volume * constant.
    calc_div:
    # type=traitcompound|default=None: Divide 2 volumes or volume / constant.
    invert:
    # type=float|default=None: Calculate 1/c.
    calc_not:
    # type=bool|default=False: Calculate !vol1.
    sqrt:
    # type=bool|default=False: Take square root of a volume.
    square:
    # type=bool|default=False: Take square of a volume.
    abs:
    # type=bool|default=False: Take absolute value of a volume.
    exp:
    # type=tuple|default=(0.0, 0.0): Calculate c2*exp(c1*x). Both constants must be specified.
    log:
    # type=tuple|default=(0.0, 0.0): Calculate log(x/c2)/c1. The constants c1 and c2 default to 1.
    scale:
    # type=tuple|default=(0.0, 0.0): Scale a volume: volume * c1 + c2.
    clamp:
    # type=tuple|default=(0.0, 0.0): Clamp a volume to lie between two values.
    segment:
    # type=tuple|default=(0.0, 0.0): Segment a volume using range of -const2: within range = 1, outside range = 0.
    nsegment:
    # type=tuple|default=(0.0, 0.0): Opposite of -segment: within range = 0, outside range = 1.
    isnan:
    # type=bool|default=False: Test for NaN values in vol1.
    nisnan:
    # type=bool|default=False: Negation of -isnan.
    percentdiff:
    # type=float|default=0.0: Percent difference between 2 volumes, thresholded (const def=0.0).
    count_valid:
    # type=bool|default=False: Count the number of valid values in N volumes.
    maximum:
    # type=bool|default=False: Find maximum of N volumes.
    minimum:
    # type=bool|default=False: Find minimum of N volumes.
    calc_and:
    # type=bool|default=False: Calculate vol1 && vol2 (&& ...).
    calc_or:
    # type=bool|default=False: Calculate vol1 || vol2 (|| ...).
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
