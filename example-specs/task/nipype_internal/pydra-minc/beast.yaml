# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.Beast' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Extract brain image using BEaST (Brain Extraction using
#     non-local Segmentation Technique).
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import Beast
#     >>> from nipype.interfaces.minc.testdata import nonempty_minc_data
# 
#     >>> file0 = nonempty_minc_data(0)
#     >>> beast = Beast(input_file=file0)
#     >>> beast .run() # doctest: +SKIP
#     
task_name: Beast
nipype_name: Beast
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    configuration_file: generic/file
    # type=file|default=<undefined>: Specify configuration file.
    input_file: generic/file
    # type=file|default=<undefined>: input file
    output_file: generic/file
    # type=file: output mask file
    # type=file|default=<undefined>: output file
    library_dir: generic/directory
    # type=directory|default=<undefined>: library directory
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output mask file
    # type=file|default=<undefined>: output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    probability_map:
    # type=bool|default=False: Output the probability map instead of crisp mask.
    flip_images:
    # type=bool|default=False: Flip images around the mid-sagittal plane to increase patch count.
    load_moments:
    # type=bool|default=False: Do not calculate moments instead use precalculatedlibrary moments. (for optimization purposes)
    fill_holes:
    # type=bool|default=False: Fill holes in the binary output.
    median_filter:
    # type=bool|default=False: Apply a median filter on the probability map.
    nlm_filter:
    # type=bool|default=False: Apply an NLM filter on the probability map (experimental).
    clobber:
    # type=bool|default=True: Overwrite existing file.
    configuration_file:
    # type=file|default=<undefined>: Specify configuration file.
    voxel_size:
    # type=int|default=4: Specify voxel size for calculations (4, 2, or 1).Default value: 4. Assumes no multiscale. Use configurationfile for multiscale.
    abspath:
    # type=bool|default=True: File paths in the library are absolute (default is relative to library root).
    patch_size:
    # type=int|default=1: Specify patch size for single scale approach. Default value: 1.
    search_area:
    # type=int|default=2: Specify size of search area for single scale approach. Default value: 2.
    confidence_level_alpha:
    # type=float|default=0.5: Specify confidence level Alpha. Default value: 0.5
    smoothness_factor_beta:
    # type=float|default=0.5: Specify smoothness factor Beta. Default value: 0.25
    threshold_patch_selection:
    # type=float|default=0.95: Specify threshold for patch selection. Default value: 0.95
    number_selected_images:
    # type=int|default=20: Specify number of selected images. Default value: 20
    same_resolution:
    # type=bool|default=False: Output final mask with the same resolution as input file.
    library_dir:
    # type=directory|default=<undefined>: library directory
    input_file:
    # type=file|default=<undefined>: input file
    output_file:
    # type=file: output mask file
    # type=file|default=<undefined>: output file
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
