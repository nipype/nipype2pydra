# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.XfmAvg' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Average a number of xfm transforms using matrix logs and exponents.
#     The program xfmavg calls Octave for numerical work.
# 
#     This tool is part of the minc-widgets package:
# 
#     https://github.com/BIC-MNI/minc-widgets/tree/master/xfmavg
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import XfmAvg
#     >>> from nipype.interfaces.minc.testdata import nonempty_minc_data, nlp_config
#     >>> from nipype.testing import example_data
# 
#     >>> xfm1 = example_data('minc_initial.xfm')
#     >>> xfm2 = example_data('minc_initial.xfm')  # cheating for doctest
#     >>> xfmavg = XfmAvg(input_files=[xfm1, xfm2])
#     >>> xfmavg.run() # doctest: +SKIP
#     
task_name: XfmAvg
nipype_name: XfmAvg
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_files: generic/file+list-of
    # type=inputmultiobject|default=[]: input file(s)
    input_grid_files: generic/file+list-of
    # type=inputmultiobject|default=[]: input grid file(s)
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
    output_grid: generic/file
    # type=file: output grid file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_file: output_file
    # type=file: output file
    # type=file|default=<undefined>: output file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_files:
    # type=inputmultiobject|default=[]: input file(s)
    input_grid_files:
    # type=inputmultiobject|default=[]: input grid file(s)
    output_file:
    # type=file: output file
    # type=file|default=<undefined>: output file
    verbose:
    # type=bool|default=False: Print out log messages. Default: False.
    clobber:
    # type=bool|default=True: Overwrite existing file.
    avg_linear:
    # type=bool|default=False: average the linear part [default].
    avg_nonlinear:
    # type=bool|default=False: average the non-linear part [default].
    ignore_linear:
    # type=bool|default=False: opposite of -avg_linear.
    ignore_nonlinear:
    # type=bool|default=False: opposite of -avg_nonlinear.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
