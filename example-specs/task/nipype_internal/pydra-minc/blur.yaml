# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.Blur' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Convolve an input volume with a Gaussian blurring kernel of
#     user-defined width.  Optionally, the first partial derivatives
#     and the gradient magnitude volume can be calculated.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import Blur
#     >>> from nipype.interfaces.minc.testdata import minc3Dfile
# 
#     (1) Blur  an  input  volume with a 6mm fwhm isotropic Gaussian
#     blurring kernel:
# 
#     >>> blur = Blur(input_file=minc3Dfile, fwhm=6, output_file_base='/tmp/out_6')
#     >>> blur.run() # doctest: +SKIP
# 
#     mincblur will create /tmp/out_6_blur.mnc.
# 
#     (2) Calculate the blurred and gradient magnitude data:
# 
#     >>> blur = Blur(input_file=minc3Dfile, fwhm=6, gradient=True, output_file_base='/tmp/out_6')
#     >>> blur.run() # doctest: +SKIP
# 
#     will create /tmp/out_6_blur.mnc and /tmp/out_6_dxyz.mnc.
# 
#     (3) Calculate the blurred data, the partial derivative volumes
#     and  the gradient magnitude for the same data:
# 
#     >>> blur = Blur(input_file=minc3Dfile, fwhm=6, partial=True, output_file_base='/tmp/out_6')
#     >>> blur.run() # doctest: +SKIP
# 
#     will create /tmp/out_6_blur.mnc, /tmp/out_6_dx.mnc,
#     /tmp/out_6_dy.mnc, /tmp/out_6_dz.mnc and /tmp/out_6_dxyz.mnc.
#     
task_name: Blur
nipype_name: Blur
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_file: generic/file
    # type=file|default=<undefined>: input file
    output_file_base: generic/file
    # type=file|default=<undefined>: output file base
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: Blurred output file.
    gradient_dxyz: generic/file
    # type=file: Gradient dxyz.
    partial_dx: generic/file
    # type=file: Partial gradient dx.
    partial_dy: generic/file
    # type=file: Partial gradient dy.
    partial_dz: generic/file
    # type=file: Partial gradient dz.
    partial_dxyz: generic/file
    # type=file: Partial gradient dxyz.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_file:
    # type=file|default=<undefined>: input file
    output_file_base:
    # type=file|default=<undefined>: output file base
    clobber:
    # type=bool|default=True: Overwrite existing file.
    gaussian:
    # type=bool|default=False: Use a gaussian smoothing kernel (default).
    rect:
    # type=bool|default=False: Use a rect (box) smoothing kernel.
    gradient:
    # type=bool|default=False: Create the gradient magnitude volume as well.
    partial:
    # type=bool|default=False: Create the partial derivative and gradient magnitude volumes as well.
    no_apodize:
    # type=bool|default=False: Do not apodize the data before blurring.
    fwhm:
    # type=float|default=0: Full-width-half-maximum of gaussian kernel. Default value: 0.
    standard_dev:
    # type=float|default=0: Standard deviation of gaussian kernel. Default value: 0.
    fwhm3d:
    # type=tuple|default=(0.0, 0.0, 0.0): Full-width-half-maximum of gaussian kernel.Default value: -1.79769e+308 -1.79769e+308 -1.79769e+308.
    dimensions:
    # type=enum|default=3|allowed[1,2,3]: Number of dimensions to blur (either 1,2 or 3). Default value: 3.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
