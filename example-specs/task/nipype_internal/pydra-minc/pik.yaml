# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.Pik' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Generate images from minc files.
# 
#     Mincpik uses Imagemagick to generate images
#     from Minc files.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import Pik
#     >>> from nipype.interfaces.minc.testdata import nonempty_minc_data
# 
#     >>> file0 = nonempty_minc_data(0)
#     >>> pik = Pik(input_file=file0, title='foo')
#     >>> pik .run() # doctest: +SKIP
# 
#     
task_name: Pik
nipype_name: Pik
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_file: generic/file
    # type=file|default=<undefined>: input file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output image
    # type=file|default=<undefined>: output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_file: output_file
    # type=file: output image
    # type=file|default=<undefined>: output file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_file:
    # type=file|default=<undefined>: input file
    jpg:
    # type=bool|default=False: Output a jpg file.
    png:
    # type=bool|default=False: Output a png file (default).
    output_file:
    # type=file: output image
    # type=file|default=<undefined>: output file
    clobber:
    # type=bool|default=True: Overwrite existing file.
    scale:
    # type=int|default=2: Scaling factor for resulting image. By default images areoutput at twice their original resolution.
    width:
    # type=int|default=0: Autoscale the resulting image to have a fixed image width (in pixels).
    depth:
    # type=enum|default=8|allowed[16,8]: Bitdepth for resulting image 8 or 16 (MSB machines only!)
    title:
    # type=traitcompound|default=None: 
    title_size:
    # type=int|default=0: Font point size for the title.
    annotated_bar:
    # type=bool|default=False: create an annotated bar to match the image (use height of the output image)
    minc_range:
    # type=tuple|default=(0.0, 0.0): Valid range of values for MINC file.
    image_range:
    # type=tuple|default=(0.0, 0.0): Range of image values to use for pixel intensity.
    auto_range:
    # type=bool|default=False: Automatically determine image range using a 5 and 95% PcT. (histogram)
    start:
    # type=int|default=0: Slice number to get. (note this is in voxel coordinates).
    slice_z:
    # type=bool|default=False: Get an axial/transverse (z) slice.
    slice_y:
    # type=bool|default=False: Get a coronal (y) slice.
    slice_x:
    # type=bool|default=False: Get a sagittal (x) slice.
    triplanar:
    # type=bool|default=False: Create a triplanar view of the input file.
    tile_size:
    # type=int|default=0: Pixel size for each image in a triplanar.
    sagittal_offset:
    # type=int|default=0: Offset the sagittal slice from the centre.
    sagittal_offset_perc:
    # type=range|default=0: Offset the sagittal slice by a percentage from the centre.
    vertical_triplanar_view:
    # type=bool|default=False: Create a vertical triplanar view (Default).
    horizontal_triplanar_view:
    # type=bool|default=False: Create a horizontal triplanar view.
    lookup:
    # type=str|default='': Arguments to pass to minclookup
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
