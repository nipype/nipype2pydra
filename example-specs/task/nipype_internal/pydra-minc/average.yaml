# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.Average' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Average a number of MINC files.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import Average
#     >>> from nipype.interfaces.minc.testdata import nonempty_minc_data
# 
#     >>> files = [nonempty_minc_data(i) for i in range(3)]
#     >>> average = Average(input_files=files, output_file='/tmp/tmp.mnc')
#     >>> average.run() # doctest: +SKIP
# 
#     
task_name: Average
nipype_name: Average
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_files: generic/file+list-of
    # type=inputmultiobject|default=[]: input file(s)
    filelist: generic/file
    # type=file|default=<undefined>: Specify the name of a file containing input file names.
    sdfile: generic/file
    # type=file|default=<undefined>: Specify an output sd file (default=none).
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_file: output_file
    # type=file: output file
    # type=file|default=<undefined>: output file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_files:
    # type=inputmultiobject|default=[]: input file(s)
    filelist:
    # type=file|default=<undefined>: Specify the name of a file containing input file names.
    output_file:
    # type=file: output file
    # type=file|default=<undefined>: output file
    two:
    # type=bool|default=False: Create a MINC 2 output file.
    clobber:
    # type=bool|default=True: Overwrite existing file.
    verbose:
    # type=bool|default=False: Print out log messages (default).
    quiet:
    # type=bool|default=False: Do not print out log messages.
    debug:
    # type=bool|default=False: Print out debugging messages.
    check_dimensions:
    # type=bool|default=False: Check that dimension info matches across files (default).
    no_check_dimensions:
    # type=bool|default=False: Do not check dimension info.
    format_filetype:
    # type=bool|default=False: Use data type of first file (default).
    format_byte:
    # type=bool|default=False: Write out byte data.
    format_short:
    # type=bool|default=False: Write out short integer data.
    format_int:
    # type=bool|default=False: Write out 32-bit integer data.
    format_long:
    # type=bool|default=False: Superseded by -int.
    format_float:
    # type=bool|default=False: Write out single-precision floating-point data.
    format_double:
    # type=bool|default=False: Write out double-precision floating-point data.
    format_signed:
    # type=bool|default=False: Write signed integer data.
    format_unsigned:
    # type=bool|default=False: Write unsigned integer data (default).
    max_buffer_size_in_kb:
    # type=range|default=4096: Specify the maximum size of the internal buffers (in kbytes).
    normalize:
    # type=bool|default=False: Normalize data sets for mean intensity.
    nonormalize:
    # type=bool|default=False: Do not normalize data sets (default).
    voxel_range:
    # type=tuple|default=(0, 0): Valid range for output data.
    sdfile:
    # type=file|default=<undefined>: Specify an output sd file (default=none).
    copy_header:
    # type=bool|default=False: Copy all of the header from the first file (default for one file).
    no_copy_header:
    # type=bool|default=False: Do not copy all of the header from the first file (default for many files)).
    avgdim:
    # type=str|default='': Specify a dimension along which we wish to average.
    binarize:
    # type=bool|default=False: Binarize the volume by looking for values in a given range.
    binrange:
    # type=tuple|default=(0.0, 0.0): Specify a range for binarization. Default value: 1.79769e+308 -1.79769e+308.
    binvalue:
    # type=float|default=0.0: Specify a target value (+/- 0.5) forbinarization. Default value: -1.79769e+308
    weights:
    # type=inputmultiobject|default=[]: Specify weights for averaging ("<w1>,<w2>,...").
    width_weighted:
    # type=bool|default=False: Weight by dimension widths when -avgdim is used.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
