# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.BigAverage' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Average 1000's of MINC files in linear time.
# 
#     mincbigaverage is designed to discretise the problem of averaging either
#     a large number of input files or averaging a smaller number of large
#     files. (>1GB each). There is also some code included to perform "robust"
#     averaging in which only the most common features are kept via down-weighting
#     outliers beyond a standard deviation.
# 
#     One advantage of mincbigaverage is that it avoids issues around the number
#     of possible open files in HDF/netCDF. In short if you have more than 100
#     files open at once while averaging things will slow down significantly.
# 
#     mincbigaverage does this via a iterative approach to averaging files and
#     is a direct drop in replacement for mincaverage. That said not all the
#     arguments of mincaverage are supported in mincbigaverage but they should
#     be.
# 
#     This tool is part of the minc-widgets package:
# 
#     https://github.com/BIC-MNI/minc-widgets/blob/master/mincbigaverage/mincbigaverage
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import BigAverage
#     >>> from nipype.interfaces.minc.testdata import nonempty_minc_data
# 
#     >>> files = [nonempty_minc_data(i) for i in range(3)]
#     >>> average = BigAverage(input_files=files, output_float=True, robust=True)
#     >>> average.run() # doctest: +SKIP
#     
task_name: BigAverage
nipype_name: BigAverage
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_files: generic/file+list-of
    # type=inputmultiobject|default=[]: input file(s)
    sd_file: generic/file
    # type=file: standard deviation image
    # type=file|default=<undefined>: Place standard deviation image in specified file.
    tmpdir: generic/directory
    # type=directory|default=<undefined>: temporary files directory
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
    sd_file: generic/file
    # type=file: standard deviation image
    # type=file|default=<undefined>: Place standard deviation image in specified file.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_file: output_file
    # type=file: output file
    # type=file|default=<undefined>: output file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_files:
    # type=inputmultiobject|default=[]: input file(s)
    output_file:
    # type=file: output file
    # type=file|default=<undefined>: output file
    verbose:
    # type=bool|default=False: Print out log messages. Default: False.
    clobber:
    # type=bool|default=True: Overwrite existing file.
    output_float:
    # type=bool|default=False: Output files with float precision.
    robust:
    # type=bool|default=False: Perform robust averaging, features that are outside 1 standarddeviation from the mean are downweighted. Works well for noisydata with artifacts. see the --tmpdir option if you have alarge number of input files.
    tmpdir:
    # type=directory|default=<undefined>: temporary files directory
    sd_file:
    # type=file: standard deviation image
    # type=file|default=<undefined>: Place standard deviation image in specified file.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
