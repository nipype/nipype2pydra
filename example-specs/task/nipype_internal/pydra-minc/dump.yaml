# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.Dump' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Dump a MINC file. Typically used in conjunction with mincgen (see Gen).
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import Dump
#     >>> from nipype.interfaces.minc.testdata import minc2Dfile
# 
#     >>> dump = Dump(input_file=minc2Dfile)
#     >>> dump.run() # doctest: +SKIP
# 
#     >>> dump = Dump(input_file=minc2Dfile, output_file='/tmp/out.txt', precision=(3, 4))
#     >>> dump.run() # doctest: +SKIP
# 
#     
task_name: Dump
nipype_name: Dump
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_file: generic/file
    # type=file|default=<undefined>: input file
    output_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file|default=<undefined>: 
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_file:
    # type=file|default=<undefined>: input file
    output_file:
    # type=file: output file
    # type=file|default=<undefined>: output file
    coordinate_data:
    # type=bool|default=False: Coordinate variable data and header information.
    header_data:
    # type=bool|default=False: Header information only, no data.
    annotations_brief:
    # type=enum|default='c'|allowed['c','f']: Brief annotations for C or Fortran indices in data.
    annotations_full:
    # type=enum|default='c'|allowed['c','f']: Full annotations for C or Fortran indices in data.
    variables:
    # type=inputmultiobject|default=[]: Output data for specified variables only.
    line_length:
    # type=range|default=0: Line length maximum in data section (default 80).
    netcdf_name:
    # type=str|default='': Name for netCDF (default derived from file name).
    precision:
    # type=traitcompound|default=None: Display floating-point values with less precision
    out_file:
    # type=file|default=<undefined>: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
