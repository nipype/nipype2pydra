# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.minc.minc.Norm' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Normalise a file between a max and minimum (possibly)
#        using two histogram pct's.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.minc import Norm
#     >>> from nipype.interfaces.minc.testdata import minc2Dfile
#     >>> n = Norm(input_file=minc2Dfile, output_file='/tmp/out.mnc') # Normalise the file.
#     >>> n.run() # doctest: +SKIP
#     
task_name: Norm
nipype_name: Norm
nipype_module: nipype.interfaces.minc.minc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_file: generic/file
    # type=file|default=<undefined>: input file to normalise
    output_threshold_mask: generic/file
    # type=file: threshold mask file
    # type=file|default=<undefined>: File in which to store the threshold mask.
    mask: generic/file
    # type=file|default=<undefined>: Calculate the image normalisation within a mask.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file
    output_threshold_mask: generic/file
    # type=file: threshold mask file
    # type=file|default=<undefined>: File in which to store the threshold mask.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_file: output_file
    # type=file: output file
    # type=file|default=<undefined>: output file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_file:
    # type=file|default=<undefined>: input file to normalise
    output_file:
    # type=file: output file
    # type=file|default=<undefined>: output file
    output_threshold_mask:
    # type=file: threshold mask file
    # type=file|default=<undefined>: File in which to store the threshold mask.
    clobber:
    # type=bool|default=True: Overwrite existing file.
    mask:
    # type=file|default=<undefined>: Calculate the image normalisation within a mask.
    clamp:
    # type=bool|default=True: Force the output range between limits [default].
    cutoff:
    # type=range|default=0.0: Cutoff value to use to calculate thresholds by a histogram PcT in %. [default: 0.01]
    lower:
    # type=float|default=0.0: Lower real value to use.
    upper:
    # type=float|default=0.0: Upper real value to use.
    out_floor:
    # type=float|default=0.0: Output files maximum [default: 0]
    out_ceil:
    # type=float|default=0.0: Output files minimum [default: 100]
    threshold:
    # type=bool|default=False: Threshold the image (set values below threshold_perc to -out_floor).
    threshold_perc:
    # type=range|default=0.0: Threshold percentage (0.1 == lower 10% of intensity range) [default: 0.1].
    threshold_bmt:
    # type=bool|default=False: Use the resulting image BiModalT as the threshold.
    threshold_blur:
    # type=float|default=0.0: Blur FWHM for intensity edges then thresholding [default: 2].
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
