# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.niftyseg.maths.BinaryMaths' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Binary mathematical operations.
# 
#     See Also
#     --------
#     `Source code <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg>`__ --
#     `Documentation <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg_documentation>`__
# 
#     Examples
#     --------
#     >>> import copy
#     >>> from nipype.interfaces import niftyseg
#     >>> binary = niftyseg.BinaryMaths()
#     >>> binary.inputs.in_file = 'im1.nii'
#     >>> binary.inputs.output_datatype = 'float'
# 
#     >>> # Test sub operation
#     >>> binary_sub = copy.deepcopy(binary)
#     >>> binary_sub.inputs.operation = 'sub'
#     >>> binary_sub.inputs.operand_file = 'im2.nii'
#     >>> binary_sub.cmdline
#     'seg_maths im1.nii -sub im2.nii -odt float im1_sub.nii'
#     >>> binary_sub.run()  # doctest: +SKIP
# 
#     >>> # Test mul operation
#     >>> binary_mul = copy.deepcopy(binary)
#     >>> binary_mul.inputs.operation = 'mul'
#     >>> binary_mul.inputs.operand_value = 2.0
#     >>> binary_mul.cmdline
#     'seg_maths im1.nii -mul 2.00000000 -odt float im1_mul.nii'
#     >>> binary_mul.run()  # doctest: +SKIP
# 
#     >>> # Test llsnorm operation
#     >>> binary_llsnorm = copy.deepcopy(binary)
#     >>> binary_llsnorm.inputs.operation = 'llsnorm'
#     >>> binary_llsnorm.inputs.operand_file = 'im2.nii'
#     >>> binary_llsnorm.cmdline
#     'seg_maths im1.nii -llsnorm im2.nii -odt float im1_llsnorm.nii'
#     >>> binary_llsnorm.run()  # doctest: +SKIP
# 
#     >>> # Test splitinter operation
#     >>> binary_splitinter = copy.deepcopy(binary)
#     >>> binary_splitinter.inputs.operation = 'splitinter'
#     >>> binary_splitinter.inputs.operand_str = 'z'
#     >>> binary_splitinter.cmdline
#     'seg_maths im1.nii -splitinter z -odt float im1_splitinter.nii'
#     >>> binary_splitinter.run()  # doctest: +SKIP
# 
#     
task_name: BinaryMaths
nipype_name: BinaryMaths
nipype_module: nipype.interfaces.niftyseg.maths
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    operand_file: medimage/nifti1
    # type=file|default=<undefined>: second image to perform operation with
    in_file: medimage/nifti1
    # type=file|default=<undefined>: image to operate on
    out_file: generic/file
    # type=file: image written after calculations
    # type=file|default=<undefined>: image to write
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: image written after calculations
    # type=file|default=<undefined>: image to write
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation:
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_file:
    # type=file|default=<undefined>: second image to perform operation with
    operand_value:
    # type=float|default=0.0: float value to perform operation with
    operand_str:
    # type=enum|default='x'|allowed['x','y','z']: string value to perform operation splitinter
    in_file:
    # type=file|default=<undefined>: image to operate on
    out_file:
    # type=file: image written after calculations
    # type=file|default=<undefined>: image to write
    output_datatype:
    # type=enum|default='float'|allowed['char','double','float','input','int','short']: datatype to use for output (default uses input type)
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: image to operate on
    output_datatype: '"float"'
    # type=enum|default='float'|allowed['char','double','float','input','int','short']: datatype to use for output (default uses input type)
    operation: '"sub"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_file:
    # type=file|default=<undefined>: second image to perform operation with
  imports: &id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: copy
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation: '"mul"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_value: '2.0'
    # type=float|default=0.0: float value to perform operation with
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation: '"llsnorm"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_file:
    # type=file|default=<undefined>: second image to perform operation with
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation: '"splitinter"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_str: '"z"'
    # type=enum|default='x'|allowed['x','y','z']: string value to perform operation splitinter
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: seg_maths im1.nii -sub im2.nii -odt float im1_sub.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: image to operate on
    output_datatype: '"float"'
    # type=enum|default='float'|allowed['char','double','float','input','int','short']: datatype to use for output (default uses input type)
    operation: '"sub"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_file:
    # type=file|default=<undefined>: second image to perform operation with
  imports: *id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: seg_maths im1.nii -mul 2.00000000 -odt float im1_mul.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    operation: '"mul"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_value: '2.0'
    # type=float|default=0.0: float value to perform operation with
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: seg_maths im1.nii -llsnorm im2.nii -odt float im1_llsnorm.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    operation: '"llsnorm"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_file:
    # type=file|default=<undefined>: second image to perform operation with
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: seg_maths im1.nii -splitinter z -odt float im1_splitinter.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    operation: '"splitinter"'
    # type=enum|default='mul'|allowed['add','div','edge','geo','hdr_copy','llsnorm','masknan','min','mul','pow','smo','smol','sobel3','sobel5','splitinter','sub','thr','uthr']: Operation to perform:      * mul - <float/file> - Multiply image <float> value or by other image.     * div - <float/file> - Divide image by <float> or by other image.     * add - <float/file> - Add image by <float> or by other image.     * sub - <float/file> - Subtract image by <float> or by other image.     * pow - <float> - Image to the power of <float>.     * thr - <float> - Threshold the image below <float>.     * uthr - <float> - Threshold image above <float>.     * smo - <float> - Gaussian smoothing by std <float> (in voxels and up to 4-D).     * edge - <float> - Calculate the edges of the image using a threshold <float>.     * sobel3 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 3x3x3 kernel and applying <float> gaussian smoothing.     * sobel5 - <float> - Calculate the edges of all timepoints using a Sobel filter       with a 5x5x5 kernel and applying <float> gaussian smoothing.     * min - <file> - Get the min per voxel between <current> and <file>.     * smol - <float> - Gaussian smoothing of a 3D label image.     * geo - <float/file> - Geodesic distance according to the speed function <float/file>     * llsnorm  <file_norm> - Linear LS normalisation between current and <file_norm>     * masknan <file_norm> - Assign everything outside the mask (mask==0) with NaNs     * hdr_copy <file> - Copy header from working image to <file> and save in <output>.     * splitinter <x/y/z> - Split interleaved slices in direction <x/y/z>       into separate time points  
    operand_str: '"z"'
    # type=enum|default='x'|allowed['x','y','z']: string value to perform operation splitinter
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
