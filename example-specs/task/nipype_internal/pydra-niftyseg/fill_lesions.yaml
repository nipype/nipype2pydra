# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.niftyseg.lesions.FillLesions' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Interface for executable seg_FillLesions from NiftySeg platform.
# 
#     Fill all the masked lesions with WM intensity average.
# 
#     `Source code <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg>`_ |
#     `Documentation <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg_documentation>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import niftyseg
#     >>> node = niftyseg.FillLesions()
#     >>> node.inputs.in_file = 'im1.nii'
#     >>> node.inputs.lesion_mask = 'im2.nii'
#     >>> node.cmdline
#     'seg_FillLesions -i im1.nii -l im2.nii -o im1_lesions_filled.nii.gz'
# 
#     
task_name: FillLesions
nipype_name: FillLesions
nipype_module: nipype.interfaces.niftyseg.lesions
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: Input image to fill lesions
    lesion_mask: medimage/nifti1
    # type=file|default=<undefined>: Lesion mask
    out_file: generic/file
    # type=file: Output segmentation
    # type=file|default=<undefined>: The output filename of the fill lesions results
    bin_mask: generic/file
    # type=file|default=<undefined>: Give a binary mask with the valid search areas.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Output segmentation
    # type=file|default=<undefined>: The output filename of the fill lesions results
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input image to fill lesions
    lesion_mask:
    # type=file|default=<undefined>: Lesion mask
    out_file:
    # type=file: Output segmentation
    # type=file|default=<undefined>: The output filename of the fill lesions results
    in_dilation:
    # type=int|default=0: Dilate the mask <int> times (in voxels, by default 0)
    match:
    # type=float|default=0.0: Percentage of minimum number of voxels between patches <float> (by default 0.5).
    search:
    # type=float|default=0.0: Minimum percentage of valid voxels in target patch <float> (by default 0).
    smooth:
    # type=float|default=0.0: Smoothing by <float> (in minimal 6-neighbourhood voxels (by default 0.1)).
    size:
    # type=int|default=0: Search regions size respect biggest patch size (by default 4).
    cwf:
    # type=float|default=0.0: Patch cardinality weighting factor (by default 2).
    bin_mask:
    # type=file|default=<undefined>: Give a binary mask with the valid search areas.
    other:
    # type=bool|default=False: Guizard et al. (FIN 2015) method, it doesn't include the multiresolution/hierarchical inpainting part, this part needs to be done with some external software such as reg_tools and reg_resample from NiftyReg. By default it uses the method presented in Prados et al. (Neuroimage 2016).
    use_2d:
    # type=bool|default=False: Uses 2D patches in the Z axis, by default 3D.
    debug:
    # type=bool|default=False: Save all intermidium files (by default OFF).
    out_datatype:
    # type=string|default='': Set output <datatype> (char, short, int, uchar, ushort, uint, float, double).
    verbose:
    # type=bool|default=False: Verbose (by default OFF).
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input image to fill lesions
    lesion_mask:
    # type=file|default=<undefined>: Lesion mask
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: seg_FillLesions -i im1.nii -l im2.nii -o im1_lesions_filled.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: Input image to fill lesions
    lesion_mask:
    # type=file|default=<undefined>: Lesion mask
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
