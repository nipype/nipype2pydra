# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.niftyseg.em.EM' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Interface for executable seg_EM from NiftySeg platform.
# 
#     seg_EM is a general purpose intensity based image segmentation tool. In
#     it's simplest form, it takes in one 2D or 3D image and segments it in n
#     classes.
# 
#     `Source code <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg>`_ |
#     `Documentation <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg_documentation>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import niftyseg
#     >>> node = niftyseg.EM()
#     >>> node.inputs.in_file = 'im1.nii'
#     >>> node.inputs.no_prior = 4
#     >>> node.cmdline
#     'seg_EM -in im1.nii -bc_order 3 -bc_thresh 0 -max_iter 100 -min_iter 0 -nopriors 4 -bc_out im1_bc_em.nii.gz -out im1_em.nii.gz -out_outlier im1_outlier_em.nii.gz'
# 
#     
task_name: EM
nipype_name: EM
nipype_module: nipype.interfaces.niftyseg.em
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: Input image to segment
    mask_file: generic/file
    # type=file|default=<undefined>: Filename of the ROI for label fusion
    prior_4D: generic/file
    # type=file|default=<undefined>: 4D file containing the priors
    out_file: generic/file
    # type=file: Output segmentation
    # type=file|default=<undefined>: Output segmentation
    out_bc_file: generic/file
    # type=file: Output bias corrected image
    # type=file|default=<undefined>: Output bias corrected image
    out_outlier_file: generic/file
    # type=file: Output outlierness image
    # type=file|default=<undefined>: Output outlierness image
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Output segmentation
    # type=file|default=<undefined>: Output segmentation
    out_bc_file: generic/file
    # type=file: Output bias corrected image
    # type=file|default=<undefined>: Output bias corrected image
    out_outlier_file: generic/file
    # type=file: Output outlierness image
    # type=file|default=<undefined>: Output outlierness image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input image to segment
    mask_file:
    # type=file|default=<undefined>: Filename of the ROI for label fusion
    no_prior:
    # type=int|default=0: Number of classes to use without prior
    prior_4D:
    # type=file|default=<undefined>: 4D file containing the priors
    priors:
    # type=inputmultiobject|default=[]: List of priors filepaths.
    max_iter:
    # type=int|default=100: Maximum number of iterations
    min_iter:
    # type=int|default=0: Minimum number of iterations
    bc_order_val:
    # type=int|default=3: Polynomial order for the bias field
    mrf_beta_val:
    # type=float|default=0.0: Weight of the Markov Random Field
    bc_thresh_val:
    # type=float|default=0: Bias field correction will run only if the ratio of improvement is below bc_thresh. (default=0 [OFF])
    reg_val:
    # type=float|default=0.0: Amount of regularization over the diagonal of the covariance matrix [above 1]
    outlier_val:
    # type=tuple|default=(0.0, 0.0): Outlier detection as in (Van Leemput TMI 2003). <fl1> is the Mahalanobis threshold [recommended between 3 and 7] <fl2> is a convergence ratio below which the outlier detection is going to be done [recommended 0.01]
    relax_priors:
    # type=tuple|default=(0.0, 0.0): Relax Priors [relaxation factor: 0<rf<1 (recommended=0.5), gaussian regularization: gstd>0 (recommended=2.0)] /only 3D/
    out_file:
    # type=file: Output segmentation
    # type=file|default=<undefined>: Output segmentation
    out_bc_file:
    # type=file: Output bias corrected image
    # type=file|default=<undefined>: Output bias corrected image
    out_outlier_file:
    # type=file: Output outlierness image
    # type=file|default=<undefined>: Output outlierness image
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input image to segment
    no_prior: '4'
    # type=int|default=0: Number of classes to use without prior
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: seg_EM -in im1.nii -bc_order 3 -bc_thresh 0 -max_iter 100 -min_iter 0 -nopriors 4 -bc_out im1_bc_em.nii.gz -out im1_em.nii.gz -out_outlier im1_outlier_em.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: Input image to segment
    no_prior: '4'
    # type=int|default=0: Number of classes to use without prior
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
