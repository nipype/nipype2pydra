# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.niftyseg.maths.BinaryMathsInteger' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Integer mathematical operations.
# 
#     See Also
#     --------
#     `Source code <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg>`__ --
#     `Documentation <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg_documentation>`__
# 
#     Examples
#     --------
#     >>> import copy
#     >>> from nipype.interfaces.niftyseg import BinaryMathsInteger
#     >>> binaryi = BinaryMathsInteger()
#     >>> binaryi.inputs.in_file = 'im1.nii'
#     >>> binaryi.inputs.output_datatype = 'float'
#     >>> # Test dil operation
#     >>> binaryi_dil = copy.deepcopy(binaryi)
#     >>> binaryi_dil.inputs.operation = 'dil'
#     >>> binaryi_dil.inputs.operand_value = 2
#     >>> binaryi_dil.cmdline
#     'seg_maths im1.nii -dil 2 -odt float im1_dil.nii'
#     >>> binaryi_dil.run()  # doctest: +SKIP
#     >>> # Test dil operation
#     >>> binaryi_ero = copy.deepcopy(binaryi)
#     >>> binaryi_ero.inputs.operation = 'ero'
#     >>> binaryi_ero.inputs.operand_value = 1
#     >>> binaryi_ero.cmdline
#     'seg_maths im1.nii -ero 1 -odt float im1_ero.nii'
#     >>> binaryi_ero.run()  # doctest: +SKIP
#     >>> # Test pad operation
#     >>> binaryi_pad = copy.deepcopy(binaryi)
#     >>> binaryi_pad.inputs.operation = 'pad'
#     >>> binaryi_pad.inputs.operand_value = 4
#     >>> binaryi_pad.cmdline
#     'seg_maths im1.nii -pad 4 -odt float im1_pad.nii'
#     >>> binaryi_pad.run()  # doctest: +SKIP
# 
#     
task_name: BinaryMathsInteger
nipype_name: BinaryMathsInteger
nipype_module: nipype.interfaces.niftyseg.maths
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: image to operate on
    out_file: generic/file
    # type=file: image written after calculations
    # type=file|default=<undefined>: image to write
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: image written after calculations
    # type=file|default=<undefined>: image to write
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation:
    # type=enum|default='dil'|allowed['crop','dil','equal','ero','pad','tp']: Operation to perform:      * equal - <int> - Get voxels equal to <int>     * dil - <int>  - Dilate the image <int> times (in voxels).     * ero - <int> - Erode the image <int> times (in voxels).     * tp - <int> - Extract time point <int>     * crop - <int> - Crop <int> voxels around each 3D volume.     * pad - <int> -  Pad <int> voxels with NaN value around each 3D volume.  
    operand_value:
    # type=int|default=0: int value to perform operation with
    in_file:
    # type=file|default=<undefined>: image to operate on
    out_file:
    # type=file: image written after calculations
    # type=file|default=<undefined>: image to write
    output_datatype:
    # type=enum|default='float'|allowed['char','double','float','input','int','short']: datatype to use for output (default uses input type)
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: image to operate on
    output_datatype: '"float"'
    # type=enum|default='float'|allowed['char','double','float','input','int','short']: datatype to use for output (default uses input type)
    operation: '"pad"'
    # type=enum|default='dil'|allowed['crop','dil','equal','ero','pad','tp']: Operation to perform:      * equal - <int> - Get voxels equal to <int>     * dil - <int>  - Dilate the image <int> times (in voxels).     * ero - <int> - Erode the image <int> times (in voxels).     * tp - <int> - Extract time point <int>     * crop - <int> - Crop <int> voxels around each 3D volume.     * pad - <int> -  Pad <int> voxels with NaN value around each 3D volume.  
    operand_value: '4'
    # type=int|default=0: int value to perform operation with
  imports: &id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: copy
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: seg_maths im1.nii -pad 4 -odt float im1_pad.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: image to operate on
    output_datatype: '"float"'
    # type=enum|default='float'|allowed['char','double','float','input','int','short']: datatype to use for output (default uses input type)
    operation: '"pad"'
    # type=enum|default='dil'|allowed['crop','dil','equal','ero','pad','tp']: Operation to perform:      * equal - <int> - Get voxels equal to <int>     * dil - <int>  - Dilate the image <int> times (in voxels).     * ero - <int> - Erode the image <int> times (in voxels).     * tp - <int> - Extract time point <int>     * crop - <int> - Crop <int> voxels around each 3D volume.     * pad - <int> -  Pad <int> voxels with NaN value around each 3D volume.  
    operand_value: '4'
    # type=int|default=0: int value to perform operation with
  imports: *id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
