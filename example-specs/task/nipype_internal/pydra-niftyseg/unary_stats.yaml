# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.niftyseg.stats.UnaryStats' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Unary statistical operations.
# 
#     See Also
#     --------
#     `Source code <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg>`__ --
#     `Documentation <http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftySeg_documentation>`__
# 
#     Examples
#     --------
#     >>> import copy
#     >>> from nipype.interfaces import niftyseg
#     >>> unary = niftyseg.UnaryStats()
#     >>> unary.inputs.in_file = 'im1.nii'
# 
#     >>> # Test v operation
#     >>> unary_v = copy.deepcopy(unary)
#     >>> unary_v.inputs.operation = 'v'
#     >>> unary_v.cmdline
#     'seg_stats im1.nii -v'
#     >>> unary_v.run()  # doctest: +SKIP
# 
#     >>> # Test vl operation
#     >>> unary_vl = copy.deepcopy(unary)
#     >>> unary_vl.inputs.operation = 'vl'
#     >>> unary_vl.cmdline
#     'seg_stats im1.nii -vl'
#     >>> unary_vl.run()  # doctest: +SKIP
# 
#     >>> # Test x operation
#     >>> unary_x = copy.deepcopy(unary)
#     >>> unary_x.inputs.operation = 'x'
#     >>> unary_x.cmdline
#     'seg_stats im1.nii -x'
#     >>> unary_x.run()  # doctest: +SKIP
# 
#     
task_name: UnaryStats
nipype_name: UnaryStats
nipype_module: nipype.interfaces.niftyseg.stats
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: image to operate on
    mask_file: generic/file
    # type=file|default=<undefined>: statistics within the masked area
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation:
    # type=enum|default='r'|allowed['B','R','X','a','c','e','n','ne','np','r','s','v','vl','vp','x','xdim','xvox']: Operation to perform:      * r - The range <min max> of all voxels.     * R - The robust range (assuming 2% outliers on both sides) of all voxels     * a - Average of all voxels     * s - Standard deviation of all voxels     * v - Volume of all voxels above 0 (<# voxels> * <volume per voxel>)     * vl - Volume of each integer label (<# voxels per label> x <volume per voxel>)     * vp - Volume of all probabilsitic voxels (sum(<in>) x <volume per voxel>)     * n - Count of all voxels above 0 (<# voxels>)     * np - Sum of all fuzzy voxels (sum(<in>))     * e - Entropy of all voxels     * ne - Normalized entropy of all voxels     * x - Location (i j k x y z) of the smallest value in the image     * X - Location (i j k x y z) of the largest value in the image     * c - Location (i j k x y z) of the centre of mass of the object     * B - Bounding box of all nonzero voxels [ xmin xsize ymin ysize zmin zsize ]     * xvox - Output the number of voxels in the x direction.       Replace x with y/z for other directions.     * xdim - Output the voxel dimension in the x direction.       Replace x with y/z for other directions.  
    in_file:
    # type=file|default=<undefined>: image to operate on
    mask_file:
    # type=file|default=<undefined>: statistics within the masked area
    larger_voxel:
    # type=float|default=0.0: Only estimate statistics if voxel is larger than <float>
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: image to operate on
    operation: '"v"'
    # type=enum|default='r'|allowed['B','R','X','a','c','e','n','ne','np','r','s','v','vl','vp','x','xdim','xvox']: Operation to perform:      * r - The range <min max> of all voxels.     * R - The robust range (assuming 2% outliers on both sides) of all voxels     * a - Average of all voxels     * s - Standard deviation of all voxels     * v - Volume of all voxels above 0 (<# voxels> * <volume per voxel>)     * vl - Volume of each integer label (<# voxels per label> x <volume per voxel>)     * vp - Volume of all probabilsitic voxels (sum(<in>) x <volume per voxel>)     * n - Count of all voxels above 0 (<# voxels>)     * np - Sum of all fuzzy voxels (sum(<in>))     * e - Entropy of all voxels     * ne - Normalized entropy of all voxels     * x - Location (i j k x y z) of the smallest value in the image     * X - Location (i j k x y z) of the largest value in the image     * c - Location (i j k x y z) of the centre of mass of the object     * B - Bounding box of all nonzero voxels [ xmin xsize ymin ysize zmin zsize ]     * xvox - Output the number of voxels in the x direction.       Replace x with y/z for other directions.     * xdim - Output the voxel dimension in the x direction.       Replace x with y/z for other directions.  
  imports: &id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: copy
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation: '"vl"'
    # type=enum|default='r'|allowed['B','R','X','a','c','e','n','ne','np','r','s','v','vl','vp','x','xdim','xvox']: Operation to perform:      * r - The range <min max> of all voxels.     * R - The robust range (assuming 2% outliers on both sides) of all voxels     * a - Average of all voxels     * s - Standard deviation of all voxels     * v - Volume of all voxels above 0 (<# voxels> * <volume per voxel>)     * vl - Volume of each integer label (<# voxels per label> x <volume per voxel>)     * vp - Volume of all probabilsitic voxels (sum(<in>) x <volume per voxel>)     * n - Count of all voxels above 0 (<# voxels>)     * np - Sum of all fuzzy voxels (sum(<in>))     * e - Entropy of all voxels     * ne - Normalized entropy of all voxels     * x - Location (i j k x y z) of the smallest value in the image     * X - Location (i j k x y z) of the largest value in the image     * c - Location (i j k x y z) of the centre of mass of the object     * B - Bounding box of all nonzero voxels [ xmin xsize ymin ysize zmin zsize ]     * xvox - Output the number of voxels in the x direction.       Replace x with y/z for other directions.     * xdim - Output the voxel dimension in the x direction.       Replace x with y/z for other directions.  
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    operation: '"x"'
    # type=enum|default='r'|allowed['B','R','X','a','c','e','n','ne','np','r','s','v','vl','vp','x','xdim','xvox']: Operation to perform:      * r - The range <min max> of all voxels.     * R - The robust range (assuming 2% outliers on both sides) of all voxels     * a - Average of all voxels     * s - Standard deviation of all voxels     * v - Volume of all voxels above 0 (<# voxels> * <volume per voxel>)     * vl - Volume of each integer label (<# voxels per label> x <volume per voxel>)     * vp - Volume of all probabilsitic voxels (sum(<in>) x <volume per voxel>)     * n - Count of all voxels above 0 (<# voxels>)     * np - Sum of all fuzzy voxels (sum(<in>))     * e - Entropy of all voxels     * ne - Normalized entropy of all voxels     * x - Location (i j k x y z) of the smallest value in the image     * X - Location (i j k x y z) of the largest value in the image     * c - Location (i j k x y z) of the centre of mass of the object     * B - Bounding box of all nonzero voxels [ xmin xsize ymin ysize zmin zsize ]     * xvox - Output the number of voxels in the x direction.       Replace x with y/z for other directions.     * xdim - Output the voxel dimension in the x direction.       Replace x with y/z for other directions.  
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: seg_stats im1.nii -v
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=file|default=<undefined>: image to operate on
    operation: '"v"'
    # type=enum|default='r'|allowed['B','R','X','a','c','e','n','ne','np','r','s','v','vl','vp','x','xdim','xvox']: Operation to perform:      * r - The range <min max> of all voxels.     * R - The robust range (assuming 2% outliers on both sides) of all voxels     * a - Average of all voxels     * s - Standard deviation of all voxels     * v - Volume of all voxels above 0 (<# voxels> * <volume per voxel>)     * vl - Volume of each integer label (<# voxels per label> x <volume per voxel>)     * vp - Volume of all probabilsitic voxels (sum(<in>) x <volume per voxel>)     * n - Count of all voxels above 0 (<# voxels>)     * np - Sum of all fuzzy voxels (sum(<in>))     * e - Entropy of all voxels     * ne - Normalized entropy of all voxels     * x - Location (i j k x y z) of the smallest value in the image     * X - Location (i j k x y z) of the largest value in the image     * c - Location (i j k x y z) of the centre of mass of the object     * B - Bounding box of all nonzero voxels [ xmin xsize ymin ysize zmin zsize ]     * xvox - Output the number of voxels in the x direction.       Replace x with y/z for other directions.     * xdim - Output the voxel dimension in the x direction.       Replace x with y/z for other directions.  
  imports: *id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: seg_stats im1.nii -vl
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    operation: '"vl"'
    # type=enum|default='r'|allowed['B','R','X','a','c','e','n','ne','np','r','s','v','vl','vp','x','xdim','xvox']: Operation to perform:      * r - The range <min max> of all voxels.     * R - The robust range (assuming 2% outliers on both sides) of all voxels     * a - Average of all voxels     * s - Standard deviation of all voxels     * v - Volume of all voxels above 0 (<# voxels> * <volume per voxel>)     * vl - Volume of each integer label (<# voxels per label> x <volume per voxel>)     * vp - Volume of all probabilsitic voxels (sum(<in>) x <volume per voxel>)     * n - Count of all voxels above 0 (<# voxels>)     * np - Sum of all fuzzy voxels (sum(<in>))     * e - Entropy of all voxels     * ne - Normalized entropy of all voxels     * x - Location (i j k x y z) of the smallest value in the image     * X - Location (i j k x y z) of the largest value in the image     * c - Location (i j k x y z) of the centre of mass of the object     * B - Bounding box of all nonzero voxels [ xmin xsize ymin ysize zmin zsize ]     * xvox - Output the number of voxels in the x direction.       Replace x with y/z for other directions.     * xdim - Output the voxel dimension in the x direction.       Replace x with y/z for other directions.  
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: seg_stats im1.nii -x
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    operation: '"x"'
    # type=enum|default='r'|allowed['B','R','X','a','c','e','n','ne','np','r','s','v','vl','vp','x','xdim','xvox']: Operation to perform:      * r - The range <min max> of all voxels.     * R - The robust range (assuming 2% outliers on both sides) of all voxels     * a - Average of all voxels     * s - Standard deviation of all voxels     * v - Volume of all voxels above 0 (<# voxels> * <volume per voxel>)     * vl - Volume of each integer label (<# voxels per label> x <volume per voxel>)     * vp - Volume of all probabilsitic voxels (sum(<in>) x <volume per voxel>)     * n - Count of all voxels above 0 (<# voxels>)     * np - Sum of all fuzzy voxels (sum(<in>))     * e - Entropy of all voxels     * ne - Normalized entropy of all voxels     * x - Location (i j k x y z) of the smallest value in the image     * X - Location (i j k x y z) of the largest value in the image     * c - Location (i j k x y z) of the centre of mass of the object     * B - Bounding box of all nonzero voxels [ xmin xsize ymin ysize zmin zsize ]     * xvox - Output the number of voxels in the x direction.       Replace x with y/z for other directions.     * xdim - Output the voxel dimension in the x direction.       Replace x with y/z for other directions.  
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
