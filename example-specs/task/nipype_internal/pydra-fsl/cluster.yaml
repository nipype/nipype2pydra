# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.model.Cluster' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Uses FSL cluster to perform clustering on statistical output
# 
#     Examples
#     --------
# 
#     >>> cl = Cluster()
#     >>> cl.inputs.threshold = 2.3
#     >>> cl.inputs.in_file = 'zstat1.nii.gz'
#     >>> cl.inputs.out_localmax_txt_file = 'stats.txt'
#     >>> cl.inputs.use_mm = True
#     >>> cl.cmdline
#     'cluster --in=zstat1.nii.gz --olmax=stats.txt --thresh=2.3000000000 --mm'
# 
#     
task_name: Cluster
nipype_name: Cluster
nipype_module: nipype.interfaces.fsl.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti-gz
    # type=file|default=<undefined>: input volume
    cope_file: generic/file
    # type=file|default=<undefined>: cope volume
    xfm_file: generic/file
    # type=file|default=<undefined>: filename for Linear: input->standard-space transform. Non-linear: input->highres transform
    std_space_file: generic/file
    # type=file|default=<undefined>: filename for standard-space volume
    warpfield_file: generic/file
    # type=file|default=<undefined>: file containing warpfield
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    index_file: generic/file
    # type=file: output of cluster index (in size order)
    threshold_file: generic/file
    # type=file: thresholded image
    localmax_txt_file: generic/file
    # type=file: local maxima text file
    localmax_vol_file: generic/file
    # type=file: output of local maxima volume
    size_file: generic/file
    # type=file: filename for output of size image
    max_file: generic/file
    # type=file: filename for output of max image
    mean_file: generic/file
    # type=file: filename for output of mean image
    pval_file: generic/file
    # type=file: filename for image output of log pvals
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input volume
    threshold:
    # type=float|default=0.0: threshold for input volume
    out_index_file:
    # type=traitcompound|default=None: output of cluster index (in size order)
    out_threshold_file:
    # type=traitcompound|default=None: thresholded image
    out_localmax_txt_file:
    # type=traitcompound|default=None: local maxima text file
    out_localmax_vol_file:
    # type=traitcompound|default=None: output of local maxima volume
    out_size_file:
    # type=traitcompound|default=None: filename for output of size image
    out_max_file:
    # type=traitcompound|default=None: filename for output of max image
    out_mean_file:
    # type=traitcompound|default=None: filename for output of mean image
    out_pval_file:
    # type=traitcompound|default=None: filename for image output of log pvals
    pthreshold:
    # type=float|default=0.0: p-threshold for clusters
    peak_distance:
    # type=float|default=0.0: minimum distance between local maxima/minima, in mm (default 0)
    cope_file:
    # type=file|default=<undefined>: cope volume
    volume:
    # type=int|default=0: number of voxels in the mask
    dlh:
    # type=float|default=0.0: smoothness estimate = sqrt(det(Lambda))
    fractional:
    # type=bool|default=False: interprets the threshold as a fraction of the robust range
    connectivity:
    # type=int|default=0: the connectivity of voxels (default 26)
    use_mm:
    # type=bool|default=False: use mm, not voxel, coordinates
    find_min:
    # type=bool|default=False: find minima instead of maxima
    no_table:
    # type=bool|default=False: suppresses printing of the table info
    minclustersize:
    # type=bool|default=False: prints out minimum significant cluster size
    xfm_file:
    # type=file|default=<undefined>: filename for Linear: input->standard-space transform. Non-linear: input->highres transform
    std_space_file:
    # type=file|default=<undefined>: filename for standard-space volume
    num_maxima:
    # type=int|default=0: no of local maxima to report
    warpfield_file:
    # type=file|default=<undefined>: file containing warpfield
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    threshold: '2.3'
    # type=float|default=0.0: threshold for input volume
    in_file:
    # type=file|default=<undefined>: input volume
    out_localmax_txt_file: '"stats.txt"'
    # type=traitcompound|default=None: local maxima text file
    use_mm: 'True'
    # type=bool|default=False: use mm, not voxel, coordinates
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: cluster --in=zstat1.nii.gz --olmax=stats.txt --thresh=2.3000000000 --mm
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    threshold: '2.3'
    # type=float|default=0.0: threshold for input volume
    in_file:
    # type=file|default=<undefined>: input volume
    out_localmax_txt_file: '"stats.txt"'
    # type=traitcompound|default=None: local maxima text file
    use_mm: 'True'
    # type=bool|default=False: use mm, not voxel, coordinates
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
