# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.epi.ApplyTOPUP' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Interface for FSL topup, a tool for estimating and correcting
#     susceptibility induced distortions.
#     `General reference
#     <http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/topup/ApplytopupUsersGuide>`_
#     and `use example
#     <http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/topup/ExampleTopupFollowedByApplytopup>`_.
# 
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.fsl import ApplyTOPUP
#     >>> applytopup = ApplyTOPUP()
#     >>> applytopup.inputs.in_files = ["epi.nii", "epi_rev.nii"]
#     >>> applytopup.inputs.encoding_file = "topup_encoding.txt"
#     >>> applytopup.inputs.in_topup_fieldcoef = "topup_fieldcoef.nii.gz"
#     >>> applytopup.inputs.in_topup_movpar = "topup_movpar.txt"
#     >>> applytopup.inputs.output_type = "NIFTI_GZ"
#     >>> applytopup.cmdline # doctest: +ELLIPSIS
#     'applytopup --datain=topup_encoding.txt --imain=epi.nii,epi_rev.nii --inindex=1,2 --topup=topup --out=epi_corrected.nii.gz'
#     >>> res = applytopup.run() # doctest: +SKIP
# 
#     
task_name: ApplyTOPUP
nipype_name: ApplyTOPUP
nipype_module: nipype.interfaces.fsl.epi
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_files: medimage/nifti1+list-of
    # type=inputmultiobject|default=[]: name of file with images
    encoding_file: text/text-file
    # type=file|default=<undefined>: name of text file with PE directions/times
    in_topup_fieldcoef: medimage/nifti-gz
    # type=file|default=<undefined>: topup file containing the field coefficients
    in_topup_movpar: text/text-file
    # type=file|default=<undefined>: topup movpar.txt file
    out_corrected: generic/file
    # type=file: name of 4D image file with unwarped images
    # type=file|default=<undefined>: output (warped) image
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_corrected: generic/file
    # type=file: name of 4D image file with unwarped images
    # type=file|default=<undefined>: output (warped) image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: name of file with images
    encoding_file:
    # type=file|default=<undefined>: name of text file with PE directions/times
    in_index:
    # type=list|default=[]: comma separated list of indices corresponding to --datain
    in_topup_fieldcoef:
    # type=file|default=<undefined>: topup file containing the field coefficients
    in_topup_movpar:
    # type=file|default=<undefined>: topup movpar.txt file
    out_corrected:
    # type=file: name of 4D image file with unwarped images
    # type=file|default=<undefined>: output (warped) image
    method:
    # type=enum|default='jac'|allowed['jac','lsr']: use jacobian modulation (jac) or least-squares resampling (lsr)
    interp:
    # type=enum|default='trilinear'|allowed['spline','trilinear']: interpolation method
    datatype:
    # type=enum|default='char'|allowed['char','double','float','int','short']: force output data type
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: name of file with images
    encoding_file:
    # type=file|default=<undefined>: name of text file with PE directions/times
    in_topup_fieldcoef:
    # type=file|default=<undefined>: topup file containing the field coefficients
    in_topup_movpar:
    # type=file|default=<undefined>: topup movpar.txt file
    output_type: '"NIFTI_GZ"'
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: applytopup --datain=topup_encoding.txt --imain=epi.nii,epi_rev.nii --inindex=1,2 --topup=topup --out=epi_corrected.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_files:
    # type=inputmultiobject|default=[]: name of file with images
    encoding_file:
    # type=file|default=<undefined>: name of text file with PE directions/times
    in_topup_fieldcoef:
    # type=file|default=<undefined>: topup file containing the field coefficients
    in_topup_movpar:
    # type=file|default=<undefined>: topup movpar.txt file
    output_type: '"NIFTI_GZ"'
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
