# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.fsl.epi.EPIDeWarp' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Wraps the unwarping script `epidewarp.fsl
#     <http://surfer.nmr.mgh.harvard.edu/fswiki/epidewarp.fsl>`_.
# 
#     .. warning:: deprecated in FSL, please use
#       :func:`niflow.nipype1.workflows.dmri.preprocess.epi.sdc_fmb` instead.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.fsl import EPIDeWarp
#     >>> dewarp = EPIDeWarp()
#     >>> dewarp.inputs.epi_file = "functional.nii"
#     >>> dewarp.inputs.mag_file = "magnitude.nii"
#     >>> dewarp.inputs.dph_file = "phase.nii"
#     >>> dewarp.inputs.output_type = "NIFTI_GZ"
#     >>> dewarp.cmdline # doctest: +ELLIPSIS
#     'epidewarp.fsl --mag magnitude.nii --dph phase.nii --epi functional.nii --esp 0.58 --exfdw .../exfdw.nii.gz --nocleanup --sigma 2 --tediff 2.46 --tmpdir .../temp --vsm .../vsm.nii.gz'
#     >>> res = dewarp.run() # doctest: +SKIP
# 
# 
#     
task_name: EPIDeWarp
nipype_name: EPIDeWarp
nipype_module: nipype.interfaces.fsl.epi
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    mag_file: medimage/nifti1
    # type=file|default=<undefined>: Magnitude file
    dph_file: medimage/nifti1
    # type=file|default=<undefined>: Phase file assumed to be scaled from 0 to 4095
    exf_file: generic/file
    # type=file|default=<undefined>: example func volume (or use epi)
    epi_file: medimage/nifti1
    # type=file|default=<undefined>: EPI volume to unwarp
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    unwarped_file: generic/file
    # type=file: unwarped epi file
    vsm_file: generic/file
    # type=file: voxel shift map
    exfdw: generic/file
    # type=file: dewarped functional volume example
    # type=string|default='': dewarped example func volume
    exf_mask: generic/file
    # type=file: Mask from example functional volume
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    vsm: vsm
    # type=string|default='': voxel shift map
    exfdw: exfdw
    # type=file: dewarped functional volume example
    # type=string|default='': dewarped example func volume
    tmpdir: tmpdir
    # type=string|default='': tmpdir
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    mag_file:
    # type=file|default=<undefined>: Magnitude file
    dph_file:
    # type=file|default=<undefined>: Phase file assumed to be scaled from 0 to 4095
    exf_file:
    # type=file|default=<undefined>: example func volume (or use epi)
    epi_file:
    # type=file|default=<undefined>: EPI volume to unwarp
    tediff:
    # type=float|default=2.46: difference in B0 field map TEs
    esp:
    # type=float|default=0.58: EPI echo spacing
    sigma:
    # type=int|default=2: 2D spatial gaussing smoothing                        stdev (default = 2mm)
    vsm:
    # type=string|default='': voxel shift map
    exfdw:
    # type=file: dewarped functional volume example
    # type=string|default='': dewarped example func volume
    epidw:
    # type=string|default='': dewarped epi volume
    tmpdir:
    # type=string|default='': tmpdir
    nocleanup:
    # type=bool|default=True: no cleanup
    cleanup:
    # type=bool|default=False: cleanup
    output_type:
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    epi_file:
    # type=file|default=<undefined>: EPI volume to unwarp
    mag_file:
    # type=file|default=<undefined>: Magnitude file
    dph_file:
    # type=file|default=<undefined>: Phase file assumed to be scaled from 0 to 4095
    output_type: '"NIFTI_GZ"'
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: epidewarp.fsl --mag magnitude.nii --dph phase.nii --epi functional.nii --esp 0.58 --exfdw .../exfdw.nii.gz --nocleanup --sigma 2 --tediff 2.46 --tmpdir .../temp --vsm .../vsm.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    epi_file:
    # type=file|default=<undefined>: EPI volume to unwarp
    mag_file:
    # type=file|default=<undefined>: Magnitude file
    dph_file:
    # type=file|default=<undefined>: Phase file assumed to be scaled from 0 to 4095
    output_type: '"NIFTI_GZ"'
    # type=enum|default='NIFTI'|allowed['NIFTI','NIFTI_GZ','NIFTI_PAIR','NIFTI_PAIR_GZ']: FSL output type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
