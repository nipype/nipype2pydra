# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.niftyreg.reg.RegF3D' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Interface for executable reg_f3d from NiftyReg platform.
# 
#     Fast Free-Form Deformation (F3D) algorithm for non-rigid registration.
#     Initially based on Modat et al., "Fast Free-Form Deformation using
#     graphics processing units", CMPB, 2010
# 
#     `Source code <https://cmiclab.cs.ucl.ac.uk/mmodat/niftyreg>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import niftyreg
#     >>> node = niftyreg.RegF3D()
#     >>> node.inputs.ref_file = 'im1.nii'
#     >>> node.inputs.flo_file = 'im2.nii'
#     >>> node.inputs.rmask_file = 'mask.nii'
#     >>> node.inputs.omp_core_val = 4
#     >>> node.cmdline
#     'reg_f3d -cpp im2_cpp.nii.gz -flo im2.nii -omp 4 -ref im1.nii -res im2_res.nii.gz -rmask mask.nii'
# 
#     
task_name: RegF3D
nipype_name: RegF3D
nipype_module: nipype.interfaces.niftyreg.reg
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    ref_file: medimage/nifti1
    # type=file|default=<undefined>: The input reference/target image
    flo_file: medimage/nifti1
    # type=file|default=<undefined>: The input floating/source image
    aff_file: generic/file
    # type=file|default=<undefined>: The input affine transformation file
    incpp_file: generic/file
    # type=file|default=<undefined>: The input cpp transformation file
    rmask_file: medimage/nifti1
    # type=file|default=<undefined>: Reference image mask
    fmask_file: generic/file
    # type=file|default=<undefined>: Floating image mask
    cpp_file: generic/file
    # type=file: The output CPP file
    # type=file|default=<undefined>: The output CPP file
    res_file: generic/file
    # type=file: The output resampled image
    # type=file|default=<undefined>: The output resampled image
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    cpp_file: generic/file
    # type=file: The output CPP file
    # type=file|default=<undefined>: The output CPP file
    res_file: generic/file
    # type=file: The output resampled image
    # type=file|default=<undefined>: The output resampled image
    invcpp_file: generic/file
    # type=file: The output inverse CPP file
    invres_file: generic/file
    # type=file: The output inverse res file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    ref_file:
    # type=file|default=<undefined>: The input reference/target image
    flo_file:
    # type=file|default=<undefined>: The input floating/source image
    aff_file:
    # type=file|default=<undefined>: The input affine transformation file
    incpp_file:
    # type=file|default=<undefined>: The input cpp transformation file
    rmask_file:
    # type=file|default=<undefined>: Reference image mask
    ref_smooth_val:
    # type=float|default=0.0: Smoothing kernel width for reference image
    flo_smooth_val:
    # type=float|default=0.0: Smoothing kernel width for floating image
    rlwth_thr_val:
    # type=float|default=0.0: Lower threshold for reference image
    rupth_thr_val:
    # type=float|default=0.0: Upper threshold for reference image
    flwth_thr_val:
    # type=float|default=0.0: Lower threshold for floating image
    fupth_thr_val:
    # type=float|default=0.0: Upper threshold for floating image
    rlwth2_thr_val:
    # type=tuple|default=(0, 0.0): Lower threshold for reference image at the specified time point
    rupth2_thr_val:
    # type=tuple|default=(0, 0.0): Upper threshold for reference image at the specified time point
    flwth2_thr_val:
    # type=tuple|default=(0, 0.0): Lower threshold for floating image at the specified time point
    fupth2_thr_val:
    # type=tuple|default=(0, 0.0): Upper threshold for floating image at the specified time point
    sx_val:
    # type=float|default=0.0: Final grid spacing along the x axes
    sy_val:
    # type=float|default=0.0: Final grid spacing along the y axes
    sz_val:
    # type=float|default=0.0: Final grid spacing along the z axes
    be_val:
    # type=float|default=0.0: Bending energy value
    le_val:
    # type=float|default=0.0: Linear elasticity penalty term
    jl_val:
    # type=float|default=0.0: Log of jacobian of deformation penalty value
    no_app_jl_flag:
    # type=bool|default=False: Do not approximate the log of jacobian penalty at control points only
    nmi_flag:
    # type=bool|default=False: use NMI even when other options are specified
    rbn_val:
    # type=range|default=0: Number of bins in the histogram for reference image
    fbn_val:
    # type=range|default=0: Number of bins in the histogram for reference image
    rbn2_val:
    # type=tuple|default=(0, 0): Number of bins in the histogram for reference image for given time point
    fbn2_val:
    # type=tuple|default=(0, 0): Number of bins in the histogram for reference image for given time point
    lncc_val:
    # type=float|default=0.0: SD of the Gaussian for computing LNCC
    lncc2_val:
    # type=tuple|default=(0, 0.0): SD of the Gaussian for computing LNCC for a given time point
    ssd_flag:
    # type=bool|default=False: Use SSD as the similarity measure
    ssd2_flag:
    # type=range|default=0: Use SSD as the similarity measure for a given time point
    kld_flag:
    # type=bool|default=False: Use KL divergence as the similarity measure
    kld2_flag:
    # type=range|default=0: Use KL divergence as the similarity measure for a given time point
    amc_flag:
    # type=bool|default=False: Use additive NMI
    nox_flag:
    # type=bool|default=False: Don't optimise in x direction
    noy_flag:
    # type=bool|default=False: Don't optimise in y direction
    noz_flag:
    # type=bool|default=False: Don't optimise in z direction
    maxit_val:
    # type=range|default=0: Maximum number of iterations per level
    ln_val:
    # type=range|default=0: Number of resolution levels to create
    lp_val:
    # type=range|default=0: Number of resolution levels to perform
    nopy_flag:
    # type=bool|default=False: Do not use the multiresolution approach
    noconj_flag:
    # type=bool|default=False: Use simple GD optimization
    pert_val:
    # type=range|default=0: Add perturbation steps after each optimization step
    vel_flag:
    # type=bool|default=False: Use velocity field integration
    fmask_file:
    # type=file|default=<undefined>: Floating image mask
    smooth_grad_val:
    # type=float|default=0.0: Kernel width for smoothing the metric gradient
    pad_val:
    # type=float|default=0.0: Padding value
    verbosity_off_flag:
    # type=bool|default=False: Turn off verbose output
    cpp_file:
    # type=file: The output CPP file
    # type=file|default=<undefined>: The output CPP file
    res_file:
    # type=file: The output resampled image
    # type=file|default=<undefined>: The output resampled image
    omp_core_val:
    # type=int|default=1: Number of openmp thread to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    ref_file:
    # type=file|default=<undefined>: The input reference/target image
    flo_file:
    # type=file|default=<undefined>: The input floating/source image
    rmask_file:
    # type=file|default=<undefined>: Reference image mask
    omp_core_val: '4'
    # type=int|default=1: Number of openmp thread to use
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: reg_f3d -cpp im2_cpp.nii.gz -flo im2.nii -omp 4 -ref im1.nii -res im2_res.nii.gz -rmask mask.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    ref_file:
    # type=file|default=<undefined>: The input reference/target image
    flo_file:
    # type=file|default=<undefined>: The input floating/source image
    rmask_file:
    # type=file|default=<undefined>: Reference image mask
    omp_core_val: '4'
    # type=int|default=1: Number of openmp thread to use
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
