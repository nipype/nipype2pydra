# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.niftyreg.regutils.RegAverage' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Interface for executable reg_average from NiftyReg platform.
# 
#     Compute average matrix or image from a list of matrices or image.
#     The tool can be use to resample images given input transformation
#     parametrisation as well as to demean transformations in Euclidean or
#     log-Euclidean space.
# 
#     This interface is different than the others in the way that the options
#     will be written in a command file that is given as a parameter.
# 
#     `Source code <https://cmiclab.cs.ucl.ac.uk/mmodat/niftyreg>`_
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces import niftyreg
#     >>> node = niftyreg.RegAverage()
#     >>> one_file = 'im1.nii'
#     >>> two_file = 'im2.nii'
#     >>> three_file = 'im3.nii'
#     >>> node.inputs.avg_files = [one_file, two_file, three_file]
#     >>> node.cmdline  # doctest: +ELLIPSIS
#     'reg_average --cmd_file .../reg_average_cmd'
#     
task_name: RegAverage
nipype_name: RegAverage
nipype_module: nipype.interfaces.niftyreg.regutils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    avg_files: generic/file+list-of
    # type=list|default=[]: Averaging of images/affine transformations
    avg_lts_files: generic/file+list-of
    # type=list|default=[]: Robust average of affine transformations
    avg_ref_file: generic/file
    # type=file|default=<undefined>: All input images are resampled into the space of <reference image> and averaged. A cubic spline interpolation scheme is used for resampling
    demean1_ref_file: generic/file
    # type=file|default=<undefined>: Average images and demean average image that have affine transformations to a common space
    demean2_ref_file: generic/file
    # type=file|default=<undefined>: Average images and demean average image that have non-rigid transformations to a common space
    demean3_ref_file: generic/file
    # type=file|default=<undefined>: Average images and demean average image that have linear and non-rigid transformations to a common space
    warp_files: generic/file+list-of
    # type=list|default=[]: transformation files and floating image pairs/triplets to the reference space
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Output file name
    # type=file|default=<undefined>: Output file name
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file: Output file name
    # type=file|default=<undefined>: Output file name
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    avg_files:
    # type=list|default=[]: Averaging of images/affine transformations
    avg_lts_files:
    # type=list|default=[]: Robust average of affine transformations
    avg_ref_file:
    # type=file|default=<undefined>: All input images are resampled into the space of <reference image> and averaged. A cubic spline interpolation scheme is used for resampling
    demean1_ref_file:
    # type=file|default=<undefined>: Average images and demean average image that have affine transformations to a common space
    demean2_ref_file:
    # type=file|default=<undefined>: Average images and demean average image that have non-rigid transformations to a common space
    demean3_ref_file:
    # type=file|default=<undefined>: Average images and demean average image that have linear and non-rigid transformations to a common space
    warp_files:
    # type=list|default=[]: transformation files and floating image pairs/triplets to the reference space
    out_file:
    # type=file: Output file name
    # type=file|default=<undefined>: Output file name
    omp_core_val:
    # type=int|default=1: Number of openmp thread to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    avg_files:
    # type=list|default=[]: Averaging of images/affine transformations
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: reg_average --cmd_file .../reg_average_cmd
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    avg_files:
    # type=list|default=[]: Averaging of images/affine transformations
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
