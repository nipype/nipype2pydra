# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.brainsuite.brainsuite.Pvc' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     partial volume classifier (PVC) tool.
#     This program performs voxel-wise tissue classification T1-weighted MRI.
#     Image should be skull-stripped and bias-corrected before tissue classification.
# 
#     http://brainsuite.org/processing/surfaceextraction/pvc/
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces import brainsuite
#     >>> from nipype.testing import example_data
#     >>> pvc = brainsuite.Pvc()
#     >>> pvc.inputs.inputMRIFile = example_data('structural.nii')
#     >>> pvc.inputs.inputMaskFile = example_data('mask.nii')
#     >>> results = pvc.run() #doctest: +SKIP
# 
#     
task_name: Pvc
nipype_name: Pvc
nipype_module: nipype.interfaces.brainsuite.brainsuite
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputMRIFile: generic/file
    # type=file|default=<undefined>: MRI file
    inputMaskFile: generic/file
    # type=file|default=<undefined>: brain mask file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputLabelFile: generic/file
    # type=file: path/name of label file
    # type=file|default=<undefined>: output label file. If unspecified, output file name will be auto generated.
    outputTissueFractionFile: generic/file
    # type=file: path/name of tissue fraction file
    # type=file|default=<undefined>: output tissue fraction file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    outputLabelFile: outputLabelFile
    # type=file: path/name of label file
    # type=file|default=<undefined>: output label file. If unspecified, output file name will be auto generated.
    outputTissueFractionFile: outputTissueFractionFile
    # type=file: path/name of tissue fraction file
    # type=file|default=<undefined>: output tissue fraction file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputMRIFile:
    # type=file|default=<undefined>: MRI file
    inputMaskFile:
    # type=file|default=<undefined>: brain mask file
    outputLabelFile:
    # type=file: path/name of label file
    # type=file|default=<undefined>: output label file. If unspecified, output file name will be auto generated.
    outputTissueFractionFile:
    # type=file: path/name of tissue fraction file
    # type=file|default=<undefined>: output tissue fraction file
    spatialPrior:
    # type=float|default=0.0: spatial prior strength
    verbosity:
    # type=int|default=0: verbosity level (0 = silent)
    threeClassFlag:
    # type=bool|default=False: use a three-class (CSF=0,GM=1,WM=2) labeling
    timer:
    # type=bool|default=False: time processing
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
