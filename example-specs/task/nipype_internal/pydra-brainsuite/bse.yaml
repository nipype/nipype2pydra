# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.brainsuite.brainsuite.Bse' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     brain surface extractor (BSE)
#     This program performs automated skull and scalp removal on T1-weighted MRI volumes.
# 
#     http://brainsuite.org/processing/surfaceextraction/bse/
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces import brainsuite
#     >>> from nipype.testing import example_data
#     >>> bse = brainsuite.Bse()
#     >>> bse.inputs.inputMRIFile = example_data('structural.nii')
#     >>> results = bse.run() #doctest: +SKIP
# 
#     
task_name: Bse
nipype_name: Bse
nipype_module: nipype.interfaces.brainsuite.brainsuite
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputMRIFile: generic/file
    # type=file|default=<undefined>: input MRI volume
    outputDiffusionFilter: generic/file
    # type=file: path/name of diffusion filter output
    # type=file|default=<undefined>: diffusion filter output
    outputEdgeMap: generic/file
    # type=file: path/name of edge map output
    # type=file|default=<undefined>: edge map output
    outputDetailedBrainMask: generic/file
    # type=file: path/name of detailed brain mask
    # type=file|default=<undefined>: save detailed brain mask
    outputCortexFile: generic/file
    # type=file: path/name of cortex file
    # type=file|default=<undefined>: cortex file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputMRIVolume: generic/file
    # type=file: path/name of brain-masked MRI volume
    # type=file|default=<undefined>: output brain-masked MRI volume. If unspecified, output file name will be auto generated.
    outputMaskFile: generic/file
    # type=file: path/name of smooth brain mask
    # type=file|default=<undefined>: save smooth brain mask. If unspecified, output file name will be auto generated.
    outputDiffusionFilter: generic/file
    # type=file: path/name of diffusion filter output
    # type=file|default=<undefined>: diffusion filter output
    outputEdgeMap: generic/file
    # type=file: path/name of edge map output
    # type=file|default=<undefined>: edge map output
    outputDetailedBrainMask: generic/file
    # type=file: path/name of detailed brain mask
    # type=file|default=<undefined>: save detailed brain mask
    outputCortexFile: generic/file
    # type=file: path/name of cortex file
    # type=file|default=<undefined>: cortex file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    outputMRIVolume: outputMRIVolume
    # type=file: path/name of brain-masked MRI volume
    # type=file|default=<undefined>: output brain-masked MRI volume. If unspecified, output file name will be auto generated.
    outputMaskFile: outputMaskFile
    # type=file: path/name of smooth brain mask
    # type=file|default=<undefined>: save smooth brain mask. If unspecified, output file name will be auto generated.
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputMRIFile:
    # type=file|default=<undefined>: input MRI volume
    outputMRIVolume:
    # type=file: path/name of brain-masked MRI volume
    # type=file|default=<undefined>: output brain-masked MRI volume. If unspecified, output file name will be auto generated.
    outputMaskFile:
    # type=file: path/name of smooth brain mask
    # type=file|default=<undefined>: save smooth brain mask. If unspecified, output file name will be auto generated.
    diffusionConstant:
    # type=float|default=25: diffusion constant
    diffusionIterations:
    # type=int|default=3: diffusion iterations
    edgeDetectionConstant:
    # type=float|default=0.64: edge detection constant
    radius:
    # type=float|default=1: radius of erosion/dilation filter
    dilateFinalMask:
    # type=bool|default=True: dilate final mask
    trim:
    # type=bool|default=True: trim brainstem
    outputDiffusionFilter:
    # type=file: path/name of diffusion filter output
    # type=file|default=<undefined>: diffusion filter output
    outputEdgeMap:
    # type=file: path/name of edge map output
    # type=file|default=<undefined>: edge map output
    outputDetailedBrainMask:
    # type=file: path/name of detailed brain mask
    # type=file|default=<undefined>: save detailed brain mask
    outputCortexFile:
    # type=file: path/name of cortex file
    # type=file|default=<undefined>: cortex file
    verbosityLevel:
    # type=float|default=1:  verbosity level (0=silent)
    noRotate:
    # type=bool|default=False: retain original orientation(default behavior will auto-rotate input NII files to LPI orientation)
    timer:
    # type=bool|default=False: show timing
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
