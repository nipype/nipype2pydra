# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.brainsuite.brainsuite.SVReg' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     surface and volume registration (svreg)
#     This program registers a subject's BrainSuite-processed volume and surfaces
#     to an atlas, allowing for automatic labelling of volume and surface ROIs.
# 
#     For more information, please see:
#     http://brainsuite.org/processing/svreg/usage/
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces import brainsuite
#     >>> svreg = brainsuite.SVReg()
#     >>> svreg.inputs.subjectFilePrefix = 'home/user/btestsubject/testsubject'
#     >>> svreg.inputs.refineOutputs = True
#     >>> svreg.inputs.skipToVolumeReg = False
#     >>> svreg.inputs. keepIntermediates = True
#     >>> svreg.inputs.verbosity2 = True
#     >>> svreg.inputs.displayTimestamps = True
#     >>> svreg.inputs.useSingleThreading = True
#     >>> results = svreg.run() #doctest: +SKIP
# 
# 
#     
task_name: SVReg
nipype_name: SVReg
nipype_module: nipype.interfaces.brainsuite.brainsuite
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    subjectFilePrefix:
    # type=str|default='': Absolute path and filename prefix of the subjects output from BrainSuite Cortical Surface Extraction Sequence
    dataSinkDelay:
    # type=list|default=[]: Connect datasink out_file to dataSinkDelay to delay execution of SVReg until dataSink has finished sinking CSE outputs.For use with parallel processing workflows including Brainsuites Cortical Surface Extraction sequence (SVReg requires certain files from Brainsuite CSE, which must all be in the pathway specified by subjectFilePrefix. see http://brainsuite.org/processing/svreg/usage/ for list of required inputs 
    atlasFilePrefix:
    # type=str|default='': Optional: Absolute Path and filename prefix of atlas files and labels to which the subject will be registered. If unspecified, SVRegwill use its own included atlas files
    iterations:
    # type=int|default=0: Assigns a number of iterations in the intensity registration step.if unspecified, performs 100 iterations
    refineOutputs:
    # type=bool|default=False: Refine outputs at the expense of more processing time.
    skipToVolumeReg:
    # type=bool|default=False: If surface registration was already performed at an earlier time and the user would not like to redo this step, then this flag may be used to skip ahead to the volumetric registration. Necessary input files will need to be present in the input directory called by the command.
    skipToIntensityReg:
    # type=bool|default=False: If the p-harmonic volumetric registration was already performed at an earlier time and the user would not like to redo this step, then this flag may be used to skip ahead to the intensity registration and label transfer step.
    useManualMaskFile:
    # type=bool|default=False: Can call a manually edited cerebrum mask to limit boundaries. Will use file: subbasename.cerebrum.mask.nii.gz Make sure to correctly replace your manually edited mask file in your input folder with the correct subbasename.
    curveMatchingInstructions:
    # type=str|default='': Used to take control of the curve matching process between the atlas and subject. One can specify the name of the .dfc file <sulname.dfc> and the sulcal numbers <#sul> to be used as constraints. example: curveMatchingInstructions = "subbasename.right.dfc 1 2 20"
    useCerebrumMask:
    # type=bool|default=False: The cerebrum mask <subbasename.cerebrum.mask.nii.gz> will be used for masking the final labels instead of the default pial surface mask. Every voxel will be labeled within the cerebrum mask regardless of the boundaries of the pial surface.
    pialSurfaceMaskDilation:
    # type=int|default=0: Cortical volume labels found in file output subbasename.svreg.label.nii.gz find its boundaries by using the pial surface then dilating by 1 voxel. Use this flag in order to control the number of pial surface mask dilation. (ie. -D 0 will assign no voxel dilation)
    keepIntermediates:
    # type=bool|default=False: Keep the intermediate files after the svreg sequence is complete.
    verbosity0:
    # type=bool|default=False: no messages will be reported
    verbosity1:
    # type=bool|default=False: messages will be reported but not the iteration-wise detailed messages
    verbosity2:
    # type=bool|default=False: all the messages, including per-iteration, will be displayed
    shortMessages:
    # type=bool|default=False: Short messages instead of detailed messages
    displayModuleName:
    # type=bool|default=False: Module name will be displayed in the messages
    displayTimestamps:
    # type=bool|default=False: Timestamps will be displayed in the messages
    skipVolumetricProcessing:
    # type=bool|default=False: Only surface registration and labeling will be performed. Volumetric processing will be skipped.
    useMultiThreading:
    # type=bool|default=False: If multiple CPUs are present on the system, the code will try to use multithreading to make the execution fast.
    useSingleThreading:
    # type=bool|default=False: Use single threaded mode.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
