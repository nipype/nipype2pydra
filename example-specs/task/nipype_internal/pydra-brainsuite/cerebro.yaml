# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.brainsuite.brainsuite.Cerebro' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Cerebrum/cerebellum labeling tool
#     This program performs automated labeling of cerebellum and cerebrum in T1 MRI.
#     Input MRI should be skull-stripped or a brain-only mask should be provided.
# 
# 
#     http://brainsuite.org/processing/surfaceextraction/cerebrum/
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces import brainsuite
#     >>> from nipype.testing import example_data
#     >>> cerebro = brainsuite.Cerebro()
#     >>> cerebro.inputs.inputMRIFile = example_data('structural.nii')
#     >>> cerebro.inputs.inputAtlasMRIFile = 'atlasMRIVolume.img'
#     >>> cerebro.inputs.inputAtlasLabelFile = 'atlasLabels.img'
#     >>> cerebro.inputs.inputBrainMaskFile = example_data('mask.nii')
#     >>> results = cerebro.run() #doctest: +SKIP
# 
#     
task_name: Cerebro
nipype_name: Cerebro
nipype_module: nipype.interfaces.brainsuite.brainsuite
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputMRIFile: generic/file
    # type=file|default=<undefined>: input 3D MRI volume
    inputAtlasMRIFile: generic/file
    # type=file|default=<undefined>: atlas MRI volume
    inputAtlasLabelFile: generic/file
    # type=file|default=<undefined>: atlas labeling
    inputBrainMaskFile: generic/file
    # type=file|default=<undefined>: brain mask file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputCerebrumMaskFile: generic/file
    # type=file: path/name of cerebrum mask file
    # type=file|default=<undefined>: output cerebrum mask volume. If unspecified, output file name will be auto generated.
    outputLabelVolumeFile: generic/file
    # type=file: path/name of label mask file
    # type=file|default=<undefined>: output labeled hemisphere/cerebrum volume. If unspecified, output file name will be auto generated.
    outputAffineTransformFile: generic/file
    # type=file: path/name of affine transform file
    # type=file|default=<undefined>: save affine transform to file.
    outputWarpTransformFile: generic/file
    # type=file: path/name of warp transform file
    # type=file|default=<undefined>: save warp transform to file.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    outputCerebrumMaskFile: outputCerebrumMaskFile
    # type=file: path/name of cerebrum mask file
    # type=file|default=<undefined>: output cerebrum mask volume. If unspecified, output file name will be auto generated.
    outputLabelVolumeFile: outputLabelVolumeFile
    # type=file: path/name of label mask file
    # type=file|default=<undefined>: output labeled hemisphere/cerebrum volume. If unspecified, output file name will be auto generated.
    outputAffineTransformFile: outputAffineTransformFile
    # type=file: path/name of affine transform file
    # type=file|default=<undefined>: save affine transform to file.
    outputWarpTransformFile: outputWarpTransformFile
    # type=file: path/name of warp transform file
    # type=file|default=<undefined>: save warp transform to file.
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputMRIFile:
    # type=file|default=<undefined>: input 3D MRI volume
    inputAtlasMRIFile:
    # type=file|default=<undefined>: atlas MRI volume
    inputAtlasLabelFile:
    # type=file|default=<undefined>: atlas labeling
    inputBrainMaskFile:
    # type=file|default=<undefined>: brain mask file
    outputCerebrumMaskFile:
    # type=file: path/name of cerebrum mask file
    # type=file|default=<undefined>: output cerebrum mask volume. If unspecified, output file name will be auto generated.
    outputLabelVolumeFile:
    # type=file: path/name of label mask file
    # type=file|default=<undefined>: output labeled hemisphere/cerebrum volume. If unspecified, output file name will be auto generated.
    costFunction:
    # type=int|default=2: 0,1,2
    useCentroids:
    # type=bool|default=False: use centroids of data to initialize position
    outputAffineTransformFile:
    # type=file: path/name of affine transform file
    # type=file|default=<undefined>: save affine transform to file.
    outputWarpTransformFile:
    # type=file: path/name of warp transform file
    # type=file|default=<undefined>: save warp transform to file.
    verbosity:
    # type=int|default=0: verbosity level (0=silent)
    linearConvergence:
    # type=float|default=0.0: linear convergence
    warpLabel:
    # type=int|default=0: warp order (2,3,4,5,6,7,8)
    warpConvergence:
    # type=float|default=0.0: warp convergence
    keepTempFiles:
    # type=bool|default=False: don't remove temporary files
    tempDirectory:
    # type=str|default='': specify directory to use for temporary files
    tempDirectoryBase:
    # type=str|default='': create a temporary directory within this directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
