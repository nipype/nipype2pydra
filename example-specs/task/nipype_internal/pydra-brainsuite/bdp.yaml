# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.brainsuite.brainsuite.BDP' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     BrainSuite Diffusion Pipeline (BDP) enables fusion of diffusion and
#     structural MRI information for advanced image and connectivity analysis.
#     It provides various methods for distortion correction, co-registration,
#     diffusion modeling (DTI and ODF) and basic ROI-wise statistic. BDP is a
#     flexible and diverse tool which supports wide variety of diffusion
#     datasets.
#     For more information, please see:
# 
#     http://brainsuite.org/processing/diffusion/
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces import brainsuite
#     >>> bdp = brainsuite.BDP()
#     >>> bdp.inputs.bfcFile = '/directory/subdir/prefix.bfc.nii.gz'
#     >>> bdp.inputs.inputDiffusionData = '/directory/subdir/prefix.dwi.nii.gz'
#     >>> bdp.inputs.BVecBValPair = ['/directory/subdir/prefix.dwi.bvec', '/directory/subdir/prefix.dwi.bval']
#     >>> results = bdp.run() #doctest: +SKIP
# 
# 
#     
task_name: BDP
nipype_name: BDP
nipype_module: nipype.interfaces.brainsuite.brainsuite
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    bfcFile: generic/file
    # type=file|default=<undefined>: Specify absolute path to file produced by bfc. By default, bfc produces the file in the format: prefix.bfc.nii.gz
    inputDiffusionData: generic/file
    # type=file|default=<undefined>: Specifies the absolute path and filename of the input diffusion data in 4D NIfTI-1 format. The flag must be followed by the filename. Only NIfTI-1 files with extension .nii or .nii.gz are supported. Furthermore, either  bMatrixFile, or a combination of both bValueFile and diffusionGradientFile must be used to provide the necessary b-matrices/b-values and gradient vectors. 
    bMatrixFile: generic/file
    # type=file|default=<undefined>: Specifies the absolute path and filename of the file containing b-matrices for diffusion-weighted scans. The flag must be followed by the filename. This file must be a plain text file containing 3x3 matrices for each diffusion encoding direction. It should contain zero matrices corresponding to b=0 images. This file usually has ".bmat" as its extension, and can be used to provide BDP with the more-accurate b-matrices as saved by some proprietary scanners. The b-matrices specified by the file must be in the voxel coordinates of the input diffusion weighted image (NIfTI file). In case b-matrices are not known/calculated, bvec and .bval files can be used instead (see diffusionGradientFile and bValueFile). 
    t1Mask: generic/file
    # type=file|default=<undefined>: Specifies the filename of the brain-mask file for input T1-weighted image. This mask can be same as the brain mask generated during BrainSuite extraction sequence. For best results, the mask should not include any extra-meningial tissues from T1-weighted image. The mask must be in the same coordinates as input T1-weighted image (i.e. should overlay correctly with input <fileprefix>.bfc.nii.gz file in BrainSuite). This mask is used for co-registration and defining brain boundary for statistics computation. The mask can be generated and/or edited in BrainSuite. In case outputDiffusionCoordinates is also used, this mask is first transformed to diffusion coordinate and the transformed mask is used for defining brain boundary in diffusion coordinates. When t1Mask is not set, BDP will try to use fileprefix>.mask.nii.gz as brain-mask. If <fileprefix>.mask.nii.gz is not found, then BDP will use the input <fileprefix>.bfc.nii.gz itself as mask (i.e. all non-zero voxels in <fileprefix>.bfc.nii.gz is assumed to constitute brain mask).  
    dwiMask: generic/file
    # type=file|default=<undefined>: Specifies the filename of the brain-mask file for diffusion data. This mask is used only for co-registration purposes and can affect overall quality of co-registration (see t1Mask for definition of brain mask for statistics computation). The mask must be a 3D volume and should be in the same coordinates as input Diffusion file/data (i.e. should overlay correctly with input diffusion data in BrainSuite). For best results, the mask should include only brain voxels (CSF voxels around brain is also acceptable). When this flag is not used, BDP will generate a pseudo mask using first b=0 image volume and would save it as fileprefix>.dwi.RSA.mask.nii.gz. In case co-registration is not accurate with automatically generated pseudo mask, BDP should be re-run with a refined diffusion mask. The mask can be generated and/or edited in BrainSuite. 
    fieldmapCorrection: generic/file
    # type=file|default=<undefined>: Use an acquired fieldmap for distortion correction. The fieldmap must have units of radians/second. Specify the filename of the fieldmap file. The field of view (FOV) of the fieldmap scan must cover the FOV of the diffusion scan. BDP will try to check the overlap of the FOV of the two scans and will issue a warning/error if the diffusion scan"s FOV is not fully covered by the fieldmap"s FOV. BDP uses all of the information saved in the NIfTI header to compute the FOV. If you get this error and think that it is incorrect, then it can be suppressed using the flag ignore-fieldmap-FOV. Neither the image matrix size nor the imaging grid resolution of the fieldmap needs to be the same as that of the diffusion scan, but the fieldmap must be pre-registred to the diffusion scan. BDP does NOT align the fieldmap to the diffusion scan, nor does it check the alignment of the fieldmap and diffusion scans. Only NIfTI files with extension of .nii or .nii.gz are supported. Fieldmap-based distortion correction also requires the echoSpacing. Also fieldmapCorrectionMethod allows you to define method for distortion correction. least squares is the default method. 
    transformDiffusionVolume: generic/file
    # type=file|default=<undefined>: This flag allows to define custom volumes in diffusion coordinate which would be transformed into T1 coordinate in a rigid fashion. The flag must be followed by the name of either a NIfTI file or of a folder that contains one or more NIfTI files. All of the files must be in diffusion coordinate, i.e. the files should overlay correctly with the diffusion scan in BrainSuite. Only NIfTI files with an extension of .nii or .nii.gz are supported. The transformed files are written to the output directory with suffix ".T1_coord" in the filename and will not be corrected for distortion, if any. The trait transformInterpolation can be used to define the type of interpolation that would be used (default is set to linear). If you are attempting to transform a label file or mask file, use "nearest" interpolation method with transformInterpolation. See also transformT1Volume and transformInterpolation
    transformT1Volume: generic/file
    # type=file|default=<undefined>: Same as transformDiffusionVolume except that files specified must be in T1 coordinate, i.e. the files should overlay correctly with the input <fileprefix>.bfc.nii.gz files in BrainSuite. BDP transforms these data/images from T1 coordinate to diffusion coordinate. The transformed files are written to the output directory with suffix ".D_coord" in the filename. See also transformDiffusionVolume  and transformInterpolation. 
    transformT1Surface: generic/file
    # type=file|default=<undefined>: Similar to transformT1Volume, except that this flag allows transforming surfaces (instead of volumes) in T1 coordinate into diffusion coordinate in a rigid fashion. The flag must be followed by the name of either a .dfs file or of a folder that contains one or more dfs files. All of the files must be in T1 coordinate, i.e. the files should overlay correctly with the T1-weighted scan in BrainSuite. The transformed files are written to the output directory with suffix D_coord" in the filename. 
    transformDiffusionSurface: generic/file
    # type=file|default=<undefined>: Same as transformT1Volume, except that the .dfs files specified must be in diffusion coordinate, i.e. the surface files should overlay correctly with the diffusion scan in BrainSuite. The transformed files are written to the output directory with suffix ".T1_coord" in the filename. See also transformT1Volume. 
    customDiffusionLabel: generic/file
    # type=file|default=<undefined>: BDP supports custom ROIs in addition to those generated by BrainSuite SVReg) for ROI-wise statistics calculation. The flag must be followed by the name of either a file (custom ROI file) or of a folder that contains one or more ROI files. All of the files must be in diffusion coordinate, i.e. the label files should overlay correctly with the diffusion scan in BrainSuite. These input label files are also transferred (and saved) to T1 coordinate for statistics in T1 coordinate. BDP uses nearest-neighborhood interpolation for this transformation. Only NIfTI files, with an extension of .nii or .nii.gz are supported. In order to avoid confusion with other ROI IDs in the statistic files, a 5-digit ROI ID is generated for each custom label found and the mapping of ID to label file is saved in the file fileprefix>.BDP_ROI_MAP.xml. Custom label files can also be generated by using the label painter tool in BrainSuite. See also customLabelXML
    customT1Label: generic/file
    # type=file|default=<undefined>: Same as customDiffusionLabelexcept that the label files specified must be in T1 coordinate, i.e. the label files should overlay correctly with the T1-weighted scan in BrainSuite. If the trait outputDiffusionCoordinates is also used then these input label files are also transferred (and saved) to diffusion coordinate for statistics in diffusion coordinate. BDP uses nearest-neighborhood interpolation for this transformation. See also customLabelXML. 
    customLabelXML: generic/file
    # type=file|default=<undefined>: BrainSuite saves a descriptions of the SVReg labels (ROI name, ID, color, and description) in an .xml file brainsuite_labeldescription.xml). BDP uses the ROI ID"s from this xml file to report statistics. This flag allows for the use of a custom label description xml file. The flag must be followed by an xml filename. This can be useful when you want to limit the ROIs for which you compute statistics. You can also use custom xml files to name your own ROIs (assign ID"s) for custom labels. BrainSuite can save a label description in .xml format after using the label painter tool to create a ROI label. The xml file MUST be in the same format as BrainSuite"s label description file (see brainsuite_labeldescription.xml for an example). When this flag is used, NO 5-digit ROI ID is generated for custom label files and NO Statistics will be calculated for ROIs not identified in the custom xml file. See also customDiffusionLabel and customT1Label.
    flagConfigFile: generic/file
    # type=file|default=<undefined>: Uses the defined file to specify BDP flags which can be useful for batch processing. A flag configuration file is a plain text file which can contain any number of BDP"s optional flags (and their parameters) separated by whitespace. Everything coming after # until end-of-line is treated as comment and is ignored. If a flag is defined in configuration file and is also specified in the command used to run BDP, then the later get preference and overrides the definition in configuration file. 
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    bfcFile:
    # type=file|default=<undefined>: Specify absolute path to file produced by bfc. By default, bfc produces the file in the format: prefix.bfc.nii.gz
    noStructuralRegistration:
    # type=bool|default=False: Allows BDP to work without any structural input. This can useful when one is only interested in diffusion modelling part of BDP. With this flag only fieldmap-based distortion correction is supported. outPrefix can be used to specify fileprefix of the output filenames. Change dwiMask to define region of interest for diffusion modelling.
    inputDiffusionData:
    # type=file|default=<undefined>: Specifies the absolute path and filename of the input diffusion data in 4D NIfTI-1 format. The flag must be followed by the filename. Only NIfTI-1 files with extension .nii or .nii.gz are supported. Furthermore, either  bMatrixFile, or a combination of both bValueFile and diffusionGradientFile must be used to provide the necessary b-matrices/b-values and gradient vectors. 
    bMatrixFile:
    # type=file|default=<undefined>: Specifies the absolute path and filename of the file containing b-matrices for diffusion-weighted scans. The flag must be followed by the filename. This file must be a plain text file containing 3x3 matrices for each diffusion encoding direction. It should contain zero matrices corresponding to b=0 images. This file usually has ".bmat" as its extension, and can be used to provide BDP with the more-accurate b-matrices as saved by some proprietary scanners. The b-matrices specified by the file must be in the voxel coordinates of the input diffusion weighted image (NIfTI file). In case b-matrices are not known/calculated, bvec and .bval files can be used instead (see diffusionGradientFile and bValueFile). 
    BVecBValPair:
    # type=list|default=[]: Must input a list containing first the BVector file, then the BValue file (both must be absolute paths) Example: bdp.inputs.BVecBValPair = ['/directory/subdir/prefix.dwi.bvec', '/directory/subdir/prefix.dwi.bval'] The first item in the list specifies the filename of the file containing b-values for the diffusion scan. The b-value file must be a plain-text file and usually has an extension of .bval The second item in the list specifies the filename of the file containing the diffusion gradient directions (specified in the voxel coordinates of the input diffusion-weighted image)The b-vectors file must be a plain text file and usually has an extension of .bvec 
    dataSinkDelay:
    # type=list|default=[]: For use in parallel processing workflows including Brainsuite Cortical Surface Extraction sequence. Connect datasink out_file to dataSinkDelay to delay execution of BDP until dataSink has finished sinking outputs. In particular, BDP may be run after BFC has finished. For more information see http://brainsuite.org/processing/diffusion/pipeline/
    phaseEncodingDirection:
    # type=enum|default='x'|allowed['x','x-','y','y-','z','z-']: Specifies the phase-encoding direction of the EPI (diffusion) images. It is same as the dominant direction of distortion in the images. This information is used to constrain the distortion correction along the specified direction. Directions are represented by any one of x, x-, y, y-, z or z-. "x" direction increases towards the right side of the subject, while "x-" increases towards the left side of the subject. Similarly, "y" and "y-" are along the anterior-posterior direction of the subject, and "z" & "z-" are along the inferior-superior direction. When this flag is not used, BDP uses "y" as the default phase-encoding direction. 
    echoSpacing:
    # type=float|default=0.0: Sets the echo spacing to t seconds, which is used for fieldmap-based distortion correction. This flag is required when using fieldmapCorrection
    bValRatioThreshold:
    # type=float|default=0.0: Sets a threshold which is used to determine b=0 images. When there are no diffusion weighted image with b-value of zero, then BDP tries to use diffusion weighted images with a low b-value in place of b=0 image. The diffusion images with minimum b-value is used as b=0 image only if the ratio of the maximum and minimum b-value is more than the specified threshold. A lower value of threshold will allow diffusion images with higher b-value to be used as b=0 image. The default value of this threshold is set to 45, if this trait is not set. 
    estimateTensors:
    # type=bool|default=False: Estimates diffusion tensors using a weighted log-linear estimation and saves derived diffusion tensor parameters (FA, MD, axial, radial, L2, L3). This is the default behavior if no diffusion modeling flags are specified. The estimated diffusion tensors can be visualized by loading the saved ``*.eig.nii.gz`` file in BrainSuite. BDP reports diffusivity (MD, axial, radial, L2 and L3) in a unit which is reciprocal inverse of the unit of input b-value. 
    estimateODF_FRACT:
    # type=bool|default=False: Estimates ODFs using the Funk-Radon and Cosine Transformation (FRACT). The outputs are saved in a separate directory with name "FRACT" and the ODFs can be visualized by loading the saved ".odf" file in BrainSuite. 
    estimateODF_FRT:
    # type=bool|default=False: Estimates ODFs using Funk-Radon Transformation (FRT). The coefficient maps for ODFs are saved in a separate directory with name "FRT" and the ODFs can be visualized by loading the saved ".odf" file in BrainSuite. The derived generalized-FA (GFA) maps are also saved in the output directory. 
    estimateODF_3DShore:
    # type=float|default=0.0: Estimates ODFs using 3Dshore. Pass in diffusion time, in ms
    odfLambta:
    # type=bool|default=False: Sets the regularization parameter, lambda, of the Laplace-Beltrami operator while estimating ODFs. The default value is set to 0.006 . This can be used to set the appropriate regularization for the input diffusion data. 
    t1Mask:
    # type=file|default=<undefined>: Specifies the filename of the brain-mask file for input T1-weighted image. This mask can be same as the brain mask generated during BrainSuite extraction sequence. For best results, the mask should not include any extra-meningial tissues from T1-weighted image. The mask must be in the same coordinates as input T1-weighted image (i.e. should overlay correctly with input <fileprefix>.bfc.nii.gz file in BrainSuite). This mask is used for co-registration and defining brain boundary for statistics computation. The mask can be generated and/or edited in BrainSuite. In case outputDiffusionCoordinates is also used, this mask is first transformed to diffusion coordinate and the transformed mask is used for defining brain boundary in diffusion coordinates. When t1Mask is not set, BDP will try to use fileprefix>.mask.nii.gz as brain-mask. If <fileprefix>.mask.nii.gz is not found, then BDP will use the input <fileprefix>.bfc.nii.gz itself as mask (i.e. all non-zero voxels in <fileprefix>.bfc.nii.gz is assumed to constitute brain mask).  
    dwiMask:
    # type=file|default=<undefined>: Specifies the filename of the brain-mask file for diffusion data. This mask is used only for co-registration purposes and can affect overall quality of co-registration (see t1Mask for definition of brain mask for statistics computation). The mask must be a 3D volume and should be in the same coordinates as input Diffusion file/data (i.e. should overlay correctly with input diffusion data in BrainSuite). For best results, the mask should include only brain voxels (CSF voxels around brain is also acceptable). When this flag is not used, BDP will generate a pseudo mask using first b=0 image volume and would save it as fileprefix>.dwi.RSA.mask.nii.gz. In case co-registration is not accurate with automatically generated pseudo mask, BDP should be re-run with a refined diffusion mask. The mask can be generated and/or edited in BrainSuite. 
    rigidRegMeasure:
    # type=enum|default='MI'|allowed['BDP','INVERSION','MI']: Defines the similarity measure to be used for rigid registration. Possible measures are "MI", "INVERSION" and "BDP". MI measure uses normalized mutual information based cost function. INVERSION measure uses simpler cost function based on sum of squared difference by exploiting the approximate inverse-contrast relationship in T1- and T2-weighted images. BDP measure combines MI and INVERSION. It starts with INVERSION measure and refines the result with MI measure. BDP is the default measure when this trait is not set.  
    dcorrRegMeasure:
    # type=enum|default='MI'|allowed['BDP','INVERSION-BOTH','INVERSION-EPI','INVERSION-T1','MI']: Defines the method for registration-based distortion correction. Possible methods are "MI", "INVERSION-EPI", "INVERSION-T1", INVERSION-BOTH", and "BDP". MI method uses normalized mutual information based cost-function while estimating the distortion field. INVERSION-based method uses simpler cost function based on sum of squared difference by exploiting the known approximate contrast relationship in T1- and T2-weighted images. T2-weighted EPI is inverted when INVERSION-EPI is used; T1-image is inverted when INVERSION-T1 is used; and both are inverted when INVERSION-BOTH is used. BDP method add the MI-based refinement after the correction using INVERSION-BOTH method. BDP is the default method when this trait is not set.  
    dcorrWeight:
    # type=float|default=0.0: Sets the (scalar) weighting parameter for regularization penalty in registration-based distortion correction. Set this trait to a single, non-negative number which specifies the weight. A large regularization weight encourages smoother distortion field at the cost of low measure of image similarity after distortion correction. On the other hand, a smaller regularization weight can result into higher measure of image similarity but with unrealistic and unsmooth distortion field. A weight of 0.5 would reduce the penalty to half of the default regularization penalty (By default, this weight is set to 1.0). Similarly, a weight of 2.0 would increase the penalty to twice of the default penalty.  
    skipDistortionCorr:
    # type=bool|default=False: Skips distortion correction completely and performs only a rigid registration of diffusion and T1-weighted image. This can be useful when the input diffusion images do not have any distortion or they have been corrected for distortion. 
    skipNonuniformityCorr:
    # type=bool|default=False: Skips intensity non-uniformity correction in b=0 image for registration-based distortion correction. The intensity non-uniformity correction does not affect any diffusion modeling. 
    skipIntensityCorr:
    # type=bool|default=False: Disables intensity correction when performing distortion correction. Intensity correction can change the noise distribution in the corrected image, but it does not affect estimated diffusion parameters like FA, etc. 
    fieldmapCorrection:
    # type=file|default=<undefined>: Use an acquired fieldmap for distortion correction. The fieldmap must have units of radians/second. Specify the filename of the fieldmap file. The field of view (FOV) of the fieldmap scan must cover the FOV of the diffusion scan. BDP will try to check the overlap of the FOV of the two scans and will issue a warning/error if the diffusion scan"s FOV is not fully covered by the fieldmap"s FOV. BDP uses all of the information saved in the NIfTI header to compute the FOV. If you get this error and think that it is incorrect, then it can be suppressed using the flag ignore-fieldmap-FOV. Neither the image matrix size nor the imaging grid resolution of the fieldmap needs to be the same as that of the diffusion scan, but the fieldmap must be pre-registred to the diffusion scan. BDP does NOT align the fieldmap to the diffusion scan, nor does it check the alignment of the fieldmap and diffusion scans. Only NIfTI files with extension of .nii or .nii.gz are supported. Fieldmap-based distortion correction also requires the echoSpacing. Also fieldmapCorrectionMethod allows you to define method for distortion correction. least squares is the default method. 
    fieldmapCorrectionMethod:
    # type=enum|default='pixelshift'|allowed['leastsq','pixelshift']: Defines the distortion correction method while using fieldmap. Possible methods are "pixelshift" and "leastsq". leastsq is the default method when this flag is not used. Pixel-shift (pixelshift) method uses image interpolation to un-distort the distorted diffusion images. Least squares (leastsq) method uses a physical model of distortion which is more accurate (and more computationally expensive) than pixel-shift method.
    ignoreFieldmapFOV:
    # type=bool|default=False: Suppresses the error generated by an insufficient field of view of the input fieldmap and continues with the processing. It is useful only when used with fieldmap-based distortion correction. See fieldmap-correction for a detailed explanation. 
    fieldmapSmooth:
    # type=float|default=0.0: Applies 3D Gaussian smoothing with a standard deviation of S millimeters (mm) to the input fieldmap before applying distortion correction. This trait is only useful with fieldmapCorrection. Skip this trait for no smoothing. 
    transformDiffusionVolume:
    # type=file|default=<undefined>: This flag allows to define custom volumes in diffusion coordinate which would be transformed into T1 coordinate in a rigid fashion. The flag must be followed by the name of either a NIfTI file or of a folder that contains one or more NIfTI files. All of the files must be in diffusion coordinate, i.e. the files should overlay correctly with the diffusion scan in BrainSuite. Only NIfTI files with an extension of .nii or .nii.gz are supported. The transformed files are written to the output directory with suffix ".T1_coord" in the filename and will not be corrected for distortion, if any. The trait transformInterpolation can be used to define the type of interpolation that would be used (default is set to linear). If you are attempting to transform a label file or mask file, use "nearest" interpolation method with transformInterpolation. See also transformT1Volume and transformInterpolation
    transformT1Volume:
    # type=file|default=<undefined>: Same as transformDiffusionVolume except that files specified must be in T1 coordinate, i.e. the files should overlay correctly with the input <fileprefix>.bfc.nii.gz files in BrainSuite. BDP transforms these data/images from T1 coordinate to diffusion coordinate. The transformed files are written to the output directory with suffix ".D_coord" in the filename. See also transformDiffusionVolume  and transformInterpolation. 
    transformInterpolation:
    # type=enum|default='linear'|allowed['cubic','linear','nearest','spline']: Defines the type of interpolation method which would be used while transforming volumes defined by transformT1Volume and transformDiffusionVolume. Possible methods are "linear", "nearest", "cubic" and "spline". By default, "linear" interpolation is used. 
    transformT1Surface:
    # type=file|default=<undefined>: Similar to transformT1Volume, except that this flag allows transforming surfaces (instead of volumes) in T1 coordinate into diffusion coordinate in a rigid fashion. The flag must be followed by the name of either a .dfs file or of a folder that contains one or more dfs files. All of the files must be in T1 coordinate, i.e. the files should overlay correctly with the T1-weighted scan in BrainSuite. The transformed files are written to the output directory with suffix D_coord" in the filename. 
    transformDiffusionSurface:
    # type=file|default=<undefined>: Same as transformT1Volume, except that the .dfs files specified must be in diffusion coordinate, i.e. the surface files should overlay correctly with the diffusion scan in BrainSuite. The transformed files are written to the output directory with suffix ".T1_coord" in the filename. See also transformT1Volume. 
    transformDataOnly:
    # type=bool|default=False: Skip all of the processing (co-registration, distortion correction and tensor/ODF estimation) and directly start transformation of defined custom volumes, mask and labels (using transformT1Volume, transformDiffusionVolume, transformT1Surface, transformDiffusionSurface, customDiffusionLabel, customT1Label). This flag is useful when BDP was previously run on a subject (or <fileprefix>) and some more data (volumes, mask or labels) need to be transformed across the T1-diffusion coordinate spaces. This assumes that all the necessary files were generated earlier and all of the other flags MUST be used in the same way as they were in the initial BDP run that processed the data. 
    generateStats:
    # type=bool|default=False: Generate ROI-wise statistics of estimated diffusion tensor parameters. Units of the reported statistics are same as that of the estimated tensor parameters (see estimateTensors). Mean, variance, and voxel counts of white matter(WM), grey matter(GM), and both WM and GM combined are written for each estimated parameter in a separate comma-seperated value csv) file. BDP uses the ROI labels generated by Surface-Volume Registration (SVReg) in the BrainSuite extraction sequence. Specifically, it looks for labels saved in either fileprefix>.svreg.corr.label.nii.gz or <fileprefix>.svreg.label.nii.gz. In case both files are present, only the first file is used. Also see customDiffusionLabel and customT1Label for specifying your own ROIs. It is also possible to forgo computing the SVReg ROI-wise statistics and only compute stats with custom labels if SVReg label is missing. BDP also transfers (and saves) the label/mask files to appropriate coordinates before computing statistics. Also see outputDiffusionCoordinates for outputs in diffusion coordinate and forcePartialROIStats for an important note about field of view of diffusion and T1-weighted scans. 
    onlyStats:
    # type=bool|default=False: Skip all of the processing (co-registration, distortion correction and tensor/ODF estimation) and directly start computation of statistics. This flag is useful when BDP was previously run on a subject (or fileprefix>) and statistics need to be (re-)computed later. This assumes that all the necessary files were generated earlier. All of the other flags MUST be used in the same way as they were in the initial BDP run that processed the data. 
    forcePartialROIStats:
    # type=bool|default=False: The field of view (FOV) of the diffusion and T1-weighted scans may differ significantly in some situations. This may result in partial acquisitions of some ROIs in the diffusion scan. By default, BDP does not compute statistics for partially acquired ROIs and shows warnings. This flag forces computation of statistics for all ROIs, including those which are partially acquired. When this flag is used, number of missing voxels are also reported for each ROI in statistics files. Number of missing voxels are reported in the same coordinate system as the statistics file.  
    customDiffusionLabel:
    # type=file|default=<undefined>: BDP supports custom ROIs in addition to those generated by BrainSuite SVReg) for ROI-wise statistics calculation. The flag must be followed by the name of either a file (custom ROI file) or of a folder that contains one or more ROI files. All of the files must be in diffusion coordinate, i.e. the label files should overlay correctly with the diffusion scan in BrainSuite. These input label files are also transferred (and saved) to T1 coordinate for statistics in T1 coordinate. BDP uses nearest-neighborhood interpolation for this transformation. Only NIfTI files, with an extension of .nii or .nii.gz are supported. In order to avoid confusion with other ROI IDs in the statistic files, a 5-digit ROI ID is generated for each custom label found and the mapping of ID to label file is saved in the file fileprefix>.BDP_ROI_MAP.xml. Custom label files can also be generated by using the label painter tool in BrainSuite. See also customLabelXML
    customT1Label:
    # type=file|default=<undefined>: Same as customDiffusionLabelexcept that the label files specified must be in T1 coordinate, i.e. the label files should overlay correctly with the T1-weighted scan in BrainSuite. If the trait outputDiffusionCoordinates is also used then these input label files are also transferred (and saved) to diffusion coordinate for statistics in diffusion coordinate. BDP uses nearest-neighborhood interpolation for this transformation. See also customLabelXML. 
    customLabelXML:
    # type=file|default=<undefined>: BrainSuite saves a descriptions of the SVReg labels (ROI name, ID, color, and description) in an .xml file brainsuite_labeldescription.xml). BDP uses the ROI ID"s from this xml file to report statistics. This flag allows for the use of a custom label description xml file. The flag must be followed by an xml filename. This can be useful when you want to limit the ROIs for which you compute statistics. You can also use custom xml files to name your own ROIs (assign ID"s) for custom labels. BrainSuite can save a label description in .xml format after using the label painter tool to create a ROI label. The xml file MUST be in the same format as BrainSuite"s label description file (see brainsuite_labeldescription.xml for an example). When this flag is used, NO 5-digit ROI ID is generated for custom label files and NO Statistics will be calculated for ROIs not identified in the custom xml file. See also customDiffusionLabel and customT1Label.
    outputSubdir:
    # type=str|default='': By default, BDP writes out all the output (and intermediate) files in the same directory (or folder) as the BFC file. This flag allows to specify a sub-directory name in which output (and intermediate) files would be written. BDP will create the sub-directory in the same directory as BFC file. <directory_name> should be the name of the sub-directory without any path. This can be useful to organize all outputs generated by BDP in a separate sub-directory. 
    outputDiffusionCoordinates:
    # type=bool|default=False: Enables estimation of diffusion tensors and/or ODFs (and statistics if applicable) in the native diffusion coordinate in addition to the default T1-coordinate. All native diffusion coordinate files are saved in a separate folder named "diffusion_coord_outputs". In case statistics computation is required, it will also transform/save all label/mask files required to diffusion coordinate (see generateStats for details). 
    flagConfigFile:
    # type=file|default=<undefined>: Uses the defined file to specify BDP flags which can be useful for batch processing. A flag configuration file is a plain text file which can contain any number of BDP"s optional flags (and their parameters) separated by whitespace. Everything coming after # until end-of-line is treated as comment and is ignored. If a flag is defined in configuration file and is also specified in the command used to run BDP, then the later get preference and overrides the definition in configuration file. 
    outPrefix:
    # type=str|default='': Specifies output fileprefix when noStructuralRegistration is used. The fileprefix can not start with a dash (-) and should be a simple string reflecting the absolute path to desired location, along with outPrefix. When this flag is not specified (and noStructuralRegistration is used) then the output files have same file-base as the input diffusion file. This trait is ignored when noStructuralRegistration is not used. 
    threads:
    # type=int|default=0: Sets the number of parallel process threads which can be used for computations to N, where N must be an integer. Default value of N is  
    lowMemory:
    # type=bool|default=False: Activates low-memory mode. This will run the registration-based distortion correction at a lower resolution, which could result in a less-accurate correction. This should only be used when no other alternative is available. 
    ignoreMemory:
    # type=bool|default=False: Deactivates the inbuilt memory checks and forces BDP to run registration-based distortion correction at its default resolution even on machines with a low amount of memory. This may result in an out-of-memory error when BDP cannot allocate sufficient memory. 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
