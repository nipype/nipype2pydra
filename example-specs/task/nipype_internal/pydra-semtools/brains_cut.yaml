# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.segmentation.specialized.BRAINSCut' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: BRAINSCut (BRAINS)
# 
#     category: Segmentation.Specialized
# 
#     description: Automatic Segmentation using neural networks
# 
#     version: 1.0
# 
#     license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt
# 
#     contributor: Vince Magnotta, Hans Johnson, Greg Harris, Kent Williams, Eunyoung Regina Kim
#     
task_name: BRAINSCut
nipype_name: BRAINSCut
nipype_module: nipype.interfaces.semtools.segmentation.specialized
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    netConfiguration: generic/file
    # type=file|default=<undefined>: XML File defining BRAINSCut parameters. OLD NAME. PLEASE USE modelConfigurationFilename instead.
    modelConfigurationFilename: generic/file
    # type=file|default=<undefined>: XML File defining BRAINSCut parameters
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    netConfiguration:
    # type=file|default=<undefined>: XML File defining BRAINSCut parameters. OLD NAME. PLEASE USE modelConfigurationFilename instead.
    modelConfigurationFilename:
    # type=file|default=<undefined>: XML File defining BRAINSCut parameters
    trainModelStartIndex:
    # type=int|default=0: Starting iteration for training
    verbose:
    # type=int|default=0: print out some debugging information
    multiStructureThreshold:
    # type=bool|default=False: multiStructureThreshold module to deal with overlapping area
    histogramEqualization:
    # type=bool|default=False: A Histogram Equalization process could be added to the creating/applying process from Subject To Atlas. Default is false, which generate input vectors without Histogram Equalization. 
    computeSSEOn:
    # type=bool|default=False: compute Sum of Square Error (SSE) along the trained model until the number of iteration given in the modelConfigurationFilename file
    generateProbability:
    # type=bool|default=False: Generate probability map
    createVectors:
    # type=bool|default=False: create vectors for training neural net
    trainModel:
    # type=bool|default=False: train the neural net
    NoTrainingVectorShuffling:
    # type=bool|default=False: If this flag is on, there will be no shuffling.
    applyModel:
    # type=bool|default=False: apply the neural net
    validate:
    # type=bool|default=False: validate data set.Just need for the first time run ( This is for validation of xml file and not working yet )
    method:
    # type=enum|default='RandomForest'|allowed['ANN','RandomForest']: 
    numberOfTrees:
    # type=int|default=0:  Random tree: number of trees. This is to be used when only one model with specified depth wish to be created. 
    randomTreeDepth:
    # type=int|default=0:  Random tree depth. This is to be used when only one model with specified depth wish to be created. 
    modelFilename:
    # type=str|default='':  model file name given from user (not by xml  configuration file) 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
