# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.gtract.gtractCostFastMarching' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Cost Fast Marching
# 
#     category: Diffusion.GTRACT
# 
#     description: This program will use a fast marching fiber tracking algorithm to identify fiber tracts from a tensor image. This program is the first portion of the algorithm. The user must first run gtractFastMarchingTracking to generate the actual fiber tracts.  This algorithm is roughly based on the work by G. Parker et al. from IEEE Transactions On Medical Imaging, 21(5): 505-512, 2002. An additional feature of including anisotropy into the vcl_cost function calculation is included.
# 
#     version: 4.0.0
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT
# 
#     license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt
# 
#     contributor: This tool was developed by Vincent Magnotta and Greg Harris. The original code here was developed by Daisy Espino.
# 
#     acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1
#     
task_name: gtractCostFastMarching
nipype_name: gtractCostFastMarching
nipype_module: nipype.interfaces.semtools.diffusion.gtract
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputTensorVolume: generic/file
    # type=file|default=<undefined>: Required: input tensor image file name
    inputAnisotropyVolume: generic/file
    # type=file|default=<undefined>: Required: input anisotropy image file name
    inputStartingSeedsLabelMapVolume: generic/file
    # type=file|default=<undefined>: Required: input starting seeds LabelMap image file name
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputCostVolume: generic/file
    # type=file: Output vcl_cost image
    # type=traitcompound|default=None: Output vcl_cost image
    outputSpeedVolume: generic/file
    # type=file: Output speed image
    # type=traitcompound|default=None: Output speed image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputTensorVolume:
    # type=file|default=<undefined>: Required: input tensor image file name
    inputAnisotropyVolume:
    # type=file|default=<undefined>: Required: input anisotropy image file name
    inputStartingSeedsLabelMapVolume:
    # type=file|default=<undefined>: Required: input starting seeds LabelMap image file name
    startingSeedsLabel:
    # type=int|default=0: Label value for Starting Seeds
    outputCostVolume:
    # type=file: Output vcl_cost image
    # type=traitcompound|default=None: Output vcl_cost image
    outputSpeedVolume:
    # type=file: Output speed image
    # type=traitcompound|default=None: Output speed image
    anisotropyWeight:
    # type=float|default=0.0: Anisotropy weight used for vcl_cost function calculations
    stoppingValue:
    # type=float|default=0.0: Terminiating value for vcl_cost function estimation
    seedThreshold:
    # type=float|default=0.0: Anisotropy threshold used for seed selection
    numberOfThreads:
    # type=int|default=0: Explicitly specify the maximum number of threads to use.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
