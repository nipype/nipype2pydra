# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.registration.brainsresample.BRAINSResample' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Resample Image (BRAINS)
# 
#     category: Registration
# 
#     description: This program collects together three common image processing tasks that all involve resampling an image volume: Resampling to a new resolution and spacing, applying a transformation (using an ITK transform IO mechanisms) and Warping (using a vector image deformation field).  Full documentation available here: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/BRAINSResample.
# 
#     version: 3.0.0
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/BRAINSResample
# 
#     license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt
# 
#     contributor: This tool was developed by Vincent Magnotta, Greg Harris, and Hans Johnson.
# 
#     acknowledgements: The development of this tool was supported by funding from grants NS050568 and NS40068 from the National Institute of Neurological Disorders and Stroke and grants MH31593, MH40856, from the National Institute of Mental Health.
#     
task_name: BRAINSResample
nipype_name: BRAINSResample
nipype_module: nipype.interfaces.semtools.registration.brainsresample
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputVolume: generic/file
    # type=file|default=<undefined>: Image To Warp
    referenceVolume: generic/file
    # type=file|default=<undefined>: Reference image used only to define the output space. If not specified, the warping is done in the same space as the image to warp.
    deformationVolume: generic/file
    # type=file|default=<undefined>: Displacement Field to be used to warp the image (ITKv3 or earlier)
    warpTransform: generic/file
    # type=file|default=<undefined>: Filename for the BRAINSFit transform (ITKv3 or earlier) or composite transform file (ITKv4)
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputVolume: generic/file
    # type=file: Resulting deformed image
    # type=traitcompound|default=None: Resulting deformed image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputVolume:
    # type=file|default=<undefined>: Image To Warp
    referenceVolume:
    # type=file|default=<undefined>: Reference image used only to define the output space. If not specified, the warping is done in the same space as the image to warp.
    outputVolume:
    # type=file: Resulting deformed image
    # type=traitcompound|default=None: Resulting deformed image
    pixelType:
    # type=enum|default='float'|allowed['binary','float','int','short','uchar','uint','ushort']: Specifies the pixel type for the input/output images.  The 'binary' pixel type uses a modified algorithm whereby the image is read in as unsigned char, a signed distance map is created, signed distance map is resampled, and then a thresholded image of type unsigned char is written to disk.
    deformationVolume:
    # type=file|default=<undefined>: Displacement Field to be used to warp the image (ITKv3 or earlier)
    warpTransform:
    # type=file|default=<undefined>: Filename for the BRAINSFit transform (ITKv3 or earlier) or composite transform file (ITKv4)
    interpolationMode:
    # type=enum|default='NearestNeighbor'|allowed['BSpline','Blackman','Cosine','Hamming','Lanczos','Linear','NearestNeighbor','ResampleInPlace','Welch','WindowedSinc']: Type of interpolation to be used when applying transform to moving volume.  Options are Linear, ResampleInPlace, NearestNeighbor, BSpline, or WindowedSinc
    inverseTransform:
    # type=bool|default=False: True/False is to compute inverse of given transformation. Default is false
    defaultValue:
    # type=float|default=0.0: Default voxel value
    gridSpacing:
    # type=inputmultiobject|default=[]: Add warped grid to output image to help show the deformation that occurred with specified spacing.   A spacing of 0 in a dimension indicates that grid lines should be rendered to fall exactly (i.e. do not allow displacements off that plane).  This is useful for making a 2D image of grid lines from the 3D space
    numberOfThreads:
    # type=int|default=0: Explicitly specify the maximum number of threads to use.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
