# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.tractography.ukftractography.UKFTractography' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: UKF Tractography
# 
#     category: Diffusion.Tractography
# 
#     description: This module traces fibers in a DWI Volume using the multiple tensor unscented Kalman Filter methology. For more information check the documentation.
# 
#     version: 1.0
# 
#     documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/ukftractography:MainPage
# 
#     contributor: Yogesh Rathi, Stefan Lienhard, Yinpeng Li, Martin Styner, Ipek Oguz, Yundi Shi, Christian Baumgartner, Kent Williams, Hans Johnson, Peter Savadjiev, Carl-Fredrik Westin.
# 
#     acknowledgements: The development of this module was supported by NIH grants R01 MH097979 (PI Rathi), R01 MH092862 (PIs Westin and Verma), U01 NS083223 (PI Westin), R01 MH074794 (PI Westin) and P41 EB015902 (PI Kikinis).
#     
task_name: UKFTractography
nipype_name: UKFTractography
nipype_module: nipype.interfaces.semtools.diffusion.tractography.ukftractography
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    dwiFile: generic/file
    # type=file|default=<undefined>: Input DWI volume
    seedsFile: generic/file
    # type=file|default=<undefined>: Seeds for diffusion. If not specified, full brain tractography will be performed, and the algorithm will start from every voxel in the brain mask where the Generalized Anisotropy is bigger than 0.18
    maskFile: generic/file
    # type=file|default=<undefined>: Mask for diffusion tractography
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    tracts: generic/file
    # type=file: Tracts generated, with first tensor output
    # type=traitcompound|default=None: Tracts generated, with first tensor output
    tractsWithSecondTensor: generic/file
    # type=file: Tracts generated, with second tensor output (if there is one)
    # type=traitcompound|default=None: Tracts generated, with second tensor output (if there is one)
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dwiFile:
    # type=file|default=<undefined>: Input DWI volume
    seedsFile:
    # type=file|default=<undefined>: Seeds for diffusion. If not specified, full brain tractography will be performed, and the algorithm will start from every voxel in the brain mask where the Generalized Anisotropy is bigger than 0.18
    labels:
    # type=inputmultiobject|default=[]: A vector of the ROI labels to be used
    maskFile:
    # type=file|default=<undefined>: Mask for diffusion tractography
    tracts:
    # type=file: Tracts generated, with first tensor output
    # type=traitcompound|default=None: Tracts generated, with first tensor output
    writeAsciiTracts:
    # type=bool|default=False: Write tract file as a VTK binary data file
    writeUncompressedTracts:
    # type=bool|default=False: Write tract file as a VTK uncompressed data file
    seedsPerVoxel:
    # type=int|default=0:  Each seed generates a fiber, thus using more seeds generates more fibers. In general use 1 or 2 seeds, and for a more thorough result use 5 or 10 (depending on your machine this may take up to 2 days to run).,       
    numTensor:
    # type=enum|default='1'|allowed['1','2']: Number of tensors used
    freeWater:
    # type=bool|default=False: Adds a term for free water difusion to the model. (Note for experts: if checked, the 1T simple model is forced) 
    recordFA:
    # type=bool|default=False: Whether to store FA. Attaches field 'FA', and 'FA2' for 2-tensor case to fiber. 
    recordFreeWater:
    # type=bool|default=False: Whether to store the fraction of free water. Attaches field 'FreeWater' to fiber.
    recordTrace:
    # type=bool|default=False: Whether to store Trace. Attaches field 'Trace', and 'Trace2' for 2-tensor case to fiber.
    recordTensors:
    # type=bool|default=False: Recording the tensors enables Slicer to color the fiber bundles by FA, orientation, and so on. The fields will be called 'TensorN', where N is the tensor number. 
    recordNMSE:
    # type=bool|default=False: Whether to store NMSE. Attaches field 'NMSE' to fiber. 
    recordState:
    # type=bool|default=False: Whether to attach the states to the fiber. Will generate field 'state'.
    recordCovariance:
    # type=bool|default=False: Whether to store the covariance. Will generate field 'covariance' in fiber.
    recordLength:
    # type=float|default=0.0: Record length of tractography, in millimeters
    minFA:
    # type=float|default=0.0: Abort the tractography when the Fractional Anisotropy is less than this value
    minGA:
    # type=float|default=0.0: Abort the tractography when the Generalized Anisotropy is less than this value
    fullTensorModel:
    # type=bool|default=False: Whether to use the full tensor model. If unchecked, use the default simple tensor model
    numThreads:
    # type=int|default=0: Number of threads used during computation. Set to the number of cores on your workstation for optimal speed. If left undefined the number of cores detected will be used. 
    stepLength:
    # type=float|default=0.0: Step length of tractography, in millimeters
    maxHalfFiberLength:
    # type=float|default=0.0: The max length limit of the half fibers generated during tractography. Here the fiber is 'half' because the tractography goes in only one direction from one seed point at a time
    seedFALimit:
    # type=float|default=0.0: Seed points whose FA are below this value are excluded
    Qm:
    # type=float|default=0.0: Process noise for angles/direction
    Ql:
    # type=float|default=0.0: Process noise for eigenvalues
    Qw:
    # type=float|default=0.0: Process noise for free water weights, ignored if no free water estimation
    Rs:
    # type=float|default=0.0: Measurement noise
    maxBranchingAngle:
    # type=float|default=0.0: Maximum branching angle, in degrees. When using multiple tensors, a new branch will be created when the tensors' major directions form an angle between (minBranchingAngle, maxBranchingAngle). Branching is suppressed when this maxBranchingAngle is set to 0.0
    minBranchingAngle:
    # type=float|default=0.0: Minimum branching angle, in degrees. When using multiple tensors, a new branch will be created when the tensors' major directions form an angle between (minBranchingAngle, maxBranchingAngle)
    tractsWithSecondTensor:
    # type=file: Tracts generated, with second tensor output (if there is one)
    # type=traitcompound|default=None: Tracts generated, with second tensor output (if there is one)
    storeGlyphs:
    # type=bool|default=False: Store tensors' main directions as two-point lines in a separate file named glyphs_{tracts}. When using multiple tensors, only the major tensors' main directions are stored
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
