# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.diffusion.dtiaverage' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: DTIAverage (DTIProcess)
# 
#     category: Diffusion.Diffusion Tensor Images.CommandLineOnly
# 
#     description: dtiaverage is a program that allows to compute the average of an arbitrary number of tensor fields (listed after the --inputs option) This program is used in our pipeline as the last step of the atlas building processing. When all the tensor fields have been deformed in the same space, to create the average tensor field (--tensor_output) we use dtiaverage.
#      Several average method can be used (specified by the --method option): euclidean, log-euclidean and pga. The default being euclidean.
# 
#     version: 1.0.0
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Extensions/DTIProcess
# 
#     license: Copyright (c)  Casey Goodlett. All rights reserved.
#         See http://www.ia.unc.edu/dev/Copyright.htm for details.
#         This software is distributed WITHOUT ANY WARRANTY; without even
#         the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#         PURPOSE.  See the above copyright notices for more information.
# 
#     contributor: Casey Goodlett
#     
task_name: dtiaverage
nipype_name: dtiaverage
nipype_module: nipype.interfaces.semtools.diffusion.diffusion
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputs: generic/file+list-of
    # type=inputmultiobject|default=[]: List of all the tensor fields to be averaged
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    tensor_output: generic/file
    # type=file: Averaged tensor volume
    # type=traitcompound|default=None: Averaged tensor volume
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputs:
    # type=inputmultiobject|default=[]: List of all the tensor fields to be averaged
    tensor_output:
    # type=file: Averaged tensor volume
    # type=traitcompound|default=None: Averaged tensor volume
    DTI_double:
    # type=bool|default=False: Tensor components are saved as doubles (cannot be visualized in Slicer)
    verbose:
    # type=bool|default=False: produce verbose output
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
