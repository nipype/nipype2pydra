# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.utilities.brains.BRAINSClipInferior' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Clip Inferior of Center of Brain (BRAINS)
# 
#     category: Utilities.BRAINS
# 
#     description: This program will read the inputVolume as a short int image, write the BackgroundFillValue everywhere inferior to the lower bound, and write the resulting clipped short int image in the outputVolume.
# 
#     version: 1.0
#     
task_name: BRAINSClipInferior
nipype_name: BRAINSClipInferior
nipype_module: nipype.interfaces.semtools.utilities.brains
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputVolume: generic/file
    # type=file|default=<undefined>: Input image to make a clipped short int copy from.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputVolume: generic/file
    # type=file: Output image, a short int copy of the upper portion of the input image, filled with BackgroundFillValue.
    # type=traitcompound|default=None: Output image, a short int copy of the upper portion of the input image, filled with BackgroundFillValue.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputVolume:
    # type=file|default=<undefined>: Input image to make a clipped short int copy from.
    outputVolume:
    # type=file: Output image, a short int copy of the upper portion of the input image, filled with BackgroundFillValue.
    # type=traitcompound|default=None: Output image, a short int copy of the upper portion of the input image, filled with BackgroundFillValue.
    acLowerBound:
    # type=float|default=0.0: ,                 When the input image to the output image, replace the image with the BackgroundFillValue everywhere below the plane This Far in physical units (millimeters) below (inferior to) the AC point (assumed to be the voxel field middle.)  The oversize default was chosen to have no effect.  Based on visualizing a thousand masks in the IPIG study, we recommend a limit no smaller than 80.0 mm.,             
    BackgroundFillValue:
    # type=str|default='': Fill the background of image with specified short int value. Enter number or use BIGNEG for a large negative number.
    numberOfThreads:
    # type=int|default=0: Explicitly specify the maximum number of threads to use.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
