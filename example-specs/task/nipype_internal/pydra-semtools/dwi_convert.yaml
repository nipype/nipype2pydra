# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.diffusion.DWIConvert' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: DWIConverter
# 
#     category: Diffusion.Diffusion Data Conversion
# 
#     description: Converts diffusion weighted MR images in dicom series into Nrrd format for analysis in Slicer. This program has been tested on only a limited subset of DTI dicom formats available from Siemens, GE, and Phillips scanners. Work in progress to support dicom multi-frame data. The program parses dicom header to extract necessary information about measurement frame, diffusion weighting directions, b-values, etc, and write out a nrrd image. For non-diffusion weighted dicom images, it loads in an entire dicom series and writes out a single dicom volume in a .nhdr/.raw pair.
# 
#     version: Version 1.0
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/DWIConverter
# 
#     license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt
# 
#     contributor: Vince Magnotta (UIowa), Hans Johnson (UIowa), Joy Matsui (UIowa), Kent Williams (UIowa), Mark Scully (Uiowa), Xiaodong Tao (GE)
# 
#     acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.  Additional support for DTI data produced on Philips scanners was contributed by Vincent Magnotta and Hans Johnson at the University of Iowa.
#     
task_name: DWIConvert
nipype_name: DWIConvert
nipype_module: nipype.interfaces.semtools.diffusion.diffusion
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputVolume: generic/file
    # type=file|default=<undefined>: Input DWI volume -- not used for DicomToNrrd mode.
    fslNIFTIFile: generic/file
    # type=file|default=<undefined>: 4D NIfTI file containing gradient volumes
    inputBValues: generic/file
    # type=file|default=<undefined>: The B Values are stored in FSL .bval text file format
    inputBVectors: generic/file
    # type=file|default=<undefined>: The Gradient Vectors are stored in FSL .bvec text file format
    inputDicomDirectory: generic/directory
    # type=directory|default=<undefined>: Directory holding Dicom series
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputVolume: generic/file
    # type=file: Output filename (.nhdr or .nrrd)
    # type=traitcompound|default=None: Output filename (.nhdr or .nrrd)
    outputBValues: generic/file
    # type=file: The B Values are stored in FSL .bval text file format (defaults to <outputVolume>.bval)
    # type=traitcompound|default=None: The B Values are stored in FSL .bval text file format (defaults to <outputVolume>.bval)
    outputBVectors: generic/file
    # type=file: The Gradient Vectors are stored in FSL .bvec text file format (defaults to <outputVolume>.bvec)
    # type=traitcompound|default=None: The Gradient Vectors are stored in FSL .bvec text file format (defaults to <outputVolume>.bvec)
    gradientVectorFile: generic/file
    # type=file: Text file giving gradient vectors
    # type=traitcompound|default=None: Text file giving gradient vectors
    outputDirectory: generic/directory
    # type=directory: Directory holding the output NRRD file
    # type=traitcompound|default=None: Directory holding the output NRRD file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    conversionMode:
    # type=enum|default='DicomToNrrd'|allowed['DicomToFSL','DicomToNrrd','FSLToNrrd','NrrdToFSL']: Determine which conversion to perform. DicomToNrrd (default): Convert DICOM series to NRRD DicomToFSL: Convert DICOM series to NIfTI File + gradient/bvalue text files NrrdToFSL: Convert DWI NRRD file to NIfTI File + gradient/bvalue text files FSLToNrrd: Convert NIfTI File + gradient/bvalue text files to NRRD file.
    inputVolume:
    # type=file|default=<undefined>: Input DWI volume -- not used for DicomToNrrd mode.
    outputVolume:
    # type=file: Output filename (.nhdr or .nrrd)
    # type=traitcompound|default=None: Output filename (.nhdr or .nrrd)
    inputDicomDirectory:
    # type=directory|default=<undefined>: Directory holding Dicom series
    fslNIFTIFile:
    # type=file|default=<undefined>: 4D NIfTI file containing gradient volumes
    inputBValues:
    # type=file|default=<undefined>: The B Values are stored in FSL .bval text file format
    inputBVectors:
    # type=file|default=<undefined>: The Gradient Vectors are stored in FSL .bvec text file format
    outputBValues:
    # type=file: The B Values are stored in FSL .bval text file format (defaults to <outputVolume>.bval)
    # type=traitcompound|default=None: The B Values are stored in FSL .bval text file format (defaults to <outputVolume>.bval)
    outputBVectors:
    # type=file: The Gradient Vectors are stored in FSL .bvec text file format (defaults to <outputVolume>.bvec)
    # type=traitcompound|default=None: The Gradient Vectors are stored in FSL .bvec text file format (defaults to <outputVolume>.bvec)
    fMRI:
    # type=bool|default=False: Output a NRRD file, but without gradients
    writeProtocolGradientsFile:
    # type=bool|default=False: Write the protocol gradients to a file suffixed by '.txt' as they were specified in the procol by multiplying each diffusion gradient direction by the measurement frame.  This file is for debugging purposes only, the format is not fixed, and will likely change as debugging of new dicom formats is necessary.
    useIdentityMeaseurementFrame:
    # type=bool|default=False: Adjust all the gradients so that the measurement frame is an identity matrix.
    useBMatrixGradientDirections:
    # type=bool|default=False: Fill the nhdr header with the gradient directions and bvalues computed out of the BMatrix. Only changes behavior for Siemens data.  In some cases the standard public gradients are not properly computed.  The gradients can empirically computed from the private BMatrix fields.  In some cases the private BMatrix is consistent with the public grandients, but not in all cases, when it exists BMatrix is usually most robust.
    outputDirectory:
    # type=directory: Directory holding the output NRRD file
    # type=traitcompound|default=None: Directory holding the output NRRD file
    gradientVectorFile:
    # type=file: Text file giving gradient vectors
    # type=traitcompound|default=None: Text file giving gradient vectors
    smallGradientThreshold:
    # type=float|default=0.0: If a gradient magnitude is greater than 0 and less than smallGradientThreshold, then DWIConvert will display an error message and quit, unless the useBMatrixGradientDirections option is set.
    allowLossyConversion:
    # type=bool|default=False: The only supported output type is 'short'. Conversion from images of a different type may cause data loss due to rounding or truncation. Use with caution!
    transposeInputBVectors:
    # type=bool|default=False: FSL input BVectors are expected to be encoded in the input file as one vector per line. If it is not the case, use this option to transpose the file as it is read.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
