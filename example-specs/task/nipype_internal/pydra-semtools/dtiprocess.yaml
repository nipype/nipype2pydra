# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.diffusion.dtiprocess' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: DTIProcess (DTIProcess)
# 
#     category: Diffusion.Diffusion Tensor Images
# 
#     description: dtiprocess is a tool that handles tensor fields. It takes as an input a tensor field in nrrd format.
#     It can generate diffusion scalar properties out of the tensor field such as : FA (--fa_output), Gradient FA image (--fa_gradient_output), color FA (--color_fa_output), MD (--md_output), Frobenius norm (--frobenius_norm_output), lbd1, lbd2, lbd3 (--lambda{1,2,3}_output), binary map of voxel where if any of the eigenvalue is negative, the voxel is set to 1 (--negative_eigenvector_output)
# 
#     It also creates 4D images out of the tensor field such as: Highest eigenvector map (highest eigenvector at each voxel) (--principal_eigenvector_output)
# 
#     Masking capabilities: For any of the processing done with dtiprocess, it's possible to apply it on a masked region of the tensor field. You need to use the --mask option for any of the option to be applied on that tensor field sub-region only. If you want to save the masked tensor field use the option --outmask and specify the new masked tensor field file name.
#     dtiprocess also allows a range of transformations on the tensor fields. The transformed tensor field file name is specified with the option --deformation_output. There are 3 resampling interpolation methods specified with the tag --interpolation followed by the type to use (nearestneighbor, linear, cubic) Then you have several transformations possible to apply:
# 
#             - Affine transformations using as an input
#             - itk affine transformation file (based on the itkAffineTransform class)
#             - Affine transformations using rview (details and download at http://www.doc.ic.ac.uk/~dr/software/). There are 2 versions of rview both creating transformation files called dof files. The old version of rview outputs text files containing the transformation parameters. It can be read in with the --dof_file option. The new version outputs binary dof files. These dof files can be transformed into human readable file with the dof2mat tool which is part of the rview package. So you need to save the output of dof2mat into a text file which can then be used with the -- newdof_file option. Usage example: dof2mat mynewdoffile.dof >> mynewdoffile.txt       dtiprocess --dti_image mytensorfield.nhdr --newdof_file mynewdoffile.txt --rot_output myaffinetensorfield.nhdr
# 
#     Non linear transformations as an input: The default transformation file type is d-field (displacement field) in nrrd format. The option to use is --forward with the name of the file. If the transformation file is a h-field you have to add the option --hField.
# 
#     version: 1.0.1
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Extensions/DTIProcess
# 
#     license: Copyright (c)  Casey Goodlett. All rights reserved.
#       See http://www.ia.unc.edu/dev/Copyright.htm for details.
#          This software is distributed WITHOUT ANY WARRANTY; without even
#          the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#          PURPOSE.  See the above copyright notices for more information.
# 
#     contributor: Casey Goodlett
#     
task_name: dtiprocess
nipype_name: dtiprocess
nipype_module: nipype.interfaces.semtools.diffusion.diffusion
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    dti_image: generic/file
    # type=file|default=<undefined>: DTI tensor volume
    affineitk_file: generic/file
    # type=file|default=<undefined>: Transformation file for affine transformation.  ITK format.
    dof_file: generic/file
    # type=file|default=<undefined>: Transformation file for affine transformation.  This can be ITK format (or the outdated RView).
    newdof_file: generic/file
    # type=file|default=<undefined>: Transformation file for affine transformation.  RView NEW format. (txt file output of dof2mat)
    mask: generic/file
    # type=file|default=<undefined>: Mask tensors. Specify --outmask if you want to save the masked tensor field, otherwise the mask is applied just for the current processing 
    forward: generic/file
    # type=file|default=<undefined>: Forward transformation.  Assumed to be a deformation field in world coordinates, unless the --h-field option is specified.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fa_output: generic/file
    # type=file: Fractional Anisotropy output file
    # type=traitcompound|default=None: Fractional Anisotropy output file
    md_output: generic/file
    # type=file: Mean Diffusivity output file
    # type=traitcompound|default=None: Mean Diffusivity output file
    fa_gradient_output: generic/file
    # type=file: Fractional Anisotropy Gradient output file
    # type=traitcompound|default=None: Fractional Anisotropy Gradient output file
    fa_gradmag_output: generic/file
    # type=file: Fractional Anisotropy Gradient Magnitude output file
    # type=traitcompound|default=None: Fractional Anisotropy Gradient Magnitude output file
    color_fa_output: generic/file
    # type=file: Color Fractional Anisotropy output file
    # type=traitcompound|default=None: Color Fractional Anisotropy output file
    principal_eigenvector_output: generic/file
    # type=file: Principal Eigenvectors Output
    # type=traitcompound|default=None: Principal Eigenvectors Output
    negative_eigenvector_output: generic/file
    # type=file: Negative Eigenvectors Output: create a binary image where if any of the eigen value is below zero, the voxel is set to 1, otherwise 0.
    # type=traitcompound|default=None: Negative Eigenvectors Output: create a binary image where if any of the eigen value is below zero, the voxel is set to 1, otherwise 0.
    frobenius_norm_output: generic/file
    # type=file: Frobenius Norm Output
    # type=traitcompound|default=None: Frobenius Norm Output
    lambda1_output: generic/file
    # type=file: Axial Diffusivity - Lambda 1 (largest eigenvalue) output
    # type=traitcompound|default=None: Axial Diffusivity - Lambda 1 (largest eigenvalue) output
    lambda2_output: generic/file
    # type=file: Lambda 2 (middle eigenvalue) output
    # type=traitcompound|default=None: Lambda 2 (middle eigenvalue) output
    lambda3_output: generic/file
    # type=file: Lambda 3 (smallest eigenvalue) output
    # type=traitcompound|default=None: Lambda 3 (smallest eigenvalue) output
    RD_output: generic/file
    # type=file: RD (Radial Diffusivity 1/2*(lambda2+lambda3)) output
    # type=traitcompound|default=None: RD (Radial Diffusivity 1/2*(lambda2+lambda3)) output
    rot_output: generic/file
    # type=file: Rotated tensor output file.  Must also specify the dof file.
    # type=traitcompound|default=None: Rotated tensor output file.  Must also specify the dof file.
    outmask: generic/file
    # type=file: Name of the masked tensor field.
    # type=traitcompound|default=None: Name of the masked tensor field.
    deformation_output: generic/file
    # type=file: Warped tensor field based on a deformation field.  This option requires the --forward,-F transformation to be specified.
    # type=traitcompound|default=None: Warped tensor field based on a deformation field.  This option requires the --forward,-F transformation to be specified.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dti_image:
    # type=file|default=<undefined>: DTI tensor volume
    fa_output:
    # type=file: Fractional Anisotropy output file
    # type=traitcompound|default=None: Fractional Anisotropy output file
    md_output:
    # type=file: Mean Diffusivity output file
    # type=traitcompound|default=None: Mean Diffusivity output file
    sigma:
    # type=float|default=0.0: Scale of gradients
    fa_gradient_output:
    # type=file: Fractional Anisotropy Gradient output file
    # type=traitcompound|default=None: Fractional Anisotropy Gradient output file
    fa_gradmag_output:
    # type=file: Fractional Anisotropy Gradient Magnitude output file
    # type=traitcompound|default=None: Fractional Anisotropy Gradient Magnitude output file
    color_fa_output:
    # type=file: Color Fractional Anisotropy output file
    # type=traitcompound|default=None: Color Fractional Anisotropy output file
    principal_eigenvector_output:
    # type=file: Principal Eigenvectors Output
    # type=traitcompound|default=None: Principal Eigenvectors Output
    negative_eigenvector_output:
    # type=file: Negative Eigenvectors Output: create a binary image where if any of the eigen value is below zero, the voxel is set to 1, otherwise 0.
    # type=traitcompound|default=None: Negative Eigenvectors Output: create a binary image where if any of the eigen value is below zero, the voxel is set to 1, otherwise 0.
    frobenius_norm_output:
    # type=file: Frobenius Norm Output
    # type=traitcompound|default=None: Frobenius Norm Output
    lambda1_output:
    # type=file: Axial Diffusivity - Lambda 1 (largest eigenvalue) output
    # type=traitcompound|default=None: Axial Diffusivity - Lambda 1 (largest eigenvalue) output
    lambda2_output:
    # type=file: Lambda 2 (middle eigenvalue) output
    # type=traitcompound|default=None: Lambda 2 (middle eigenvalue) output
    lambda3_output:
    # type=file: Lambda 3 (smallest eigenvalue) output
    # type=traitcompound|default=None: Lambda 3 (smallest eigenvalue) output
    RD_output:
    # type=file: RD (Radial Diffusivity 1/2*(lambda2+lambda3)) output
    # type=traitcompound|default=None: RD (Radial Diffusivity 1/2*(lambda2+lambda3)) output
    rot_output:
    # type=file: Rotated tensor output file.  Must also specify the dof file.
    # type=traitcompound|default=None: Rotated tensor output file.  Must also specify the dof file.
    affineitk_file:
    # type=file|default=<undefined>: Transformation file for affine transformation.  ITK format.
    dof_file:
    # type=file|default=<undefined>: Transformation file for affine transformation.  This can be ITK format (or the outdated RView).
    newdof_file:
    # type=file|default=<undefined>: Transformation file for affine transformation.  RView NEW format. (txt file output of dof2mat)
    mask:
    # type=file|default=<undefined>: Mask tensors. Specify --outmask if you want to save the masked tensor field, otherwise the mask is applied just for the current processing 
    outmask:
    # type=file: Name of the masked tensor field.
    # type=traitcompound|default=None: Name of the masked tensor field.
    hField:
    # type=bool|default=False: forward and inverse transformations are h-fields instead of displacement fields
    forward:
    # type=file|default=<undefined>: Forward transformation.  Assumed to be a deformation field in world coordinates, unless the --h-field option is specified.
    deformation_output:
    # type=file: Warped tensor field based on a deformation field.  This option requires the --forward,-F transformation to be specified.
    # type=traitcompound|default=None: Warped tensor field based on a deformation field.  This option requires the --forward,-F transformation to be specified.
    interpolation:
    # type=enum|default='nearestneighbor'|allowed['cubic','linear','nearestneighbor']: Interpolation type (nearestneighbor, linear, cubic)
    reorientation:
    # type=enum|default='fs'|allowed['fs','ppd']: Reorientation type (fs, ppd)
    correction:
    # type=enum|default='none'|allowed['abs','nearest','none','zero']: Correct the tensors if computed tensor is not semi-definite positive
    scalar_float:
    # type=bool|default=False: Write scalar [FA,MD] as unscaled float (with their actual values, otherwise scaled by 10 000).  Also causes FA to be unscaled [0..1].
    DTI_double:
    # type=bool|default=False: Tensor components are saved as doubles (cannot be visualized in Slicer)
    verbose:
    # type=bool|default=False: produce verbose output
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
