# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.tractography.fibertrack.fibertrack' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: FiberTrack (DTIProcess)
# 
#     category: Diffusion.Tractography
# 
#     description: This program implements a simple streamline tractography method based on the principal eigenvector of the tensor field. A fourth order Runge-Kutta integration rule used to advance the streamlines.
#     As a first parameter you have to input the tensor field (with the --input_tensor_file option). Then the region of interest image file is set with the --input_roi_file. Next you want to set the output fiber file name after the --output_fiber_file option.
#     You can specify the label value in the input_roi_file with the --target_label, --source_label and  --fobidden_label options. By default target label is 1, source label is 2 and forbidden label is 0. The source label is where the streamlines are seeded, the target label defines the voxels through which the fibers must pass by to be kept in the final fiber file and the forbidden label defines the voxels where the streamlines are stopped if they pass through it. There is also a --whole_brain option which, if enabled, consider both target and source labels of the roi image as target labels and all the voxels of the image are considered as sources.
#     During the tractography, the --fa_min parameter is used as the minimum value needed at different voxel for the tracking to keep going along a streamline. The --step_size parameter is used for each iteration of the tracking algorithm and defines the length of each step. The --max_angle option defines the maximum angle allowed between two successive segments along the tracked fiber.
# 
#     version: 1.1.0
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Extensions/DTIProcess
# 
#     license: Copyright (c)  Casey Goodlett. All rights reserved.
#       See http://www.ia.unc.edu/dev/Copyright.htm for details.
#          This software is distributed WITHOUT ANY WARRANTY; without even
#          the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#          PURPOSE.  See the above copyright notices for more information.
# 
#     contributor: Casey Goodlett
# 
#     acknowledgements: Hans Johnson(1,3,4); Kent Williams(1); (1=University of Iowa Department of Psychiatry, 3=University of Iowa Department of Biomedical Engineering, 4=University of Iowa Department of Electrical and Computer Engineering) provided conversions to make DTIProcess compatible with Slicer execution, and simplified the stand-alone build requirements by removing the dependencies on boost and a fortran compiler.
#     
task_name: fibertrack
nipype_name: fibertrack
nipype_module: nipype.interfaces.semtools.diffusion.tractography.fibertrack
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_tensor_file: generic/file
    # type=file|default=<undefined>: Tensor Image
    input_roi_file: generic/file
    # type=file|default=<undefined>: The filename of the image which contains the labels used for seeding and constraining the algorithm.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_fiber_file: generic/file
    # type=file: The filename for the fiber file produced by the algorithm. This file must end in a .fib or .vtk extension for ITK spatial object and vtkPolyData formats respectively.
    # type=traitcompound|default=None: The filename for the fiber file produced by the algorithm. This file must end in a .fib or .vtk extension for ITK spatial object and vtkPolyData formats respectively.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_tensor_file:
    # type=file|default=<undefined>: Tensor Image
    input_roi_file:
    # type=file|default=<undefined>: The filename of the image which contains the labels used for seeding and constraining the algorithm.
    output_fiber_file:
    # type=file: The filename for the fiber file produced by the algorithm. This file must end in a .fib or .vtk extension for ITK spatial object and vtkPolyData formats respectively.
    # type=traitcompound|default=None: The filename for the fiber file produced by the algorithm. This file must end in a .fib or .vtk extension for ITK spatial object and vtkPolyData formats respectively.
    source_label:
    # type=int|default=0: The label of voxels in the labelfile to use for seeding tractography. One tract is seeded from the center of each voxel with this label
    target_label:
    # type=int|default=0: The label of voxels in the labelfile used to constrain tractography. Tracts that do not pass through a voxel with this label are rejected. Set this keep all tracts.
    forbidden_label:
    # type=int|default=0: Forbidden label
    whole_brain:
    # type=bool|default=False: If this option is enabled all voxels in the image are used to seed tractography. When this option is enabled both source and target labels function as target labels
    max_angle:
    # type=float|default=0.0: Maximum angle of change in radians
    step_size:
    # type=float|default=0.0: Step size in mm for the tracking algorithm
    min_fa:
    # type=float|default=0.0: The minimum FA threshold to continue tractography
    force:
    # type=bool|default=False: Ignore sanity checks.
    verbose:
    # type=bool|default=False: produce verbose output
    really_verbose:
    # type=bool|default=False: Follow detail of fiber tracking algorithm
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
