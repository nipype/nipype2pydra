# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.gtract.gtractCoregBvalues' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Coregister B-Values
# 
#     category: Diffusion.GTRACT
# 
#     description: This step should be performed after converting DWI scans from DICOM to NRRD format. This program will register all gradients in a NRRD diffusion weighted 4D vector image (moving image) to a specified index in a fixed image. It also supports co-registration with a T2 weighted image or field map in the same plane as the DWI data. The fixed image for the registration should be a b0 image. A mutual information metric cost function is used for the registration because of the differences in signal intensity as a result of the diffusion gradients. The full affine allows the registration procedure to correct for eddy current distortions that may exist in the data. If the eddyCurrentCorrection is enabled, relaxationFactor (0.25) and maximumStepSize (0.1) should be adjusted.
# 
#     version: 4.0.0
# 
#     documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT
# 
#     license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt
# 
#     contributor: This tool was developed by Vincent Magnotta and Greg Harris.
# 
#     acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1
#     
task_name: gtractCoregBvalues
nipype_name: gtractCoregBvalues
nipype_module: nipype.interfaces.semtools.diffusion.gtract
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    movingVolume: generic/file
    # type=file|default=<undefined>: Required: input moving image file name. In order to register gradients within a scan to its first gradient, set the movingVolume and fixedVolume as the same image.
    fixedVolume: generic/file
    # type=file|default=<undefined>: Required: input fixed image file name. It is recommended that this image should either contain or be a b0 image.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputVolume: generic/file
    # type=file: Required: name of output NRRD file containing moving images individually resampled and fit to the specified fixed image index.
    # type=traitcompound|default=None: Required: name of output NRRD file containing moving images individually resampled and fit to the specified fixed image index.
    outputTransform: generic/file
    # type=file: Registration 3D transforms concatenated in a single output file.  There are no tools that can use this, but can be used for debugging purposes.
    # type=traitcompound|default=None: Registration 3D transforms concatenated in a single output file.  There are no tools that can use this, but can be used for debugging purposes.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    movingVolume:
    # type=file|default=<undefined>: Required: input moving image file name. In order to register gradients within a scan to its first gradient, set the movingVolume and fixedVolume as the same image.
    fixedVolume:
    # type=file|default=<undefined>: Required: input fixed image file name. It is recommended that this image should either contain or be a b0 image.
    fixedVolumeIndex:
    # type=int|default=0: Index in the fixed image for registration. It is recommended that this image should be a b0 image.
    outputVolume:
    # type=file: Required: name of output NRRD file containing moving images individually resampled and fit to the specified fixed image index.
    # type=traitcompound|default=None: Required: name of output NRRD file containing moving images individually resampled and fit to the specified fixed image index.
    outputTransform:
    # type=file: Registration 3D transforms concatenated in a single output file.  There are no tools that can use this, but can be used for debugging purposes.
    # type=traitcompound|default=None: Registration 3D transforms concatenated in a single output file.  There are no tools that can use this, but can be used for debugging purposes.
    eddyCurrentCorrection:
    # type=bool|default=False: Flag to perform eddy current correction in addition to motion correction (recommended)
    numberOfIterations:
    # type=int|default=0: Number of iterations in each 3D fit
    numberOfSpatialSamples:
    # type=int|default=0: The number of voxels sampled for mutual information computation.  Increase this for a slower, more careful fit. NOTE that it is suggested to use samplingPercentage instead of this option. However, if set, it overwrites the samplingPercentage option.  
    samplingPercentage:
    # type=float|default=0.0: This is a number in (0.0,1.0] interval that shows the percentage of the input fixed image voxels that are sampled for mutual information computation.  Increase this for a slower, more careful fit. You can also limit the sampling focus with ROI masks and ROIAUTO mask generation. The default is to use approximately 5% of voxels (for backwards compatibility 5% ~= 500000/(256*256*256)). Typical values range from 1% for low detail images to 20% for high detail images.
    relaxationFactor:
    # type=float|default=0.0: Fraction of gradient from Jacobian to attempt to move in each 3D fit step (adjust when eddyCurrentCorrection is enabled; suggested value = 0.25)
    maximumStepSize:
    # type=float|default=0.0: Maximum permitted step size to move in each 3D fit step (adjust when eddyCurrentCorrection is enabled; suggested value = 0.1)
    minimumStepSize:
    # type=float|default=0.0: Minimum required step size to move in each 3D fit step without converging -- decrease this to make the fit more exacting
    spatialScale:
    # type=float|default=0.0: How much to scale up changes in position compared to unit rotational changes in radians -- decrease this to put more rotation in the fit
    registerB0Only:
    # type=bool|default=False: Register the B0 images only
    debugLevel:
    # type=int|default=0: Display debug messages, and produce debug intermediate results.  0=OFF, 1=Minimal, 10=Maximum debugging.
    numberOfThreads:
    # type=int|default=0: Explicitly specify the maximum number of threads to use.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
