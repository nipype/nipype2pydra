# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.segmentation.specialized.BRAINSABC' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Intra-subject registration, bias Correction, and tissue classification (BRAINS)
# 
#     category: Segmentation.Specialized
# 
#     description: Atlas-based tissue segmentation method.  This is an algorithmic extension of work done by XXXX at UNC and Utah XXXX need more description here.
#     
task_name: BRAINSABC
nipype_name: BRAINSABC
nipype_module: nipype.interfaces.semtools.segmentation.specialized
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inputVolumes: generic/file+list-of
    # type=inputmultiobject|default=[]: The list of input image files to be segmented.
    atlasDefinition: generic/file
    # type=file|default=<undefined>: Contains all parameters for Atlas
    restoreState: generic/file
    # type=file|default=<undefined>: The initial state for the registration process
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    saveState: generic/file
    # type=file: (optional) Filename to which save the final state of the registration
    # type=traitcompound|default=None: (optional) Filename to which save the final state of the registration
    atlasToSubjectTransform: generic/file
    # type=file: The transform from atlas to the subject
    # type=traitcompound|default=None: The transform from atlas to the subject
    atlasToSubjectInitialTransform: generic/file
    # type=file: The initial transform from atlas to the subject
    # type=traitcompound|default=None: The initial transform from atlas to the subject
    outputLabels: generic/file
    # type=file: Output Label Image
    # type=traitcompound|default=None: Output Label Image
    outputDirtyLabels: generic/file
    # type=file: Output Dirty Label Image
    # type=traitcompound|default=None: Output Dirty Label Image
    outputDir: generic/directory
    # type=directory: Output directory
    # type=traitcompound|default=None: Output directory
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inputVolumes:
    # type=inputmultiobject|default=[]: The list of input image files to be segmented.
    atlasDefinition:
    # type=file|default=<undefined>: Contains all parameters for Atlas
    restoreState:
    # type=file|default=<undefined>: The initial state for the registration process
    saveState:
    # type=file: (optional) Filename to which save the final state of the registration
    # type=traitcompound|default=None: (optional) Filename to which save the final state of the registration
    inputVolumeTypes:
    # type=inputmultiobject|default=[]: The list of input image types corresponding to the inputVolumes.
    outputDir:
    # type=directory: Output directory
    # type=traitcompound|default=None: Output directory
    atlasToSubjectTransformType:
    # type=enum|default='Identity'|allowed['Affine','BSpline','Identity','Rigid','SyN']:  What type of linear transform type do you want to use to register the atlas to the reference subject image.
    atlasToSubjectTransform:
    # type=file: The transform from atlas to the subject
    # type=traitcompound|default=None: The transform from atlas to the subject
    atlasToSubjectInitialTransform:
    # type=file: The initial transform from atlas to the subject
    # type=traitcompound|default=None: The initial transform from atlas to the subject
    subjectIntermodeTransformType:
    # type=enum|default='Identity'|allowed['Affine','BSpline','Identity','Rigid']:  What type of linear transform type do you want to use to register the atlas to the reference subject image.
    outputVolumes:
    # type=outputmultiobject: Corrected Output Images: should specify the same number of images as inputVolume, if only one element is given, then it is used as a file pattern where %s is replaced by the imageVolumeType, and %d by the index list location.
    # type=traitcompound|default=[None]: Corrected Output Images: should specify the same number of images as inputVolume, if only one element is given, then it is used as a file pattern where %s is replaced by the imageVolumeType, and %d by the index list location.
    outputLabels:
    # type=file: Output Label Image
    # type=traitcompound|default=None: Output Label Image
    outputDirtyLabels:
    # type=file: Output Dirty Label Image
    # type=traitcompound|default=None: Output Dirty Label Image
    posteriorTemplate:
    # type=str|default='': filename template for Posterior output files
    outputFormat:
    # type=enum|default='NIFTI'|allowed['Meta','NIFTI','Nrrd']: Output format
    interpolationMode:
    # type=enum|default='BSpline'|allowed['BSpline','Blackman','Cosine','Hamming','Lanczos','Linear','NearestNeighbor','ResampleInPlace','Welch','WindowedSinc']: Type of interpolation to be used when applying transform to moving volume.  Options are Linear, NearestNeighbor, BSpline, WindowedSinc, or ResampleInPlace.  The ResampleInPlace option will create an image with the same discrete voxel values and will adjust the origin and direction of the physical space interpretation.
    maxIterations:
    # type=int|default=0: Filter iterations
    medianFilterSize:
    # type=inputmultiobject|default=[]: The radius for the optional MedianImageFilter preprocessing in all 3 directions.
    filterIteration:
    # type=int|default=0: Filter iterations
    filterTimeStep:
    # type=float|default=0.0: Filter time step should be less than (PixelSpacing/(1^(DIM+1)), value is set to negative, then allow automatic setting of this value. 
    filterMethod:
    # type=enum|default='None'|allowed['CurvatureFlow','GradientAnisotropicDiffusion','Median','None']: Filter method for preprocessing of registration
    maxBiasDegree:
    # type=int|default=0: Maximum bias degree
    useKNN:
    # type=bool|default=False: Use the KNN stage of estimating posteriors.
    purePlugsThreshold:
    # type=float|default=0.0: If this threshold value is greater than zero, only pure samples are used to compute the distributions in EM classification, and only pure samples are used for KNN training. The default value is set to 0, that means not using pure plugs. However, a value of 0.2 is suggested if you want to activate using pure plugs option.
    numberOfSubSamplesInEachPlugArea:
    # type=inputmultiobject|default=[]: Number of continuous index samples taken at each direction of lattice space for each plug volume.
    atlasWarpingOff:
    # type=bool|default=False: Deformable registration of atlas to subject
    gridSize:
    # type=inputmultiobject|default=[]: Grid size for atlas warping with BSplines
    defaultSuffix:
    # type=str|default='': 
    implicitOutputs:
    # type=outputmultiobject: Outputs to be made available to NiPype. Needed because not all BRAINSABC outputs have command line arguments.
    # type=traitcompound|default=[None]: Outputs to be made available to NiPype. Needed because not all BRAINSABC outputs have command line arguments.
    debuglevel:
    # type=int|default=0: Display debug messages, and produce debug intermediate results.  0=OFF, 1=Minimal, 10=Maximum debugging.
    writeLess:
    # type=bool|default=False: Does not write posteriors and filtered, bias corrected images
    numberOfThreads:
    # type=int|default=0: Explicitly specify the maximum number of threads to use.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
