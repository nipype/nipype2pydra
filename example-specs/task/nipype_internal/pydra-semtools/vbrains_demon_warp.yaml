# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.registration.specialized.VBRAINSDemonWarp' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: Vector Demon Registration (BRAINS)
# 
#     category: Registration.Specialized
# 
#     description: This program finds a deformation field to warp a moving image onto a fixed image.  The images must be of the same signal kind, and contain an image of the same kind of object.  This program uses the Thirion Demons warp software in ITK, the Insight Toolkit.  Additional information is available at: http://www.nitrc.org/projects/brainsdemonwarp.
# 
#     version: 3.0.0
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/BRAINSDemonWarp
# 
#     license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt
# 
#     contributor: This tool was developed by Hans J. Johnson and Greg Harris.
# 
#     acknowledgements: The development of this tool was supported by funding from grants NS050568 and NS40068 from the National Institute of Neurological Disorders and Stroke and grants MH31593, MH40856, from the National Institute of Mental Health.
#     
task_name: VBRAINSDemonWarp
nipype_name: VBRAINSDemonWarp
nipype_module: nipype.interfaces.semtools.registration.specialized
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    movingVolume: generic/file+list-of
    # type=inputmultiobject|default=[]: Required: input moving image
    fixedVolume: generic/file+list-of
    # type=inputmultiobject|default=[]: Required: input fixed (target) image
    initializeWithDisplacementField: generic/file
    # type=file|default=<undefined>: Initial deformation field vector image file name
    initializeWithTransform: generic/file
    # type=file|default=<undefined>: Initial Transform filename
    fixedBinaryVolume: generic/file
    # type=file|default=<undefined>: Mask filename for desired region of interest in the Fixed image.
    movingBinaryVolume: generic/file
    # type=file|default=<undefined>: Mask filename for desired region of interest in the Moving image.
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outputVolume: generic/file
    # type=file: Required: output resampled moving image (will have the same physical space as the fixedVolume).
    # type=traitcompound|default=None: Required: output resampled moving image (will have the same physical space as the fixedVolume).
    outputDisplacementFieldVolume: generic/file
    # type=file: Output deformation field vector image (will have the same physical space as the fixedVolume).
    # type=traitcompound|default=None: Output deformation field vector image (will have the same physical space as the fixedVolume).
    outputCheckerboardVolume: generic/file
    # type=file: Genete a checkerboard image volume between the fixedVolume and the deformed movingVolume.
    # type=traitcompound|default=None: Genete a checkerboard image volume between the fixedVolume and the deformed movingVolume.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    movingVolume:
    # type=inputmultiobject|default=[]: Required: input moving image
    fixedVolume:
    # type=inputmultiobject|default=[]: Required: input fixed (target) image
    inputPixelType:
    # type=enum|default='float'|allowed['float','int','short','uchar','ushort']: Input volumes will be typecast to this format: float|short|ushort|int|uchar
    outputVolume:
    # type=file: Required: output resampled moving image (will have the same physical space as the fixedVolume).
    # type=traitcompound|default=None: Required: output resampled moving image (will have the same physical space as the fixedVolume).
    outputDisplacementFieldVolume:
    # type=file: Output deformation field vector image (will have the same physical space as the fixedVolume).
    # type=traitcompound|default=None: Output deformation field vector image (will have the same physical space as the fixedVolume).
    outputPixelType:
    # type=enum|default='float'|allowed['float','int','short','uchar','ushort']: outputVolume will be typecast to this format: float|short|ushort|int|uchar
    interpolationMode:
    # type=enum|default='NearestNeighbor'|allowed['BSpline','Blackman','Cosine','Hamming','Lanczos','Linear','NearestNeighbor','ResampleInPlace','Welch','WindowedSinc']: Type of interpolation to be used when applying transform to moving volume.  Options are Linear, ResampleInPlace, NearestNeighbor, BSpline, or WindowedSinc
    registrationFilterType:
    # type=enum|default='Demons'|allowed['Demons','Diffeomorphic','FastSymmetricForces','LogDemons','SymmetricLogDemons']: Registration Filter Type: Demons|FastSymmetricForces|Diffeomorphic|LogDemons|SymmetricLogDemons
    smoothDisplacementFieldSigma:
    # type=float|default=0.0: A gaussian smoothing value to be applied to the deformation field at each iteration.
    numberOfPyramidLevels:
    # type=int|default=0: Number of image pyramid levels to use in the multi-resolution registration.
    minimumFixedPyramid:
    # type=inputmultiobject|default=[]: The shrink factor for the first level of the fixed image pyramid. (i.e. start at 1/16 scale, then 1/8, then 1/4, then 1/2, and finally full scale)
    minimumMovingPyramid:
    # type=inputmultiobject|default=[]: The shrink factor for the first level of the moving image pyramid. (i.e. start at 1/16 scale, then 1/8, then 1/4, then 1/2, and finally full scale)
    arrayOfPyramidLevelIterations:
    # type=inputmultiobject|default=[]: The number of iterations for each pyramid level
    histogramMatch:
    # type=bool|default=False: Histogram Match the input images.  This is suitable for images of the same modality that may have different absolute scales, but the same overall intensity profile.
    numberOfHistogramBins:
    # type=int|default=0: The number of histogram levels
    numberOfMatchPoints:
    # type=int|default=0: The number of match points for histrogramMatch
    medianFilterSize:
    # type=inputmultiobject|default=[]: Median filter radius in all 3 directions.  When images have a lot of salt and pepper noise, this step can improve the registration.
    initializeWithDisplacementField:
    # type=file|default=<undefined>: Initial deformation field vector image file name
    initializeWithTransform:
    # type=file|default=<undefined>: Initial Transform filename
    makeBOBF:
    # type=bool|default=False: Flag to make Brain-Only Background-Filled versions of the input and target volumes.
    fixedBinaryVolume:
    # type=file|default=<undefined>: Mask filename for desired region of interest in the Fixed image.
    movingBinaryVolume:
    # type=file|default=<undefined>: Mask filename for desired region of interest in the Moving image.
    lowerThresholdForBOBF:
    # type=int|default=0: Lower threshold for performing BOBF
    upperThresholdForBOBF:
    # type=int|default=0: Upper threshold for performing BOBF
    backgroundFillValue:
    # type=int|default=0: Replacement value to overwrite background when performing BOBF
    seedForBOBF:
    # type=inputmultiobject|default=[]: coordinates in all 3 directions for Seed when performing BOBF
    neighborhoodForBOBF:
    # type=inputmultiobject|default=[]: neighborhood in all 3 directions to be included when performing BOBF
    outputDisplacementFieldPrefix:
    # type=str|default='': Displacement field filename prefix for writing separate x, y, and z component images
    outputCheckerboardVolume:
    # type=file: Genete a checkerboard image volume between the fixedVolume and the deformed movingVolume.
    # type=traitcompound|default=None: Genete a checkerboard image volume between the fixedVolume and the deformed movingVolume.
    checkerboardPatternSubdivisions:
    # type=inputmultiobject|default=[]: Number of Checkerboard subdivisions in all 3 directions
    outputNormalized:
    # type=bool|default=False: Flag to warp and write the normalized images to output.  In normalized images the image values are fit-scaled to be between 0 and the maximum storage type value.
    outputDebug:
    # type=bool|default=False: Flag to write debugging images after each step.
    weightFactors:
    # type=inputmultiobject|default=[]: Weight fatctors for each input images
    gradient_type:
    # type=enum|default='0'|allowed['0','1','2']: Type of gradient used for computing the demons force (0 is symmetrized, 1 is fixed image, 2 is moving image)
    upFieldSmoothing:
    # type=float|default=0.0: Smoothing sigma for the update field at each iteration
    max_step_length:
    # type=float|default=0.0: Maximum length of an update vector (0: no restriction)
    use_vanilla_dem:
    # type=bool|default=False: Run vanilla demons algorithm
    gui:
    # type=bool|default=False: Display intermediate image volumes for debugging
    promptUser:
    # type=bool|default=False: Prompt the user to hit enter each time an image is sent to the DebugImageViewer
    numberOfBCHApproximationTerms:
    # type=int|default=0: Number of terms in the BCH expansion
    numberOfThreads:
    # type=int|default=0: Explicitly specify the maximum number of threads to use.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
