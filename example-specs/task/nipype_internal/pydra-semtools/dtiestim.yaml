# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.semtools.diffusion.diffusion.dtiestim' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# title: DTIEstim (DTIProcess)
# 
#     category: Diffusion.Diffusion Weighted Images
# 
#     description: dtiestim is a tool that takes in a set of DWIs (with --dwi_image option) in nrrd format and estimates a tensor field out of it. The output tensor file name is specified with the --tensor_output option
#     There are several methods to estimate the tensors which you can specify with the option --method lls|wls|nls|ml . Here is a short description of the different methods:
# 
#     lls
#           Linear least squares. Standard estimation technique that recovers the tensor parameters by multiplying the log of the normalized signal intensities by the pseudo-inverse of the gradient matrix. Default option.
# 
#     wls
#         Weighted least squares. This method is similar to the linear least squares method except that the gradient matrix is weighted by the original lls estimate. (See Salvador, R., Pena, A., Menon, D. K., Carpenter, T. A., Pickard, J. D., and Bullmore, E. T. Formal characterization and extension of the linearized diffusion tensor model. Human Brain Mapping 24, 2 (Feb. 2005), 144-155. for more information on this method). This method is recommended for most applications. The weight for each iteration can be specified with the --weight_iterations.  It is not currently the default due to occasional matrix singularities.
#     nls
#         Non-linear least squares. This method does not take the log of the signal and requires an optimization based on levenberg-marquadt to optimize the parameters of the signal. The lls estimate is used as an initialization. For this method the step size can be specified with the --step option.
#     ml
#         Maximum likelihood estimation. This method is experimental and is not currently recommended. For this ml method the sigma can be specified with the option --sigma and the step size can be specified with the --step option.
# 
#     You can set a threshold (--threshold) to have the tensor estimated to only a subset of voxels. All the baseline voxel value higher than the threshold define the voxels where the tensors are computed. If not specified the threshold is calculated using an OTSU threshold on the baseline image.The masked generated by the -t option or by the otsu value can be saved with the --B0_mask_output option.
# 
#     dtiestim also can extract a few scalar images out of the DWI set of images:
# 
#             - the average baseline image (--B0) which is the average of all the B0s.
#             - the IDWI (--idwi)which is the geometric mean of the diffusion images.
# 
#     You can also load a mask if you want to compute the tensors only where the voxels are non-zero (--brain_mask) or a negative mask and the tensors will be estimated where the negative mask has zero values (--bad_region_mask)
# 
#     version: 1.2.0
# 
#     documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Extensions/DTIProcess
# 
#     license: Copyright (c)  Casey Goodlett. All rights reserved.
#       See http://www.ia.unc.edu/dev/Copyright.htm for details.
#          This software is distributed WITHOUT ANY WARRANTY; without even
#          the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#          PURPOSE.  See the above copyright notices for more information.
# 
#     contributor: Casey Goodlett, Francois Budin
# 
#     acknowledgements: Hans Johnson(1,3,4); Kent Williams(1); (1=University of Iowa Department of Psychiatry, 3=University of Iowa Department of Biomedical Engineering, 4=University of Iowa Department of Electrical and Computer Engineering) provided conversions to make DTIProcess compatible with Slicer execution, and simplified the stand-alone build requirements by removing the dependencies on boost and a fortran compiler.
#     
task_name: dtiestim
nipype_name: dtiestim
nipype_module: nipype.interfaces.semtools.diffusion.diffusion
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    dwi_image: generic/file
    # type=file|default=<undefined>: DWI image volume (required)
    brain_mask: generic/file
    # type=file|default=<undefined>: Brain mask.  Image where for every voxel == 0 the tensors are not estimated. Be aware that in addition a threshold based masking will be performed by default. If such an additional threshold masking is NOT desired, then use option -t 0.
    bad_region_mask: generic/file
    # type=file|default=<undefined>: Bad region mask.  Image where for every voxel > 0 the tensors are not estimated
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    tensor_output: generic/file
    # type=file: Tensor OutputImage
    # type=traitcompound|default=None: Tensor OutputImage
    B0: generic/file
    # type=file: Baseline image, average of all baseline images
    # type=traitcompound|default=None: Baseline image, average of all baseline images
    idwi: generic/file
    # type=file: idwi output image. Image with isotropic diffusion-weighted information = geometric mean of diffusion images
    # type=traitcompound|default=None: idwi output image. Image with isotropic diffusion-weighted information = geometric mean of diffusion images
    B0_mask_output: generic/file
    # type=file: B0 mask used for the estimation. B0 thresholded either with the -t option value or the automatic OTSU value
    # type=traitcompound|default=None: B0 mask used for the estimation. B0 thresholded either with the -t option value or the automatic OTSU value
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dwi_image:
    # type=file|default=<undefined>: DWI image volume (required)
    tensor_output:
    # type=file: Tensor OutputImage
    # type=traitcompound|default=None: Tensor OutputImage
    B0:
    # type=file: Baseline image, average of all baseline images
    # type=traitcompound|default=None: Baseline image, average of all baseline images
    idwi:
    # type=file: idwi output image. Image with isotropic diffusion-weighted information = geometric mean of diffusion images
    # type=traitcompound|default=None: idwi output image. Image with isotropic diffusion-weighted information = geometric mean of diffusion images
    B0_mask_output:
    # type=file: B0 mask used for the estimation. B0 thresholded either with the -t option value or the automatic OTSU value
    # type=traitcompound|default=None: B0 mask used for the estimation. B0 thresholded either with the -t option value or the automatic OTSU value
    brain_mask:
    # type=file|default=<undefined>: Brain mask.  Image where for every voxel == 0 the tensors are not estimated. Be aware that in addition a threshold based masking will be performed by default. If such an additional threshold masking is NOT desired, then use option -t 0.
    bad_region_mask:
    # type=file|default=<undefined>: Bad region mask.  Image where for every voxel > 0 the tensors are not estimated
    method:
    # type=enum|default='lls'|allowed['lls','ml','nls','wls']: Estimation method (lls:linear least squares, wls:weighted least squares, nls:non-linear least squares, ml:maximum likelihood)
    correction:
    # type=enum|default='none'|allowed['abs','nearest','none','zero']: Correct the tensors if computed tensor is not semi-definite positive
    threshold:
    # type=int|default=0: Baseline threshold for estimation. If not specified calculated using an OTSU threshold on the baseline image.
    weight_iterations:
    # type=int|default=0: Number of iterations to recaluate weightings from tensor estimate
    step:
    # type=float|default=0.0: Gradient descent step size (for nls and ml methods)
    sigma:
    # type=float|default=0.0: 
    DTI_double:
    # type=bool|default=False: Tensor components are saved as doubles (cannot be visualized in Slicer)
    verbose:
    # type=bool|default=False: produce verbose output
    defaultTensor:
    # type=inputmultiobject|default=[]: Default tensor used if estimated tensor is below a given threshold
    shiftNeg:
    # type=bool|default=False: Shift eigenvalues so all are positive (accounts for bad tensors related to noise or acquisition error). This is the same option as the one available in DWIToDTIEstimation in Slicer (but instead of just adding the minimum eigenvalue to all the eigenvalues if it is smaller than 0, we use a coefficient to have stictly positive eigenvalues
    shiftNegCoeff:
    # type=float|default=0.0: Shift eigenvalues so all are positive (accounts for bad tensors related to noise or acquisition error). Instead of just adding the minimum eigenvalue to all the eigenvalues if it is smaller than 0, we use a coefficient to have stictly positive eigenvalues. Coefficient must be between 1.0 and 1.001 (included).
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
