# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.c3.C3d' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Convert3d is a command-line tool for converting 3D (or 4D) images between
#     common file formats. The tool also includes a growing list of commands for
#     image manipulation, such as thresholding and resampling. The tool can also
#     be used to obtain information about image files. More information on
#     Convert3d can be found at:
#     https://sourceforge.net/p/c3d/git/ci/master/tree/doc/c3d.md
# 
# 
#     Example
#     =======
# 
#     >>> from nipype.interfaces.c3 import C3d
#     >>> c3 = C3d()
#     >>> c3.inputs.in_file = "T1.nii"
#     >>> c3.inputs.pix_type = "short"
#     >>> c3.inputs.out_file = "T1.img"
#     >>> c3.cmdline
#     'c3d T1.nii -type short -o T1.img'
#     >>> c3.inputs.is_4d = True
#     >>> c3.inputs.in_file = "epi.nii"
#     >>> c3.inputs.out_file = "epi.img"
#     >>> c3.cmdline
#     'c4d epi.nii -type short -o epi.img'
#     
task_name: C3d
nipype_name: C3d
nipype_module: nipype.interfaces.c3
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1+list-of
    # type=inputmultiobject|default=[]: Input file (wildcard and multiple are supported).
    out_file: medimage/analyze
    # type=file|default=<undefined>: Output file of last image on the stack.
    out_files: generic/file+list-of
    # type=outputmultiobject: 
    # type=inputmultiobject|default=[]: Write all images on the convert3d stack as multiple files. Supports both list of output files or a pattern for the output filenames (using %d substitution).
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=inputmultiobject|default=[]: Input file (wildcard and multiple are supported).
    out_file:
    # type=file|default=<undefined>: Output file of last image on the stack.
    out_files:
    # type=outputmultiobject: 
    # type=inputmultiobject|default=[]: Write all images on the convert3d stack as multiple files. Supports both list of output files or a pattern for the output filenames (using %d substitution).
    pix_type:
    # type=enum|default='float'|allowed['char','double','float','int','short','uchar','uint','ushort']: Specifies the pixel type for the output image. By default, images are written in floating point (float) format
    scale:
    # type=traitcompound|default=None: Multiplies the intensity of each voxel in the last image on the stack by the given factor.
    shift:
    # type=traitcompound|default=None: Adds the given constant to every voxel.
    interp:
    # type=enum|default='Linear'|allowed['Cubic','Gaussian','Linear','NearestNeighbor','Sinc']: Specifies the interpolation used with -resample and other commands. Default is Linear.
    resample:
    # type=str|default='': Resamples the image, keeping the bounding box the same, but changing the number of voxels in the image. The dimensions can be specified as a percentage, for example to double the number of voxels in each direction. The -interpolation flag affects how sampling is performed.
    smooth:
    # type=str|default='': Applies Gaussian smoothing to the image. The parameter vector specifies the standard deviation of the Gaussian kernel.
    multicomp_split:
    # type=bool|default=False: Enable reading of multi-component images.
    is_4d:
    # type=bool|default=False: Changes command to support 4D file operations (default is false).
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=inputmultiobject|default=[]: Input file (wildcard and multiple are supported).
    pix_type: '"short"'
    # type=enum|default='float'|allowed['char','double','float','int','short','uchar','uint','ushort']: Specifies the pixel type for the output image. By default, images are written in floating point (float) format
    out_file:
    # type=file|default=<undefined>: Output file of last image on the stack.
    is_4d: 'True'
    # type=bool|default=False: Changes command to support 4D file operations (default is false).
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: c4d epi.nii -type short -o epi.img
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    # type=inputmultiobject|default=[]: Input file (wildcard and multiple are supported).
    pix_type: '"short"'
    # type=enum|default='float'|allowed['char','double','float','int','short','uchar','uint','ushort']: Specifies the pixel type for the output image. By default, images are written in floating point (float) format
    out_file:
    # type=file|default=<undefined>: Output file of last image on the stack.
    is_4d: 'True'
    # type=bool|default=False: Changes command to support 4D file operations (default is false).
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
