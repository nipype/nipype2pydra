# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.petpvc.PETPVC' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use PETPVC for partial volume correction of PET images.
# 
#     PETPVC ([1]_, [2]_) is a software from the Nuclear Medicine Department
#     of the UCL University Hospital, London, UK.
# 
#     Examples
#     --------
#     >>> from ..testing import example_data
#     >>> #TODO get data for PETPVC
#     >>> pvc = PETPVC()
#     >>> pvc.inputs.in_file   = 'pet.nii.gz'
#     >>> pvc.inputs.mask_file = 'tissues.nii.gz'
#     >>> pvc.inputs.out_file  = 'pet_pvc_rbv.nii.gz'
#     >>> pvc.inputs.pvc = 'RBV'
#     >>> pvc.inputs.fwhm_x = 2.0
#     >>> pvc.inputs.fwhm_y = 2.0
#     >>> pvc.inputs.fwhm_z = 2.0
#     >>> outs = pvc.run() #doctest: +SKIP
# 
#     References
#     ----------
#     .. [1] K. Erlandsson, I. Buvat, P. H. Pretorius, B. A. Thomas, and B. F. Hutton,
#            "A review of partial volume correction techniques for emission tomography
#            and their applications in neurology, cardiology and oncology," Phys. Med.
#            Biol., vol. 57, no. 21, p. R119, 2012.
#     .. [2] https://github.com/UCL/PETPVC
# 
#     
task_name: PETPVC
nipype_name: PETPVC
nipype_module: nipype.interfaces.petpvc
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: PET image file
    mask_file: generic/file
    # type=file|default=<undefined>: Mask image file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Output file
    # type=file|default=<undefined>: Output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: out_file
    # type=file: Output file
    # type=file|default=<undefined>: Output file
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: PET image file
    out_file:
    # type=file: Output file
    # type=file|default=<undefined>: Output file
    mask_file:
    # type=file|default=<undefined>: Mask image file
    pvc:
    # type=enum|default='GTM'|allowed['GTM','IY','IY+RL','IY+VC','LABBE','LABBE+MTC','LABBE+MTC+RL','LABBE+MTC+VC','LABBE+RBV','LABBE+RBV+RL','LABBE+RBV+VC','MG','MG+RL','MG+VC','MTC','MTC+RL','MTC+VC','RBV','RBV+RL','RBV+VC','RL','VC']: Desired PVC method:      * Geometric transfer matrix -- ``GTM``     * Labbe approach -- ``LABBE``     * Richardson-Lucy -- ``RL``     * Van-Cittert -- ``VC``     * Region-based voxel-wise correction -- ``RBV``     * RBV with Labbe -- ``LABBE+RBV``     * RBV with Van-Cittert -- ``RBV+VC``     * RBV with Richardson-Lucy -- ``RBV+RL``     * RBV with Labbe and Van-Cittert -- ``LABBE+RBV+VC``     * RBV with Labbe and Richardson-Lucy -- ``LABBE+RBV+RL``     * Multi-target correction -- ``MTC``     * MTC with Labbe -- ``LABBE+MTC``     * MTC with Van-Cittert -- ``MTC+VC``     * MTC with Richardson-Lucy -- ``MTC+RL``     * MTC with Labbe and Van-Cittert -- ``LABBE+MTC+VC``     * MTC with Labbe and Richardson-Lucy -- ``LABBE+MTC+RL``     * Iterative Yang -- ``IY``     * Iterative Yang with Van-Cittert -- ``IY+VC``     * Iterative Yang with Richardson-Lucy -- ``IY+RL``     * Muller Gartner -- ``MG``     * Muller Gartner with Van-Cittert -- ``MG+VC``     * Muller Gartner with Richardson-Lucy -- ``MG+RL``  
    fwhm_x:
    # type=float|default=0.0: The full-width at half maximum in mm along x-axis
    fwhm_y:
    # type=float|default=0.0: The full-width at half maximum in mm along y-axis
    fwhm_z:
    # type=float|default=0.0: The full-width at half maximum in mm along z-axis
    debug:
    # type=bool|default=False: Prints debug information
    n_iter:
    # type=int|default=10: Number of iterations
    n_deconv:
    # type=int|default=10: Number of deconvolution iterations
    alpha:
    # type=float|default=1.5: Alpha value
    stop_crit:
    # type=float|default=0.01: Stopping criterion
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
