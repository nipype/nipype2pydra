# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.mipav.developer.MedicAlgorithmMipavReorient' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Reorient a volume to a particular anatomical orientation.
task_name: MedicAlgorithmMipavReorient
nipype_name: MedicAlgorithmMipavReorient
nipype_module: nipype.interfaces.mipav.developer
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inSource: generic/file+list-of
    # type=inputmultiobject|default=[]: Source
    inTemplate: generic/file
    # type=file|default=<undefined>: Template
    outReoriented: generic/file+list-of
    # type=inputmultiobject|default=[]: Reoriented Volume
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inSource:
    # type=inputmultiobject|default=[]: Source
    inTemplate:
    # type=file|default=<undefined>: Template
    inNew:
    # type=enum|default='Dicom axial'|allowed['Dicom axial','Dicom coronal','Dicom sagittal','User defined']: New image orientation
    inUser:
    # type=enum|default='Unknown'|allowed['Patient Anterior to Posterior','Patient Inferior to Superior','Patient Left to Right','Patient Posterior to Anterior','Patient Right to Left','Patient Superior to Inferior','Unknown']: User defined X-axis orientation (image left to right)
    inUser2:
    # type=enum|default='Unknown'|allowed['Patient Anterior to Posterior','Patient Inferior to Superior','Patient Left to Right','Patient Posterior to Anterior','Patient Right to Left','Patient Superior to Inferior','Unknown']: User defined Y-axis orientation (image top to bottom)
    inUser3:
    # type=enum|default='Unknown'|allowed['Patient Anterior to Posterior','Patient Inferior to Superior','Patient Left to Right','Patient Posterior to Anterior','Patient Right to Left','Patient Superior to Inferior','Unknown']: User defined Z-axis orientation (into the screen)
    inUser4:
    # type=enum|default='Axial'|allowed['Axial','Coronal','Sagittal','Unknown']: User defined Image Orientation
    inInterpolation:
    # type=enum|default='Nearest Neighbor'|allowed['Bspline 3rd order','Bspline 4th order','Cubic Lagrangian','Heptic Lagrangian','Nearest Neighbor','Quintic Lagrangian','Trilinear','Windowed Sinc']: Interpolation
    inResolution:
    # type=enum|default='Unchanged'|allowed['Coarsest cubic','Finest cubic','Same as template','Unchanged']: Resolution
    xPrefExt:
    # type=enum|default='nrrd'|allowed['nrrd']: Output File Type
    outReoriented:
    # type=inputmultiobject|default=[]: Reoriented Volume
    'null':
    xDefaultMem:
    # type=int|default=0: Set default maximum heap size
    xMaxProcess:
    # type=int|default=1: Set default maximum number of processes.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
