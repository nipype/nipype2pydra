# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.mipav.developer.MedicAlgorithmLesionToads' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Algorithm for simultaneous brain structures and MS lesion segmentation of MS Brains.
# 
#     The brain segmentation is topologically consistent and the algorithm can use multiple
#     MR sequences as input data.
# 
#     References
#     ----------
#     N. Shiee, P.-L. Bazin, A.Z. Ozturk, P.A. Calabresi, D.S. Reich, D.L. Pham,
#     "A Topology-Preserving Approach to the Segmentation of Brain Images with Multiple Sclerosis",
#     NeuroImage, vol. 49, no. 2, pp. 1524-1535, 2010.
# 
#     
task_name: MedicAlgorithmLesionToads
nipype_name: MedicAlgorithmLesionToads
nipype_module: nipype.interfaces.mipav.developer
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inT1_MPRAGE: generic/file
    # type=file|default=<undefined>: T1_MPRAGE Image
    inT1_SPGR: generic/file
    # type=file|default=<undefined>: T1_SPGR Image
    inFLAIR: generic/file
    # type=file|default=<undefined>: FLAIR Image
    inAtlas2: generic/file
    # type=file|default=<undefined>: Atlas File - With Lesions
    inAtlas3: generic/file
    # type=file|default=<undefined>: Atlas File - No Lesion - T1 and FLAIR
    inAtlas4: generic/file
    # type=file|default=<undefined>: Atlas File - No Lesion - T1 Only
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outHard: generic/file
    # type=file: Hard segmentation
    # type=traitcompound|default=None: Hard segmentation
    outHard2: generic/file
    # type=file: Hard segmentationfrom memberships
    # type=traitcompound|default=None: Hard segmentationfrom memberships
    outInhomogeneity: generic/file
    # type=file: Inhomogeneity Field
    # type=traitcompound|default=None: Inhomogeneity Field
    outMembership: generic/file
    # type=file: Membership Functions
    # type=traitcompound|default=None: Membership Functions
    outLesion: generic/file
    # type=file: Lesion Segmentation
    # type=traitcompound|default=None: Lesion Segmentation
    outSulcal: generic/file
    # type=file: Sulcal CSF Membership
    # type=traitcompound|default=None: Sulcal CSF Membership
    outCortical: generic/file
    # type=file: Cortical GM Membership
    # type=traitcompound|default=None: Cortical GM Membership
    outFilled: generic/file
    # type=file: Filled WM Membership
    # type=traitcompound|default=None: Filled WM Membership
    outWM: generic/file
    # type=file: WM Mask
    # type=traitcompound|default=None: WM Mask
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inT1_MPRAGE:
    # type=file|default=<undefined>: T1_MPRAGE Image
    inT1_SPGR:
    # type=file|default=<undefined>: T1_SPGR Image
    inFLAIR:
    # type=file|default=<undefined>: FLAIR Image
    inAtlas:
    # type=enum|default='With Lesion'|allowed['No Lesion','With Lesion']: Atlas to Use
    inOutput:
    # type=enum|default='hard segmentation'|allowed['cruise inputs','dura removal inputs','hard segmentation','hard segmentation+memberships']: Output images
    inOutput2:
    # type=enum|default='true'|allowed['false','true']: Output the hard classification using maximum membership (not neceesarily topologically correct)
    inCorrect:
    # type=enum|default='true'|allowed['false','true']: Correct MR field inhomogeneity.
    inOutput3:
    # type=enum|default='true'|allowed['false','true']: Output the estimated inhomogeneity field
    inAtlas2:
    # type=file|default=<undefined>: Atlas File - With Lesions
    inAtlas3:
    # type=file|default=<undefined>: Atlas File - No Lesion - T1 and FLAIR
    inAtlas4:
    # type=file|default=<undefined>: Atlas File - No Lesion - T1 Only
    inMaximum:
    # type=int|default=0: Maximum distance from the interventricular WM boundary to downweight the lesion membership to avoid false positives
    inMaximum2:
    # type=int|default=0: Maximum Ventircle Distance
    inMaximum3:
    # type=int|default=0: Maximum InterVentricular Distance
    inInclude:
    # type=enum|default='true'|allowed['false','true']: Include lesion in WM class in hard classification
    inAtlas5:
    # type=float|default=0.0: Controls the effect of the statistical atlas on the segmentation
    inSmooting:
    # type=float|default=0.0: Controls the effect of neighborhood voxels on the membership
    inMaximum4:
    # type=float|default=0.0: Maximum amount of relative change in the energy function considered as the convergence criteria
    inMaximum5:
    # type=int|default=0: Maximum iterations
    inAtlas6:
    # type=enum|default='rigid'|allowed['multi_fully_affine','rigid']: Atlas alignment
    inConnectivity:
    # type=enum|default='(26,6)'|allowed['(18,6)','(26,6)','(6,18)','(6,26)']: Connectivity (foreground,background)
    xPrefExt:
    # type=enum|default='nrrd'|allowed['nrrd']: Output File Type
    outHard:
    # type=file: Hard segmentation
    # type=traitcompound|default=None: Hard segmentation
    outHard2:
    # type=file: Hard segmentationfrom memberships
    # type=traitcompound|default=None: Hard segmentationfrom memberships
    outInhomogeneity:
    # type=file: Inhomogeneity Field
    # type=traitcompound|default=None: Inhomogeneity Field
    outMembership:
    # type=file: Membership Functions
    # type=traitcompound|default=None: Membership Functions
    outLesion:
    # type=file: Lesion Segmentation
    # type=traitcompound|default=None: Lesion Segmentation
    outSulcal:
    # type=file: Sulcal CSF Membership
    # type=traitcompound|default=None: Sulcal CSF Membership
    outCortical:
    # type=file: Cortical GM Membership
    # type=traitcompound|default=None: Cortical GM Membership
    outFilled:
    # type=file: Filled WM Membership
    # type=traitcompound|default=None: Filled WM Membership
    outWM:
    # type=file: WM Mask
    # type=traitcompound|default=None: WM Mask
    'null':
    xDefaultMem:
    # type=int|default=0: Set default maximum heap size
    xMaxProcess:
    # type=int|default=1: Set default maximum number of processes.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
