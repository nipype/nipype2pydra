# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.mipav.developer.JistLaminarVolumetricLayering' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Volumetric Layering.
# 
#     Builds a continuous layering of the cortex following distance-preserving or volume-preserving
#     models of cortical folding.
# 
#     References
#     ----------
#     Waehnert MD, Dinse J, Weiss M, Streicher MN, Waehnert P, Geyer S, Turner R, Bazin PL,
#     Anatomically motivated modeling of cortical laminae, Neuroimage, 2013.
# 
#     
task_name: JistLaminarVolumetricLayering
nipype_name: JistLaminarVolumetricLayering
nipype_module: nipype.interfaces.mipav.developer
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    inInner: generic/file
    # type=file|default=<undefined>: Inner Distance Image (GM/WM boundary)
    inOuter: generic/file
    # type=file|default=<undefined>: Outer Distance Image (CSF/GM boundary)
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    outContinuous: generic/file
    # type=file: Continuous depth measurement
    # type=traitcompound|default=None: Continuous depth measurement
    outDiscrete: generic/file
    # type=file: Discrete sampled layers
    # type=traitcompound|default=None: Discrete sampled layers
    outLayer: generic/file
    # type=file: Layer boundary surfaces
    # type=traitcompound|default=None: Layer boundary surfaces
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    inInner:
    # type=file|default=<undefined>: Inner Distance Image (GM/WM boundary)
    inOuter:
    # type=file|default=<undefined>: Outer Distance Image (CSF/GM boundary)
    inNumber:
    # type=int|default=0: Number of layers
    inMax:
    # type=int|default=0: Max iterations for narrow band evolution
    inMin:
    # type=float|default=0.0: Min change ratio for narrow band evolution
    inLayering:
    # type=enum|default='distance-preserving'|allowed['distance-preserving','volume-preserving']: Layering method
    inLayering2:
    # type=enum|default='outward'|allowed['inward','outward']: Layering direction
    incurvature:
    # type=int|default=0: curvature approximation scale (voxels)
    inratio:
    # type=float|default=0.0: ratio smoothing kernel size (voxels)
    inpresmooth:
    # type=enum|default='true'|allowed['false','true']: pre-smooth cortical surfaces
    inTopology:
    # type=enum|default='26/6'|allowed['18/6','26/6','6/18','6/26','6/6','no','wco','wcs']: Topology
    xPrefExt:
    # type=enum|default='nrrd'|allowed['nrrd']: Output File Type
    outContinuous:
    # type=file: Continuous depth measurement
    # type=traitcompound|default=None: Continuous depth measurement
    outDiscrete:
    # type=file: Discrete sampled layers
    # type=traitcompound|default=None: Discrete sampled layers
    outLayer:
    # type=file: Layer boundary surfaces
    # type=traitcompound|default=None: Layer boundary surfaces
    'null':
    xDefaultMem:
    # type=int|default=0: Set default maximum heap size
    xMaxProcess:
    # type=int|default=1: Set default maximum number of processes.
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
