# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.spm.preprocess.MultiChannelNewSegment' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use spm_preproc8 (New Segment) to separate structural images into
#     different tissue classes. Supports multiple modalities and multichannel inputs.
# 
#     http://www.fil.ion.ucl.ac.uk/spm/doc/manual.pdf#page=45
# 
#     Examples
#     --------
#     >>> import nipype.interfaces.spm as spm
#     >>> seg = spm.MultiChannelNewSegment()
#     >>> seg.inputs.channels = [('structural.nii',(0.0001, 60, (True, True)))]
#     >>> seg.run() # doctest: +SKIP
# 
#     For VBM pre-processing [http://www.fil.ion.ucl.ac.uk/~john/misc/VBMclass10.pdf],
#     TPM.nii should be replaced by /path/to/spm8/toolbox/Seg/TPM.nii
# 
#     >>> seg = MultiChannelNewSegment()
#     >>> channel1= ('T1.nii',(0.0001, 60, (True, True)))
#     >>> channel2= ('T2.nii',(0.0001, 60, (True, True)))
#     >>> seg.inputs.channels = [channel1, channel2]
#     >>> tissue1 = (('TPM.nii', 1), 2, (True,True), (False, False))
#     >>> tissue2 = (('TPM.nii', 2), 2, (True,True), (False, False))
#     >>> tissue3 = (('TPM.nii', 3), 2, (True,False), (False, False))
#     >>> tissue4 = (('TPM.nii', 4), 2, (False,False), (False, False))
#     >>> tissue5 = (('TPM.nii', 5), 2, (False,False), (False, False))
#     >>> seg.inputs.tissues = [tissue1, tissue2, tissue3, tissue4, tissue5]
#     >>> seg.run() # doctest: +SKIP
# 
#     
task_name: MultiChannelNewSegment
nipype_name: MultiChannelNewSegment
nipype_module: nipype.interfaces.spm.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    channels:
    # type=list|default=[]: A list of tuples (one per each channel) with the following fields:             - a list of channel files (only 1rst channel files will be segmented)             - a tuple with the following channel-specific info fields:               - bias reguralisation (0-10)               - FWHM of Gaussian smoothness of bias               - which maps to save (Field, Corrected) - a tuple of two boolean values
    tissues:
    # type=list|default=[]: A list of tuples (one per tissue) with the following fields:             - tissue probability map (4D), 1-based index to frame             - number of gaussians             - which maps to save [Native, DARTEL] - a tuple of two boolean values             - which maps to save [Unmodulated, Modulated] - a tuple of two boolean values
    affine_regularization:
    # type=enum|default='mni'|allowed['eastern','mni','none','subj']: mni, eastern, subj, none 
    warping_regularization:
    # type=traitcompound|default=None: Warping regularization parameter(s). Accepts float or list of floats (the latter is required by SPM12)
    sampling_distance:
    # type=float|default=0.0: Sampling distance on data for parameter estimation
    write_deformation_fields:
    # type=list|default=[]: Which deformation fields to write:[Inverse, Forward]
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
