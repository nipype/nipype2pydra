# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.spm.preprocess.FieldMap' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use the fieldmap toolbox from spm to calculate the voxel displacement map (VDM).
# 
#     http://www.fil.ion.ucl.ac.uk/spm/doc/manual.pdf#page=173
# 
#     .. important::
# 
#         This interface does not deal with real/imag magnitude images nor
#         with the two phase files case.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.spm import FieldMap
#     >>> fm = FieldMap()
#     >>> fm.inputs.phase_file = 'phase.nii'
#     >>> fm.inputs.magnitude_file = 'magnitude.nii'
#     >>> fm.inputs.echo_times = (5.19, 7.65)
#     >>> fm.inputs.blip_direction = 1
#     >>> fm.inputs.total_readout_time = 15.6
#     >>> fm.inputs.epi_file = 'epi.nii'
#     >>> fm.run() # doctest: +SKIP
# 
#     
task_name: FieldMap
nipype_name: FieldMap
nipype_module: nipype.interfaces.spm.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    phase_file: generic/file
    # type=file|default=<undefined>: presubstracted phase file
    magnitude_file: generic/file
    # type=file|default=<undefined>: presubstracted magnitude file
    template: generic/file
    # type=file|default=<undefined>: template image for brain masking
    epi_file: generic/file
    # type=file|default=<undefined>: EPI to unwarp
    anat_file: generic/file
    # type=file|default=<undefined>: anatomical image for comparison
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    vdm: generic/file
    # type=file: voxel difference map
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    jobtype:
    # type=enum|default='calculatevdm'|allowed['calculatevdm']: Must be 'calculatevdm'; to apply VDM, use the ApplyVDM interface.
    phase_file:
    # type=file|default=<undefined>: presubstracted phase file
    magnitude_file:
    # type=file|default=<undefined>: presubstracted magnitude file
    echo_times:
    # type=tuple|default=(0.0, 0.0): short and long echo times
    maskbrain:
    # type=bool|default=True: masking or no masking of the brain
    blip_direction:
    # type=enum|default=1|allowed[-1,1]: polarity of the phase-encode blips
    total_readout_time:
    # type=float|default=0.0: total EPI readout time
    epifm:
    # type=bool|default=False: epi-based field map
    jacobian_modulation:
    # type=bool|default=False: jacobian modulation
    method:
    # type=enum|default='Mark3D'|allowed['Huttonish','Mark2D','Mark3D']: One of: Mark3D, Mark2D, Huttonish
    unwarp_fwhm:
    # type=range|default=10: gaussian smoothing kernel width
    pad:
    # type=range|default=0: padding kernel width
    ws:
    # type=bool|default=True: weighted smoothing
    template:
    # type=file|default=<undefined>: template image for brain masking
    mask_fwhm:
    # type=range|default=5: gaussian smoothing kernel width
    nerode:
    # type=range|default=2: number of erosions
    ndilate:
    # type=range|default=4: number of erosions
    thresh:
    # type=float|default=0.5: threshold used to create brain mask from segmented data
    reg:
    # type=float|default=0.02: regularization value used in the segmentation
    epi_file:
    # type=file|default=<undefined>: EPI to unwarp
    matchvdm:
    # type=bool|default=True: match VDM to EPI
    sessname:
    # type=str|default='_run-': VDM filename extension
    writeunwarped:
    # type=bool|default=False: write unwarped EPI
    anat_file:
    # type=file|default=<undefined>: anatomical image for comparison
    matchanat:
    # type=bool|default=True: match anatomical image to EPI
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
