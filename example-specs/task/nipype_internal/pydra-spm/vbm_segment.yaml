# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.spm.preprocess.VBMSegment' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use VBM8 toolbox to separate structural images into different
#     tissue classes.
# 
#     Example
#     -------
#     >>> import nipype.interfaces.spm as spm
#     >>> seg = spm.VBMSegment()
#     >>> seg.inputs.tissues = 'TPM.nii'
#     >>> seg.inputs.dartel_template = 'Template_1_IXI550_MNI152.nii'
#     >>> seg.inputs.bias_corrected_native = True
#     >>> seg.inputs.gm_native = True
#     >>> seg.inputs.wm_native = True
#     >>> seg.inputs.csf_native = True
#     >>> seg.inputs.pve_label_native = True
#     >>> seg.inputs.deformation_field = (True, False)
#     >>> seg.run() # doctest: +SKIP
#     
task_name: VBMSegment
nipype_name: VBMSegment
nipype_module: nipype.interfaces.spm.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: A list of files to be segmented
    tissues:
    # type=imagefilespm|default=<undefined>: tissue probability map
    gaussians_per_class:
    # type=tuple|default=(2, 2, 2, 3, 4, 2): number of gaussians for each tissue class
    bias_regularization:
    # type=enum|default=0.0001|allowed[0,0.0001,0.001,0.01,0.1,1,10,1e-05]: no(0) - extremely heavy (10)
    bias_fwhm:
    # type=enum|default=60|allowed['Inf',100,110,120,130,30,40,50,60,70,80,90]: FWHM of Gaussian smoothness of bias
    sampling_distance:
    # type=float|default=3: Sampling distance on data for parameter estimation
    warping_regularization:
    # type=float|default=4: Controls balance between parameters and data
    spatial_normalization:
    # type=enum|default='high'|allowed['high','low']: 
    dartel_template:
    # type=imagefilespm|default=<undefined>: 
    use_sanlm_denoising_filter:
    # type=range|default=2: 0=No denoising, 1=denoising,2=denoising multi-threaded
    mrf_weighting:
    # type=float|default=0.15: 
    cleanup_partitions:
    # type=int|default=1: 0=None,1=light,2=thorough
    display_results:
    # type=bool|default=True: 
    gm_native:
    # type=bool|default=False: 
    gm_normalized:
    # type=bool|default=False: 
    gm_modulated_normalized:
    # type=range|default=2: 0=none,1=affine+non-linear(SPM8 default),2=non-linear only
    gm_dartel:
    # type=range|default=0: 0=None,1=rigid(SPM8 default),2=affine
    wm_native:
    # type=bool|default=False: 
    wm_normalized:
    # type=bool|default=False: 
    wm_modulated_normalized:
    # type=range|default=2: 0=none,1=affine+non-linear(SPM8 default),2=non-linear only
    wm_dartel:
    # type=range|default=0: 0=None,1=rigid(SPM8 default),2=affine
    csf_native:
    # type=bool|default=False: 
    csf_normalized:
    # type=bool|default=False: 
    csf_modulated_normalized:
    # type=range|default=2: 0=none,1=affine+non-linear(SPM8 default),2=non-linear only
    csf_dartel:
    # type=range|default=0: 0=None,1=rigid(SPM8 default),2=affine
    bias_corrected_native:
    # type=bool|default=False: 
    bias_corrected_normalized:
    # type=bool|default=True: 
    bias_corrected_affine:
    # type=bool|default=False: 
    pve_label_native:
    # type=bool|default=False: 
    pve_label_normalized:
    # type=bool|default=False: 
    pve_label_dartel:
    # type=range|default=0: 0=None,1=rigid(SPM8 default),2=affine
    jacobian_determinant:
    # type=bool|default=False: 
    deformation_field:
    # type=tuple|default=(0, 0): forward and inverse field
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
