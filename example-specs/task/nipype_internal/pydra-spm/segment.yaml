# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.spm.preprocess.Segment' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# use spm_segment to separate structural images into different
#     tissue classes.
# 
#     http://www.fil.ion.ucl.ac.uk/spm/doc/manual.pdf#page=209
# 
#     Examples
#     --------
#     >>> import nipype.interfaces.spm as spm
#     >>> seg = spm.Segment()
#     >>> seg.inputs.data = 'structural.nii'
#     >>> seg.run() # doctest: +SKIP
# 
#     
task_name: Segment
nipype_name: Segment
nipype_module: nipype.interfaces.spm.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    tissue_prob_maps: generic/file+list-of
    # type=list|default=[]: list of gray, white & csf prob. (opt,)
    mask_image: generic/file
    # type=file|default=<undefined>: Binary image to restrict parameter estimation 
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    native_gm_image: generic/file
    # type=file: native space grey probability map
    normalized_gm_image: generic/file
    # type=file: normalized grey probability map
    modulated_gm_image: generic/file
    # type=file: modulated, normalized grey probability map
    native_wm_image: generic/file
    # type=file: native space white probability map
    normalized_wm_image: generic/file
    # type=file: normalized white probability map
    modulated_wm_image: generic/file
    # type=file: modulated, normalized white probability map
    native_csf_image: generic/file
    # type=file: native space csf probability map
    normalized_csf_image: generic/file
    # type=file: normalized csf probability map
    modulated_csf_image: generic/file
    # type=file: modulated, normalized csf probability map
    modulated_input_image: generic/file
    # type=file: bias-corrected version of input image
    bias_corrected_image: generic/file
    # type=file: bias-corrected version of input image
    transformation_mat: generic/file
    # type=file: Normalization transformation
    inverse_transformation_mat: generic/file
    # type=file: Inverse normalization info
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    data:
    # type=inputmultiobject|default=[]: one scan per subject
    gm_output_type:
    # type=list|default=[]: Options to produce grey matter images: c1*.img, wc1*.img and mwc1*.img.             None: [False,False,False],             Native Space: [False,False,True],             Unmodulated Normalised: [False,True,False],             Modulated Normalised: [True,False,False],             Native + Unmodulated Normalised: [False,True,True],             Native + Modulated Normalised: [True,False,True],             Native + Modulated + Unmodulated: [True,True,True],             Modulated + Unmodulated Normalised: [True,True,False]
    wm_output_type:
    # type=list|default=[]:              Options to produce white matter images: c2*.img, wc2*.img and mwc2*.img.             None: [False,False,False],             Native Space: [False,False,True],             Unmodulated Normalised: [False,True,False],             Modulated Normalised: [True,False,False],             Native + Unmodulated Normalised: [False,True,True],             Native + Modulated Normalised: [True,False,True],             Native + Modulated + Unmodulated: [True,True,True],             Modulated + Unmodulated Normalised: [True,True,False]
    csf_output_type:
    # type=list|default=[]:              Options to produce CSF images: c3*.img, wc3*.img and mwc3*.img.             None: [False,False,False],             Native Space: [False,False,True],             Unmodulated Normalised: [False,True,False],             Modulated Normalised: [True,False,False],             Native + Unmodulated Normalised: [False,True,True],             Native + Modulated Normalised: [True,False,True],             Native + Modulated + Unmodulated: [True,True,True],             Modulated + Unmodulated Normalised: [True,True,False]
    save_bias_corrected:
    # type=bool|default=False: True/False produce a bias corrected image
    clean_masks:
    # type=enum|default='no'|allowed['light','no','thorough']: clean using estimated brain mask ('no','light','thorough')
    tissue_prob_maps:
    # type=list|default=[]: list of gray, white & csf prob. (opt,)
    gaussians_per_class:
    # type=list|default=[]: num Gaussians capture intensity distribution
    affine_regularization:
    # type=enum|default='mni'|allowed['','eastern','mni','none','subj']: Possible options: "mni", "eastern", "subj", "none" (no reguralisation), "" (no affine registration)
    warping_regularization:
    # type=float|default=0.0: Controls balance between parameters and data
    warp_frequency_cutoff:
    # type=float|default=0.0: Cutoff of DCT bases
    bias_regularization:
    # type=enum|default=0|allowed[0,0.0001,0.001,0.01,0.1,1,10,1e-05]: no(0) - extremely heavy (10)
    bias_fwhm:
    # type=enum|default=30|allowed['Inf',100,110,120,130,30,40,50,60,70,80,90]: FWHM of Gaussian smoothness of bias
    sampling_distance:
    # type=float|default=0.0: Sampling distance on data for parameter estimation
    mask_image:
    # type=file|default=<undefined>: Binary image to restrict parameter estimation 
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
