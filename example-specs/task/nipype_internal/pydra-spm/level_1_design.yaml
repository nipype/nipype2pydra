# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.spm.model.Level1Design' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Generate an SPM design matrix
# 
#     http://www.fil.ion.ucl.ac.uk/spm/doc/manual.pdf#page=59
# 
#     Examples
#     --------
# 
#     >>> level1design = Level1Design()
#     >>> level1design.inputs.timing_units = 'secs'
#     >>> level1design.inputs.interscan_interval = 2.5
#     >>> level1design.inputs.bases = {'hrf':{'derivs': [0,0]}}
#     >>> level1design.inputs.session_info = 'session_info.npz'
#     >>> level1design.inputs.flags = {'mthresh': 0.4}
#     >>> level1design.run() # doctest: +SKIP
# 
#     
task_name: Level1Design
nipype_name: Level1Design
nipype_module: nipype.interfaces.spm.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    mask_image: generic/file
    # type=file|default=<undefined>: Image  for  explicitly  masking the analysis
    spm_mat_dir: generic/directory
    # type=directory|default=<undefined>: directory to store SPM.mat file (opt)
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    spm_mat_file: generic/file
    # type=file: SPM mat file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    spm_mat_dir:
    # type=directory|default=<undefined>: directory to store SPM.mat file (opt)
    timing_units:
    # type=enum|default='secs'|allowed['scans','secs']: units for specification of onsets
    interscan_interval:
    # type=float|default=0.0: Interscan interval in secs
    microtime_resolution:
    # type=int|default=0: Number of time-bins per scan in secs (opt)
    microtime_onset:
    # type=float|default=0.0: The onset/time-bin in seconds for alignment (opt)
    session_info:
    # type=any|default=None: Session specific information generated by ``modelgen.SpecifyModel``
    factor_info:
    # type=list|default=[]: Factor specific information file (opt)
    bases:
    # type=dict|default={}: Dictionary names of the basis function to parameters:      * hrf          * derivs -- (2-element list) Model  HRF  Derivatives. No derivatives: [0,0],           Time derivatives : [1,0], Time and Dispersion derivatives: [1,1]      * fourier, fourier_han, gamma, or fir:          * length -- (int) Post-stimulus window length (in seconds)         * order -- (int) Number of basis functions  
    volterra_expansion_order:
    # type=enum|default=1|allowed[1,2]: Model interactions - no:1, yes:2
    global_intensity_normalization:
    # type=enum|default='none'|allowed['none','scaling']: Global intensity normalization - scaling or none
    mask_image:
    # type=file|default=<undefined>: Image  for  explicitly  masking the analysis
    mask_threshold:
    # type=traitcompound|default='-Inf': Thresholding for the mask
    model_serial_correlations:
    # type=enum|default='AR(1)'|allowed['AR(1)','FAST','none']: Model serial correlations AR(1), FAST or none. FAST is available in SPM12
    flags:
    # type=dict|default={}: Additional arguments to the job, e.g., a common SPM operation is to modify the default masking threshold (mthresh)
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
