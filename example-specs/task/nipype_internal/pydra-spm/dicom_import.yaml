# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.spm.utils.DicomImport' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Uses spm to convert DICOM files to nii or img+hdr.
# 
#     Examples
#     --------
# 
#     >>> import nipype.interfaces.spm.utils as spmu
#     >>> di = spmu.DicomImport()
#     >>> di.inputs.in_files = ['functional_1.dcm', 'functional_2.dcm']
#     >>> di.run() # doctest: +SKIP
#     
task_name: DicomImport
nipype_name: DicomImport
nipype_module: nipype.interfaces.spm.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_files: generic/file+list-of
    # type=inputmultiobject|default=[]: dicom files to be converted
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_files:
    # type=inputmultiobject|default=[]: dicom files to be converted
    output_dir_struct:
    # type=enum|default='flat'|allowed['date_time','flat','patid','patid_date','patname','series']: directory structure for the output.
    output_dir:
    # type=str|default='./converted_dicom': output directory.
    format:
    # type=enum|default='nii'|allowed['img','nii']: output format.
    icedims:
    # type=bool|default=False: If image sorting fails, one can try using the additional SIEMENS ICEDims information to create unique filenames. Use this only if there would be multiple volumes with exactly the same file names.
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
