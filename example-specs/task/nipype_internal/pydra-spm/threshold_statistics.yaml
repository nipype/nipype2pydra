# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.spm.model.ThresholdStatistics' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Given height and cluster size threshold calculate theoretical
#     probabilities concerning false positives
# 
#     Examples
#     --------
# 
#     >>> thresh = ThresholdStatistics()
#     >>> thresh.inputs.spm_mat_file = 'SPM.mat'
#     >>> thresh.inputs.stat_image = 'spmT_0001.img'
#     >>> thresh.inputs.contrast_index = 1
#     >>> thresh.inputs.height_threshold = 4.56
#     >>> thresh.run() # doctest: +SKIP
#     
task_name: ThresholdStatistics
nipype_name: ThresholdStatistics
nipype_module: nipype.interfaces.spm.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    spm_mat_file: generic/file
    # type=file|default=<undefined>: absolute path to SPM.mat
    stat_image: generic/file
    # type=file|default=<undefined>: stat image
    paths: generic/directory+list-of
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    spm_mat_file:
    # type=file|default=<undefined>: absolute path to SPM.mat
    stat_image:
    # type=file|default=<undefined>: stat image
    contrast_index:
    # type=int|default=0: which contrast in the SPM.mat to use
    height_threshold:
    # type=float|default=0.0: stat value for initial thresholding (defining clusters)
    extent_threshold:
    # type=int|default=0: Minimum cluster size in voxels
    matlab_cmd:
    # type=str|default='': matlab command to use
    paths:
    # type=inputmultiobject|default=[]: Paths to add to matlabpath
    mfile:
    # type=bool|default=True: Run m-code using m-file
    use_mcr:
    # type=bool|default=False: Run m-code using SPM MCR
    use_v8struct:
    # type=bool|default=True: Generate SPM8 and higher compatible jobs
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
