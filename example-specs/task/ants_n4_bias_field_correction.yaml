# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.segmentation.N4BiasFieldCorrection' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Inputs
# ------
# dimension : enum
#    image dimension (2, 3 or 4)
# input_image : file
#    input for bias correction. Negative values or values close to zero should be processed prior to correction
# mask_image : file
#    image to specify region to perform final bias correction in
# weight_image : file
#    image for relative weighting (e.g. probability map of the white matter) of voxels during the B-spline fitting. 
# output_image : str
#    output file name
# bspline_fitting_distance : float
#    
# bspline_order : int
#    
# shrink_factor : int
#    
# n_iterations : list
#    
# convergence_threshold : float
#    
# save_bias : bool
#    True if the estimated bias should be saved to file.
# bias_image : file
#    Filename for the estimated bias.
# copy_header : bool
#    copy headers of the original image into the output (corrected) file
# rescale_intensities : bool
#    [NOTE: Only ANTs>=2.1.0] At each iteration, a new intensity mapping is calculated and applied but there is nothing which constrains the new intensity range to be within certain values. The result is that the range can "drift" from the original at each iteration. This option rescales to the [min,max] range of the original image intensities within the user-specified mask.
# histogram_sharpening : tuple
#    Three-values tuple of histogram sharpening parameters (FWHM, wienerNose, numberOfHistogramBins). These options describe the histogram sharpening parameters, i.e. the deconvolution step parameters described in the original N3 algorithm. The default values have been shown to work fairly well.
# num_threads : int
#    Number of ITK threads to use
# args : str
#    Additional parameters to the command
# environ : dict
#    Environment variables
#
# Outputs
# -------
# output_image : file
#    Warped image
# bias_image : file
#    Estimated bias
#
# Docs
# ----
# 
#     Bias field correction.
# 
#     N4 is a variant of the popular N3 (nonparameteric nonuniform normalization)
#     retrospective bias correction algorithm. Based on the assumption that the
#     corruption of the low frequency bias field can be modeled as a convolution of
#     the intensity histogram by a Gaussian, the basic algorithmic protocol is to
#     iterate between deconvolving the intensity histogram by a Gaussian, remapping
#     the intensities, and then spatially smoothing this result by a B-spline modeling
#     of the bias field itself. The modifications from and improvements obtained over
#     the original N3 algorithm are described in [Tustison2010]_.
# 
#     .. [Tustison2010] N. Tustison et al.,
#       N4ITK: Improved N3 Bias Correction, IEEE Transactions on Medical Imaging,
#       29(6):1310-1320, June 2010.
# 
#     Examples
#     --------
# 
#     >>> import copy
#     >>> from nipype.interfaces.ants import N4BiasFieldCorrection
#     >>> n4 = N4BiasFieldCorrection()
#     >>> n4.inputs.dimension = 3
#     >>> n4.inputs.input_image = 'structural.nii'
#     >>> n4.inputs.bspline_fitting_distance = 300
#     >>> n4.inputs.shrink_factor = 3
#     >>> n4.inputs.n_iterations = [50,50,30,20]
#     >>> n4.cmdline
#     'N4BiasFieldCorrection --bspline-fitting [ 300 ]
#     -d 3 --input-image structural.nii
#     --convergence [ 50x50x30x20 ] --output structural_corrected.nii
#     --shrink-factor 3'
# 
#     >>> n4_2 = copy.deepcopy(n4)
#     >>> n4_2.inputs.convergence_threshold = 1e-6
#     >>> n4_2.cmdline
#     'N4BiasFieldCorrection --bspline-fitting [ 300 ]
#     -d 3 --input-image structural.nii
#     --convergence [ 50x50x30x20, 1e-06 ] --output structural_corrected.nii
#     --shrink-factor 3'
# 
#     >>> n4_3 = copy.deepcopy(n4_2)
#     >>> n4_3.inputs.bspline_order = 5
#     >>> n4_3.cmdline
#     'N4BiasFieldCorrection --bspline-fitting [ 300, 5 ]
#     -d 3 --input-image structural.nii
#     --convergence [ 50x50x30x20, 1e-06 ] --output structural_corrected.nii
#     --shrink-factor 3'
# 
#     >>> n4_4 = N4BiasFieldCorrection()
#     >>> n4_4.inputs.input_image = 'structural.nii'
#     >>> n4_4.inputs.save_bias = True
#     >>> n4_4.inputs.dimension = 3
#     >>> n4_4.cmdline
#     'N4BiasFieldCorrection -d 3 --input-image structural.nii
#     --output [ structural_corrected.nii, structural_bias.nii ]'
# 
#     >>> n4_5 = N4BiasFieldCorrection()
#     >>> n4_5.inputs.input_image = 'structural.nii'
#     >>> n4_5.inputs.dimension = 3
#     >>> n4_5.inputs.histogram_sharpening = (0.12, 0.02, 200)
#     >>> n4_5.cmdline
#     'N4BiasFieldCorrection -d 3  --histogram-sharpening [0.12,0.02,200]
#     --input-image structural.nii --output structural_corrected.nii'
# 
#     
task_name: n4_bias_field_correction
nipype_name: N4BiasFieldCorrection
nipype_module: nipype.interfaces.ants.segmentation
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_image: medimage/nifti1
    mask_image: medimage/nifti1
    weight_image: medimage/nifti1
    bias_image: medimage/nifti1
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_image: medimage/nifti1
    bias_image: medimage/nifti1
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    input_image:
    bspline_fitting_distance: '300'
    save_bias: 'False'
    copy_header: 'False'
    shrink_factor: '3'
    n_iterations: '[50,50,30,20]'
  imports: &id001
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: copy
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    convergence_threshold: 1e-6
    n_iterations: '[50,50,30,20]'
    input_image:
    save_bias: 'False'
    copy_header: 'False'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    bspline_order: '5'
    bspline_fitting_distance: 10
    save_bias: 'False'
    copy_header: 'False'
    input_image:
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_image:
    save_bias: 'True'
    copy_header: 'False'
    dimension: '3'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_image:
    dimension: '3'
    histogram_sharpening: (0.12, 0.02, 200)
    save_bias: 'False'
    copy_header: 'False'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: N4BiasFieldCorrection --bspline-fitting [ 300 ] -d 3 --input-image structural.nii --convergence [ 50x50x30x20 ] --output structural_corrected.nii --shrink-factor 3
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    input_image:
    bspline_fitting_distance: '300'
    shrink_factor: '3'
    n_iterations: '[50,50,30,20]'
    save_bias: 'False'
    copy_header: 'False'
  imports: *id001
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: N4BiasFieldCorrection --bspline-fitting [ 300 ] -d 3 --input-image structural.nii --convergence [ 50x50x30x20, 1e-06 ] --output structural_corrected.nii --shrink-factor 3
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    convergence_threshold: 1e-6
    n_iterations: '[50,50,30,20]'
    save_bias: 'False'
    copy_header: 'False'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: N4BiasFieldCorrection --bspline-fitting [ 300, 5 ] -d 3 --input-image structural.nii --convergence [ 50x50x30x20, 1e-06 ] --output structural_corrected.nii --shrink-factor 3
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    bspline_order: '5'
    save_bias: 'False'
    copy_header: 'False'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: N4BiasFieldCorrection -d 3 --input-image structural.nii --output [ structural_corrected.nii, structural_bias.nii ]
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    input_image:
    save_bias: 'True'
    copy_header: 'False'
    dimension: '3'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: N4BiasFieldCorrection -d 3 --histogram-sharpening [0.12,0.02,200] --input-image structural.nii --output structural_corrected.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    input_image:
    save_bias: 'False'
    copy_header: 'False'
    dimension: '3'
    histogram_sharpening: (0.12, 0.02, 200)
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
