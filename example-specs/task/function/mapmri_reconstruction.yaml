# This file is used to manually specify the semi-automatic conversion of
# 'qsiprep.interfaces.dipy.MAPMRIReconstruction' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
task_name: MAPMRIReconstruction
nipype_name: MAPMRIReconstruction
nipype_module: qsiprep.interfaces.dipy
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    bval_file: generic/file
    # type=file|default=<undefined>: 
    bvec_file: generic/file
    # type=file|default=<undefined>: 
    dwi_file: generic/file
    # type=file|default=<undefined>: 
    mask_file: generic/file
    # type=file|default=<undefined>: 
    local_bvec_file: generic/file
    # type=file|default=<undefined>: 
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  - ng
  - perng
  - parng
  - extrapolated_dwi
  - extrapolated_bvals
  - extrapolated_bvecs
  - extrapolated_b
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    rtop: generic/file
    # type=file: 
    lapnorm: generic/file
    # type=file: 
    msd: generic/file
    # type=file: 
    qiv: generic/file
    # type=file: 
    rtap: generic/file
    # type=file: 
    rtpp: generic/file
    # type=file: 
    ng: generic/file
    # type=file: 
    perng: generic/file
    # type=file: 
    parng: generic/file
    # type=file: 
    mapmri_coeffs: generic/file
    # type=file: 
    fibgz: generic/file
    # type=file: 
    fod_sh_mif: generic/file
    # type=file: 
    extrapolated_dwi: generic/file
    # type=file: 
    extrapolated_bvals: generic/file
    # type=file: 
    extrapolated_bvecs: generic/file
    # type=file: 
    extrapolated_b: generic/file
    # type=file: 
    odf_amplitudes: generic/file
    # type=file: 
    odf_directions: generic/file
    # type=file: 
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    radial_order:
    # type=int|default=6: 
    laplacian_regularization:
    # type=bool|default=True: 
    laplacian_weighting:
    # type=traitcompound|default=None: 
    positivity_constraint:
    # type=bool|default=False: 
    pos_grid:
    # type=int|default=15: 
    pos_radius:
    # type=traitcompound|default='adaptive': 
    anisotropic_scaling:
    # type=bool|default=True: 
    eigenvalue_threshold:
    # type=float|default=0.0001: 
    bval_threshold:
    # type=float|default=0.0: 
    dti_scale_estimation:
    # type=bool|default=True: 
    static_diffusivity:
    # type=float|default=0.0007: 
    cvxpy_solver:
    # type=str|default='': 
    bval_file:
    # type=file|default=<undefined>: 
    bvec_file:
    # type=file|default=<undefined>: 
    dwi_file:
    # type=file|default=<undefined>: 
    mask_file:
    # type=file|default=<undefined>: 
    local_bvec_file:
    # type=file|default=<undefined>: 
    big_delta:
    # type=traitcompound|default=None: 
    little_delta:
    # type=traitcompound|default=None: 
    b0_threshold:
    # type=cfloat|default=50: 
    write_fibgz:
    # type=bool|default=True: 
    write_mif:
    # type=bool|default=True: 
    extrapolate_scheme:
    # type=enum|default='HCP'|allowed['ABCD','HCP']: 
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
