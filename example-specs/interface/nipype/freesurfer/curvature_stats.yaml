# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.CurvatureStats' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     In its simplest usage, 'mris_curvature_stats' will compute a set
#     of statistics on its input <curvFile>. These statistics are the
#     mean and standard deviation of the particular curvature on the
#     surface, as well as the results from several surface-based
#     integrals.
# 
#     Additionally, 'mris_curvature_stats' can report the max/min
#     curvature values, and compute a simple histogram based on
#     all curvature values.
# 
#     Curvatures can also be normalised and constrained to a given
#     range before computation.
# 
#     Principal curvature (K, H, k1 and k2) calculations on a surface
#     structure can also be performed, as well as several functions
#     derived from k1 and k2.
# 
#     Finally, all output to the console, as well as any new
#     curvatures that result from the above calculations can be
#     saved to a series of text and binary-curvature files.
# 
#     Examples
#     ========
#     >>> from nipype.interfaces.freesurfer import CurvatureStats
#     >>> curvstats = CurvatureStats()
#     >>> curvstats.inputs.hemisphere = 'lh'
#     >>> curvstats.inputs.curvfile1 = 'lh.pial'
#     >>> curvstats.inputs.curvfile2 = 'lh.pial'
#     >>> curvstats.inputs.surface = 'lh.pial'
#     >>> curvstats.inputs.out_file = 'lh.curv.stats'
#     >>> curvstats.inputs.values = True
#     >>> curvstats.inputs.min_max = True
#     >>> curvstats.inputs.write = True
#     >>> curvstats.cmdline
#     'mris_curvature_stats -m -o lh.curv.stats -F pial -G --writeCurvatureFiles subject_id lh pial pial'
#     
task_name: CurvatureStats
nipype_name: CurvatureStats
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    curvfile1: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file for CurvatureStats
    curvfile2: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file for CurvatureStats
    out_file: Path
    # type=file: Output curvature stats file
    # type=file|default=<undefined>: Output curvature stats file
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    surface: medimage-freesurfer/pial
    # type=file|default=<undefined>: Specify surface file for CurvatureStats
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage-freesurfer/stats
    # type=file: Output curvature stats file
    # type=file|default=<undefined>: Output curvature stats file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    surface:
    # type=file|default=<undefined>: Specify surface file for CurvatureStats
    curvfile1:
    # type=file|default=<undefined>: Input file for CurvatureStats
    curvfile2:
    # type=file|default=<undefined>: Input file for CurvatureStats
    hemisphere:
    # type=enum|default='lh'|allowed['lh','rh']: Hemisphere being processed
    subject_id:
    # type=string|default='subject_id': Subject being processed
    out_file:
    # type=file: Output curvature stats file
    # type=file|default=<undefined>: Output curvature stats file
    min_max:
    # type=bool|default=False: Output min / max information for the processed curvature.
    values:
    # type=bool|default=False: Triggers a series of derived curvature values
    write:
    # type=bool|default=False: Write curvature files
    copy_inputs:
    # type=bool|default=False: If running as a node, set this to True.This will copy the input files to the node directory.
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Hemisphere being processed
    curvfile1:
    # type=file|default=<undefined>: Input file for CurvatureStats
    curvfile2:
    # type=file|default=<undefined>: Input file for CurvatureStats
    surface:
    # type=file|default=<undefined>: Specify surface file for CurvatureStats
    out_file: '"lh.curv.stats"'
    # type=file: Output curvature stats file
    # type=file|default=<undefined>: Output curvature stats file
    values: 'True'
    # type=bool|default=False: Triggers a series of derived curvature values
    min_max: 'True'
    # type=bool|default=False: Output min / max information for the processed curvature.
    write: 'True'
    # type=bool|default=False: Write curvature files
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mris_curvature_stats -m -o lh.curv.stats -F pial -G --writeCurvatureFiles subject_id lh pial pial
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Hemisphere being processed
    curvfile1: '"lh.pial"'
    # type=file|default=<undefined>: Input file for CurvatureStats
    curvfile2: '"lh.pial"'
    # type=file|default=<undefined>: Input file for CurvatureStats
    surface: '"lh.pial"'
    # type=file|default=<undefined>: Specify surface file for CurvatureStats
    out_file: '"lh.curv.stats"'
    # type=file: Output curvature stats file
    # type=file|default=<undefined>: Output curvature stats file
    values: 'True'
    # type=bool|default=False: Triggers a series of derived curvature values
    min_max: 'True'
    # type=bool|default=False: Output min / max information for the processed curvature.
    write: 'True'
    # type=bool|default=False: Write curvature files
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
