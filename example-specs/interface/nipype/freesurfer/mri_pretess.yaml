# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.MRIPretess' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Uses Freesurfer's mri_pretess to prepare volumes to be tessellated.
# 
#     Changes white matter (WM) segmentation so that the neighbors of all
#     voxels labeled as WM have a face in common - no edges or corners
#     allowed.
# 
#     Example
#     -------
#     >>> import nipype.interfaces.freesurfer as fs
#     >>> pretess = fs.MRIPretess()
#     >>> pretess.inputs.in_filled = 'wm.mgz'
#     >>> pretess.inputs.in_norm = 'norm.mgz'
#     >>> pretess.inputs.nocorners = True
#     >>> pretess.cmdline
#     'mri_pretess -nocorners wm.mgz wm norm.mgz wm_pretesswm.mgz'
#     >>> pretess.run() # doctest: +SKIP
# 
#     
task_name: MRIPretess
nipype_name: MRIPretess
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_filled: medimage/mgh-gz
    # type=file|default=<undefined>: filled volume, usually wm.mgz
    in_norm: medimage/mgh-gz
    # type=file|default=<undefined>: the normalized, brain-extracted T1w image. Usually norm.mgz
    out_file: Path
    # type=file: output file after mri_pretess
    # type=file|default=<undefined>: the output file after mri_pretess.
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output file after mri_pretess
    # type=file|default=<undefined>: the output file after mri_pretess.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_filled:
    # type=file|default=<undefined>: filled volume, usually wm.mgz
    label:
    # type=traitcompound|default='wm': label to be picked up, can be a Freesurfer's string like 'wm' or a label value (e.g. 127 for rh or 255 for lh)
    in_norm:
    # type=file|default=<undefined>: the normalized, brain-extracted T1w image. Usually norm.mgz
    out_file:
    # type=file: output file after mri_pretess
    # type=file|default=<undefined>: the output file after mri_pretess.
    nocorners:
    # type=bool|default=False: do not remove corner configurations in addition to edge ones.
    keep:
    # type=bool|default=False: keep WM edits
    test:
    # type=bool|default=False: adds a voxel that should be removed by mri_pretess. The value of the voxel is set to that of an ON-edited WM, so it should be kept with -keep. The output will NOT be saved.
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_filled:
    # type=file|default=<undefined>: filled volume, usually wm.mgz
    in_norm:
    # type=file|default=<undefined>: the normalized, brain-extracted T1w image. Usually norm.mgz
    nocorners: 'True'
    # type=bool|default=False: do not remove corner configurations in addition to edge ones.
  imports: &id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: nipype.interfaces.freesurfer as fs
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_pretess -nocorners wm.mgz wm norm.mgz wm_pretesswm.mgz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_filled: '"wm.mgz"'
    # type=file|default=<undefined>: filled volume, usually wm.mgz
    in_norm: '"norm.mgz"'
    # type=file|default=<undefined>: the normalized, brain-extracted T1w image. Usually norm.mgz
    nocorners: 'True'
    # type=bool|default=False: do not remove corner configurations in addition to edge ones.
  imports: *id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
