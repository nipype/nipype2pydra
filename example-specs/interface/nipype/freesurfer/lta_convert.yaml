# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.LTAConvert' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Convert different transformation formats.
#     Some formats may require you to pass an image if the geometry information
#     is missing form the transform file format.
# 
#     For complete details, see the `lta_convert documentation.
#     <https://ftp.nmr.mgh.harvard.edu/pub/docs/html/lta_convert.help.xml.html>`_
#     
task_name: LTAConvert
nipype_name: LTAConvert
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_fsl: generic/file
    # type=file|default=<undefined>: input transform of FSL type
    in_itk: generic/file
    # type=file|default=<undefined>: input transform of ITK type
    in_mni: generic/file
    # type=file|default=<undefined>: input transform of MNI/XFM type
    in_niftyreg: generic/file
    # type=file|default=<undefined>: input transform of Nifty Reg type (inverse RAS2RAS)
    in_reg: generic/file
    # type=file|default=<undefined>: input transform of TK REG type (deprecated format)
    source_file: generic/file
    # type=file|default=<undefined>: 
    target_file: generic/file
    # type=file|default=<undefined>: 
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_fsl: generic/file
    # type=file: output transform in FSL format
    # type=traitcompound|default=None: output transform in FSL format
    out_itk: generic/file
    # type=file: output transform in ITK format
    # type=traitcompound|default=None: output transform in ITK format
    out_lta: generic/file
    # type=file: output linear transform (LTA Freesurfer format)
    # type=traitcompound|default=None: output linear transform (LTA Freesurfer format)
    out_mni: generic/file
    # type=file: output transform in MNI/XFM format
    # type=traitcompound|default=None: output transform in MNI/XFM format
    out_reg: generic/file
    # type=file: output transform in reg dat format
    # type=traitcompound|default=None: output transform in reg dat format
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_lta:
    # type=traitcompound|default=None: input transform of LTA type
    in_fsl:
    # type=file|default=<undefined>: input transform of FSL type
    in_mni:
    # type=file|default=<undefined>: input transform of MNI/XFM type
    in_reg:
    # type=file|default=<undefined>: input transform of TK REG type (deprecated format)
    in_niftyreg:
    # type=file|default=<undefined>: input transform of Nifty Reg type (inverse RAS2RAS)
    in_itk:
    # type=file|default=<undefined>: input transform of ITK type
    out_lta:
    # type=file: output linear transform (LTA Freesurfer format)
    # type=traitcompound|default=None: output linear transform (LTA Freesurfer format)
    out_fsl:
    # type=file: output transform in FSL format
    # type=traitcompound|default=None: output transform in FSL format
    out_mni:
    # type=file: output transform in MNI/XFM format
    # type=traitcompound|default=None: output transform in MNI/XFM format
    out_reg:
    # type=file: output transform in reg dat format
    # type=traitcompound|default=None: output transform in reg dat format
    out_itk:
    # type=file: output transform in ITK format
    # type=traitcompound|default=None: output transform in ITK format
    invert:
    # type=bool|default=False: 
    ltavox2vox:
    # type=bool|default=False: 
    source_file:
    # type=file|default=<undefined>: 
    target_file:
    # type=file|default=<undefined>: 
    target_conform:
    # type=bool|default=False: 
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
