# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.model.Label2Label' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Converts a label in one subject's space to a label
#     in another subject's space using either talairach or spherical
#     as an intermediate registration space.
# 
#     If a source mask is used, then the input label must have been
#     created from a surface (ie, the vertex numbers are valid). The
#     format can be anything supported by mri_convert or curv or paint.
#     Vertices in the source label that do not meet threshold in the
#     mask will be removed from the label.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.freesurfer import Label2Label
#     >>> l2l = Label2Label()
#     >>> l2l.inputs.hemisphere = 'lh'
#     >>> l2l.inputs.subject_id = '10335'
#     >>> l2l.inputs.sphere_reg = 'lh.pial'
#     >>> l2l.inputs.white = 'lh.pial'
#     >>> l2l.inputs.source_subject = 'fsaverage'
#     >>> l2l.inputs.source_label = 'lh-pial.stl'
#     >>> l2l.inputs.source_white = 'lh.pial'
#     >>> l2l.inputs.source_sphere_reg = 'lh.pial'
#     >>> l2l.cmdline
#     'mri_label2label --hemi lh --trglabel lh-pial_converted.stl --regmethod surface --srclabel lh-pial.stl --srcsubject fsaverage --trgsubject 10335'
#     
task_name: Label2Label
nipype_name: Label2Label
nipype_module: nipype.interfaces.freesurfer.model
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: Path
    # type=file: Output label
    # type=file|default=<undefined>: Target label
    source_label: model/stl
    # type=file|default=<undefined>: Source label
    source_sphere_reg: medimage-freesurfer/pial
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
    source_white: medimage-freesurfer/pial
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
    sphere_reg: medimage-freesurfer/pial
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    white: medimage-freesurfer/pial
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: Output label
    # type=file|default=<undefined>: Target label
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    hemisphere:
    # type=enum|default='lh'|allowed['lh','rh']: Input hemisphere
    subject_id:
    # type=string|default='subject_id': Target subject
    sphere_reg:
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
    white:
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
    source_sphere_reg:
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
    source_white:
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
    source_label:
    # type=file|default=<undefined>: Source label
    source_subject:
    # type=string|default='': Source subject name
    out_file:
    # type=file: Output label
    # type=file|default=<undefined>: Target label
    registration_method:
    # type=enum|default='surface'|allowed['surface','volume']: Registration method
    copy_inputs:
    # type=bool|default=False: If running as a node, set this to True.This will copy the input files to the node directory.
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Input hemisphere
    subject_id: '"10335"'
    # type=string|default='subject_id': Target subject
    sphere_reg:
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
    white:
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
    source_subject: '"fsaverage"'
    # type=string|default='': Source subject name
    source_label:
    # type=file|default=<undefined>: Source label
    source_white:
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
    source_sphere_reg:
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_label2label --hemi lh --trglabel lh-pial_converted.stl --regmethod surface --srclabel lh-pial.stl --srcsubject fsaverage --trgsubject 10335
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    hemisphere: '"lh"'
    # type=enum|default='lh'|allowed['lh','rh']: Input hemisphere
    subject_id: '"10335"'
    # type=string|default='subject_id': Target subject
    sphere_reg: '"lh.pial"'
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
    white: '"lh.pial"'
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
    source_subject: '"fsaverage"'
    # type=string|default='': Source subject name
    source_label: '"lh-pial.stl"'
    # type=file|default=<undefined>: Source label
    source_white: '"lh.pial"'
    # type=file|default=<undefined>: Implicit input <hemisphere>.white
    source_sphere_reg: '"lh.pial"'
    # type=file|default=<undefined>: Implicit input <hemisphere>.sphere.reg
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
