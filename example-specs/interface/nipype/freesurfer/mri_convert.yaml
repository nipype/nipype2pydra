# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.preprocess.MRIConvert' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# use fs mri_convert to manipulate files
# 
#     .. note::
#        Adds niigz as an output type option
# 
#     Examples
#     --------
# 
#     >>> mc = MRIConvert()
#     >>> mc.inputs.in_file = 'structural.nii'
#     >>> mc.inputs.out_file = 'outfile.mgz'
#     >>> mc.inputs.out_type = 'mgz'
#     >>> mc.cmdline
#     'mri_convert --out_type mgz --input_volume structural.nii --output_volume outfile.mgz'
# 
#     
task_name: MRIConvert
nipype_name: MRIConvert
nipype_module: nipype.interfaces.freesurfer.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    apply_inv_transform: generic/file
    # type=file|default=<undefined>: apply inverse transformation xfm file
    apply_transform: generic/file
    # type=file|default=<undefined>: apply xfm file
    autoalign_matrix: generic/file
    # type=file|default=<undefined>: text file with autoalign matrix
    color_file: generic/file
    # type=file|default=<undefined>: color file
    in_file: medimage/nifti1
    # type=file|default=<undefined>: File to read/convert
    in_like: generic/file
    # type=file|default=<undefined>: input looks like
    out_file: Path
    # type=outputmultiobject: converted output file
    # type=file|default=<undefined>: output filename or True to generate one
    reslice_like: generic/file
    # type=file|default=<undefined>: reslice output to match file
    sdcm_list: generic/file
    # type=file|default=<undefined>: list of DICOM files for conversion
    status_file: generic/file
    # type=file|default=<undefined>: status file for DICOM conversion
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/mgh-gz+list-of
    # type=outputmultiobject: converted output file
    # type=file|default=<undefined>: output filename or True to generate one
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    out_file: '"outfile.mgz"'
    # type=outputmultiobject: converted output file
    # type=file|default=<undefined>: output filename or True to generate one
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    read_only:
    # type=bool|default=False: read the input volume
    no_write:
    # type=bool|default=False: do not write output
    in_info:
    # type=bool|default=False: display input info
    out_info:
    # type=bool|default=False: display output info
    in_stats:
    # type=bool|default=False: display input stats
    out_stats:
    # type=bool|default=False: display output stats
    in_matrix:
    # type=bool|default=False: display input matrix
    out_matrix:
    # type=bool|default=False: display output matrix
    in_i_size:
    # type=int|default=0: input i size
    in_j_size:
    # type=int|default=0: input j size
    in_k_size:
    # type=int|default=0: input k size
    force_ras:
    # type=bool|default=False: use default when orientation info absent
    in_i_dir:
    # type=tuple|default=(0.0, 0.0, 0.0): <R direction> <A direction> <S direction>
    in_j_dir:
    # type=tuple|default=(0.0, 0.0, 0.0): <R direction> <A direction> <S direction>
    in_k_dir:
    # type=tuple|default=(0.0, 0.0, 0.0): <R direction> <A direction> <S direction>
    in_orientation:
    # type=enum|default='LAI'|allowed['AIL','AIR','ALI','ALS','ARI','ARS','ASL','ASR','IAL','IAR','ILA','ILP','IPL','IPR','IRA','IRP','LAI','LAS','LIA','LIP','LPI','LPS','LSA','LSP','PIL','PIR','PLI','PLS','PRI','PRS','PSL','PSR','RAI','RAS','RIA','RIP','RPI','RPS','RSA','RSP','SAL','SAR','SLA','SLP','SPL','SPR','SRA','SRP']: specify the input orientation
    in_center:
    # type=list|default=[]: <R coordinate> <A coordinate> <S coordinate>
    sphinx:
    # type=bool|default=False: change orientation info to sphinx
    out_i_count:
    # type=int|default=0: some count ?? in i direction
    out_j_count:
    # type=int|default=0: some count ?? in j direction
    out_k_count:
    # type=int|default=0: some count ?? in k direction
    vox_size:
    # type=tuple|default=(0.0, 0.0, 0.0): <size_x> <size_y> <size_z> specify the size (mm) - useful for upsampling or downsampling
    out_i_size:
    # type=int|default=0: output i size
    out_j_size:
    # type=int|default=0: output j size
    out_k_size:
    # type=int|default=0: output k size
    out_i_dir:
    # type=tuple|default=(0.0, 0.0, 0.0): <R direction> <A direction> <S direction>
    out_j_dir:
    # type=tuple|default=(0.0, 0.0, 0.0): <R direction> <A direction> <S direction>
    out_k_dir:
    # type=tuple|default=(0.0, 0.0, 0.0): <R direction> <A direction> <S direction>
    out_orientation:
    # type=enum|default='LAI'|allowed['AIL','AIR','ALI','ALS','ARI','ARS','ASL','ASR','IAL','IAR','ILA','ILP','IPL','IPR','IRA','IRP','LAI','LAS','LIA','LIP','LPI','LPS','LSA','LSP','PIL','PIR','PLI','PLS','PRI','PRS','PSL','PSR','RAI','RAS','RIA','RIP','RPI','RPS','RSA','RSP','SAL','SAR','SLA','SLP','SPL','SPR','SRA','SRP']: specify the output orientation
    out_center:
    # type=tuple|default=(0.0, 0.0, 0.0): <R coordinate> <A coordinate> <S coordinate>
    out_datatype:
    # type=enum|default='uchar'|allowed['float','int','short','uchar']: output data type <uchar|short|int|float>
    resample_type:
    # type=enum|default='interpolate'|allowed['cubic','interpolate','nearest','sinc','weighted']: <interpolate|weighted|nearest|sinc|cubic> (default is interpolate)
    no_scale:
    # type=bool|default=False: dont rescale values for COR
    no_change:
    # type=bool|default=False: don't change type of input to that of template
    tr:
    # type=int|default=0: TR in msec
    te:
    # type=int|default=0: TE in msec
    ti:
    # type=int|default=0: TI in msec (note upper case flag)
    autoalign_matrix:
    # type=file|default=<undefined>: text file with autoalign matrix
    unwarp_gradient:
    # type=bool|default=False: unwarp gradient nonlinearity
    apply_transform:
    # type=file|default=<undefined>: apply xfm file
    apply_inv_transform:
    # type=file|default=<undefined>: apply inverse transformation xfm file
    devolve_transform:
    # type=str|default='': subject id
    crop_center:
    # type=tuple|default=(0, 0, 0): <x> <y> <z> crop to 256 around center (x, y, z)
    crop_size:
    # type=tuple|default=(0, 0, 0): <dx> <dy> <dz> crop to size <dx, dy, dz>
    cut_ends:
    # type=int|default=0: remove ncut slices from the ends
    slice_crop:
    # type=tuple|default=(0, 0): s_start s_end : keep slices s_start to s_end
    slice_reverse:
    # type=bool|default=False: reverse order of slices, update vox2ras
    slice_bias:
    # type=float|default=0.0: apply half-cosine bias field
    fwhm:
    # type=float|default=0.0: smooth input volume by fwhm mm
    in_type:
    # type=enum|default='cor'|allowed['afni','analyze','analyze4d','bfloat','brik','bshort','cor','dicom','gdf','ge','gelx','lx','mgh','mgz','minc','nifti1','nii','niigz','otl','outline','sdt','siemens','siemens_dicom','spm','ximg']: input file type
    out_type:
    # type=enum|default='cor'|allowed['afni','analyze','analyze4d','bfloat','brik','bshort','cor','gdf','mgh','mgz','minc','nifti1','nii','niigz','otl','outline','sdt','spm']: output file type
    ascii:
    # type=bool|default=False: save output as ascii col>row>slice>frame
    reorder:
    # type=tuple|default=(0, 0, 0): olddim1 olddim2 olddim3
    invert_contrast:
    # type=float|default=0.0: threshold for inversting contrast
    in_file:
    # type=file|default=<undefined>: File to read/convert
    out_file:
    # type=outputmultiobject: converted output file
    # type=file|default=<undefined>: output filename or True to generate one
    conform:
    # type=bool|default=False: conform to 1mm voxel size in coronal slice direction with 256^3 or more
    conform_min:
    # type=bool|default=False: conform to smallest size
    conform_size:
    # type=float|default=0.0: conform to size_in_mm
    cw256:
    # type=bool|default=False: confrom to dimensions of 256^3
    parse_only:
    # type=bool|default=False: parse input only
    subject_name:
    # type=str|default='': subject name ???
    reslice_like:
    # type=file|default=<undefined>: reslice output to match file
    template_type:
    # type=enum|default='cor'|allowed['afni','analyze','analyze4d','bfloat','brik','bshort','cor','dicom','gdf','ge','gelx','lx','mgh','mgz','minc','nifti1','nii','niigz','otl','outline','sdt','siemens','siemens_dicom','spm','ximg']: template file type
    split:
    # type=bool|default=False: split output frames into separate output files.
    frame:
    # type=int|default=0: keep only 0-based frame number
    midframe:
    # type=bool|default=False: keep only the middle frame
    skip_n:
    # type=int|default=0: skip the first n frames
    drop_n:
    # type=int|default=0: drop the last n frames
    frame_subsample:
    # type=tuple|default=(0, 0, 0): start delta end : frame subsampling (end = -1 for end)
    in_scale:
    # type=float|default=0.0: input intensity scale factor
    out_scale:
    # type=float|default=0.0: output intensity scale factor
    in_like:
    # type=file|default=<undefined>: input looks like
    fill_parcellation:
    # type=bool|default=False: fill parcellation
    smooth_parcellation:
    # type=bool|default=False: smooth parcellation
    zero_outlines:
    # type=bool|default=False: zero outlines
    color_file:
    # type=file|default=<undefined>: color file
    no_translate:
    # type=bool|default=False: ???
    status_file:
    # type=file|default=<undefined>: status file for DICOM conversion
    sdcm_list:
    # type=file|default=<undefined>: list of DICOM files for conversion
    template_info:
    # type=bool|default=False: dump info about template
    crop_gdf:
    # type=bool|default=False: apply GDF cropping
    zero_ge_z_offset:
    # type=bool|default=False: zero ge z offset ???
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: File to read/convert
    out_file: '"outfile.mgz"'
    # type=outputmultiobject: converted output file
    # type=file|default=<undefined>: output filename or True to generate one
    out_type: '"mgz"'
    # type=enum|default='cor'|allowed['afni','analyze','analyze4d','bfloat','brik','bshort','cor','gdf','mgh','mgz','minc','nifti1','nii','niigz','otl','outline','sdt','spm']: output file type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_convert --out_type mgz --input_volume structural.nii --output_volume outfile.mgz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"structural.nii"'
    # type=file|default=<undefined>: File to read/convert
    out_file: '"outfile.mgz"'
    # type=outputmultiobject: converted output file
    # type=file|default=<undefined>: output filename or True to generate one
    out_type: '"mgz"'
    # type=enum|default='cor'|allowed['afni','analyze','analyze4d','bfloat','brik','bshort','cor','gdf','mgh','mgz','minc','nifti1','nii','niigz','otl','outline','sdt','spm']: output file type
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
