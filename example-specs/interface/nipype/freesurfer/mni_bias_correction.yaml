# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.preprocess.MNIBiasCorrection' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Wrapper for nu_correct, a program from the Montreal Neurological Insitute (MNI)
#     used for correcting intensity non-uniformity (ie, bias fields). You must have the
#     MNI software installed on your system to run this. See [www.bic.mni.mcgill.ca/software/N3]
#     for more info.
# 
#     mri_nu_correct.mni uses float internally instead of uchar. It also rescales the output so
#     that the global mean is the same as that of the input. These two changes are linked and
#     can be turned off with --no-float
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.freesurfer import MNIBiasCorrection
#     >>> correct = MNIBiasCorrection()
#     >>> correct.inputs.in_file = "norm.mgz"
#     >>> correct.inputs.iterations = 6
#     >>> correct.inputs.protocol_iterations = 1000
#     >>> correct.inputs.distance = 50
#     >>> correct.cmdline
#     'mri_nu_correct.mni --distance 50 --i norm.mgz --n 6 --o norm_output.mgz --proto-iters 1000'
# 
#     References
#     ----------
#     [http://freesurfer.net/fswiki/mri_nu_correct.mni]
#     [http://www.bic.mni.mcgill.ca/software/N3]
#     [https://github.com/BIC-MNI/N3]
# 
#     
task_name: MNIBiasCorrection
nipype_name: MNIBiasCorrection
nipype_module: nipype.interfaces.freesurfer.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/mgh-gz
    # type=file|default=<undefined>: input volume. Input can be any format accepted by mri_convert.
    mask: generic/file
    # type=file|default=<undefined>: brainmask volume. Input can be any format accepted by mri_convert.
    out_file: Path
    # type=file: output volume
    # type=file|default=<undefined>: output volume. Output can be any format accepted by mri_convert. If the output format is COR, then the directory must exist.
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    transform: generic/file
    # type=file|default=<undefined>: tal.xfm. Use mri_make_uchar instead of conforming
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output volume
    # type=file|default=<undefined>: output volume. Output can be any format accepted by mri_convert. If the output format is COR, then the directory must exist.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input volume. Input can be any format accepted by mri_convert.
    out_file:
    # type=file: output volume
    # type=file|default=<undefined>: output volume. Output can be any format accepted by mri_convert. If the output format is COR, then the directory must exist.
    iterations:
    # type=int|default=4: Number of iterations to run nu_correct. Default is 4. This is the number of times that nu_correct is repeated (ie, using the output from the previous run as the input for the next). This is different than the -iterations option to nu_correct.
    protocol_iterations:
    # type=int|default=0: Passes Np as argument of the -iterations flag of nu_correct. This is different than the --n flag above. Default is not to pass nu_correct the -iterations flag.
    distance:
    # type=int|default=0: N3 -distance option
    no_rescale:
    # type=bool|default=False: do not rescale so that global mean of output == input global mean
    mask:
    # type=file|default=<undefined>: brainmask volume. Input can be any format accepted by mri_convert.
    transform:
    # type=file|default=<undefined>: tal.xfm. Use mri_make_uchar instead of conforming
    stop:
    # type=float|default=0.0: Convergence threshold below which iteration stops (suggest 0.01 to 0.0001)
    shrink:
    # type=int|default=0: Shrink parameter for finer sampling (default is 4)
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input volume. Input can be any format accepted by mri_convert.
    iterations: '6'
    # type=int|default=4: Number of iterations to run nu_correct. Default is 4. This is the number of times that nu_correct is repeated (ie, using the output from the previous run as the input for the next). This is different than the -iterations option to nu_correct.
    protocol_iterations: '1000'
    # type=int|default=0: Passes Np as argument of the -iterations flag of nu_correct. This is different than the --n flag above. Default is not to pass nu_correct the -iterations flag.
    distance: '50'
    # type=int|default=0: N3 -distance option
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_nu_correct.mni --distance 50 --i norm.mgz --n 6 --o norm_output.mgz --proto-iters 1000
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"norm.mgz"'
    # type=file|default=<undefined>: input volume. Input can be any format accepted by mri_convert.
    iterations: '6'
    # type=int|default=4: Number of iterations to run nu_correct. Default is 4. This is the number of times that nu_correct is repeated (ie, using the output from the previous run as the input for the next). This is different than the -iterations option to nu_correct.
    protocol_iterations: '1000'
    # type=int|default=0: Passes Np as argument of the -iterations flag of nu_correct. This is different than the --n flag above. Default is not to pass nu_correct the -iterations flag.
    distance: '50'
    # type=int|default=0: N3 -distance option
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
