# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.MRIsCalc' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     'mris_calc' is a simple calculator that operates on FreeSurfer
#     curvatures and volumes. In most cases, the calculator functions with
#     three arguments: two inputs and an <ACTION> linking them. Some
#     actions, however, operate with only one input <file1>. In all cases,
#     the first input <file1> is the name of a FreeSurfer curvature overlay
#     (e.g. rh.curv) or volume file (e.g. orig.mgz). For two inputs, the
#     calculator first assumes that the second input is a file. If, however,
#     this second input file doesn't exist, the calculator assumes it refers
#     to a float number, which is then processed according to <ACTION>.Note:
#     <file1> and <file2> should typically be generated on the same subject.
# 
#     Examples
#     ========
#     >>> from nipype.interfaces.freesurfer import MRIsCalc
#     >>> example = MRIsCalc()
#     >>> example.inputs.in_file1 = 'lh.area' # doctest: +SKIP
#     >>> example.inputs.in_file2 = 'lh.area.pial' # doctest: +SKIP
#     >>> example.inputs.action = 'add'
#     >>> example.inputs.out_file = 'area.mid'
#     >>> example.cmdline # doctest: +SKIP
#     'mris_calc -o lh.area.mid lh.area add lh.area.pial'
#     
task_name: MRIsCalc
nipype_name: MRIsCalc
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file1: medimage-freesurfer/area
    # type=file|default=<undefined>: Input file 1
    in_file2: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file 2
    out_file: Path
    # type=file: Output file after calculation
    # type=file|default=<undefined>: Output file after calculation
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: audio/sp-midi
    # type=file: Output file after calculation
    # type=file|default=<undefined>: Output file after calculation
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file1:
    # type=file|default=<undefined>: Input file 1
    action:
    # type=string|default='': Action to perform on input file(s)
    out_file:
    # type=file: Output file after calculation
    # type=file|default=<undefined>: Output file after calculation
    in_file2:
    # type=file|default=<undefined>: Input file 2
    in_float:
    # type=float|default=0.0: Input float
    in_int:
    # type=int|default=0: Input integer
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file1:
    # type=file|default=<undefined>: Input file 1
    in_file2:
    # type=file|default=<undefined>: Input file 2
    action: '"add"'
    # type=string|default='': Action to perform on input file(s)
    out_file: '"area.mid"'
    # type=file: Output file after calculation
    # type=file|default=<undefined>: Output file after calculation
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mris_calc -o lh.area.mid lh.area add lh.area.pial
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file1: '"lh.area" # doctest: +SKIP'
    # type=file|default=<undefined>: Input file 1
    in_file2: '"lh.area.pial" # doctest: +SKIP'
    # type=file|default=<undefined>: Input file 2
    action: '"add"'
    # type=string|default='': Action to perform on input file(s)
    out_file: '"area.mid"'
    # type=file: Output file after calculation
    # type=file|default=<undefined>: Output file after calculation
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
