# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.Tkregister2' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
# 
#     Examples
#     --------
#     Get transform matrix between orig (*tkRAS*) and native (*scannerRAS*)
#     coordinates in Freesurfer. Implements the first step of mapping surfaces
#     to native space in `this guide
#     <http://surfer.nmr.mgh.harvard.edu/fswiki/FsAnat-to-NativeAnat>`__.
# 
#     >>> from nipype.interfaces.freesurfer import Tkregister2
#     >>> tk2 = Tkregister2(reg_file='T1_to_native.dat')
#     >>> tk2.inputs.moving_image = 'T1.mgz'
#     >>> tk2.inputs.target_image = 'structural.nii'
#     >>> tk2.inputs.reg_header = True
#     >>> tk2.cmdline
#     'tkregister2 --mov T1.mgz --noedit --reg T1_to_native.dat --regheader --targ structural.nii'
#     >>> tk2.run() # doctest: +SKIP
# 
#     The example below uses tkregister2 without the manual editing
#     stage to convert FSL-style registration matrix (.mat) to
#     FreeSurfer-style registration matrix (.dat)
# 
#     >>> from nipype.interfaces.freesurfer import Tkregister2
#     >>> tk2 = Tkregister2()
#     >>> tk2.inputs.moving_image = 'epi.nii'
#     >>> tk2.inputs.fsl_in_matrix = 'flirt.mat'
#     >>> tk2.cmdline
#     'tkregister2 --fsl flirt.mat --mov epi.nii --noedit --reg register.dat'
#     >>> tk2.run() # doctest: +SKIP
#     
task_name: Tkregister2
nipype_name: Tkregister2
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fsl_in_matrix: datascience/text-matrix
    # type=file|default=<undefined>: fsl-style registration input matrix
    lta_in: generic/file
    # type=file|default=<undefined>: use a matrix in MNI coordinates as initial registration
    moving_image: medimage/nifti1,medimage/mgh-gz
    # type=file|default=<undefined>: moving volume
    reg_file: Path
    # type=file: freesurfer-style registration file
    # type=file|default='register.dat': freesurfer-style registration file
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    target_image: medimage/nifti1
    # type=file|default=<undefined>: target volume
    xfm: generic/file
    # type=file|default=<undefined>: use a matrix in MNI coordinates as initial registration
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fsl_file: generic/file
    # type=file: FSL-style registration file
    lta_file: generic/file
    # type=file: LTA-style registration file
    reg_file: datascience/dat-file
    # type=file: freesurfer-style registration file
    # type=file|default='register.dat': freesurfer-style registration file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    target_image:
    # type=file|default=<undefined>: target volume
    fstarg:
    # type=bool|default=False: use subject's T1 as reference
    moving_image:
    # type=file|default=<undefined>: moving volume
    fsl_in_matrix:
    # type=file|default=<undefined>: fsl-style registration input matrix
    xfm:
    # type=file|default=<undefined>: use a matrix in MNI coordinates as initial registration
    lta_in:
    # type=file|default=<undefined>: use a matrix in MNI coordinates as initial registration
    invert_lta_in:
    # type=bool|default=False: Invert input LTA before applying
    fsl_out:
    # type=traitcompound|default=None: compute an FSL-compatible resgitration matrix
    lta_out:
    # type=traitcompound|default=None: output registration file (LTA format)
    invert_lta_out:
    # type=bool|default=False: Invert input LTA before applying
    subject_id:
    # type=string|default='': freesurfer subject ID
    noedit:
    # type=bool|default=True: do not open edit window (exit)
    reg_file:
    # type=file: freesurfer-style registration file
    # type=file|default='register.dat': freesurfer-style registration file
    reg_header:
    # type=bool|default=False: compute regstration from headers
    fstal:
    # type=bool|default=False: set mov to be tal and reg to be tal xfm
    movscale:
    # type=float|default=0.0: adjust registration matrix to scale mov
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    moving_image:
    # type=file|default=<undefined>: moving volume
    target_image:
    # type=file|default=<undefined>: target volume
    reg_header: 'True'
    # type=bool|default=False: compute regstration from headers
    reg_file: '"T1_to_native.dat"'
    # type=file: freesurfer-style registration file
    # type=file|default='register.dat': freesurfer-style registration file
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    moving_image:
    # type=file|default=<undefined>: moving volume
    fsl_in_matrix:
    # type=file|default=<undefined>: fsl-style registration input matrix
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: tkregister2 --mov T1.mgz --noedit --reg T1_to_native.dat --regheader --targ structural.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    moving_image: '"T1.mgz"'
    # type=file|default=<undefined>: moving volume
    target_image: '"structural.nii"'
    # type=file|default=<undefined>: target volume
    reg_header: 'True'
    # type=bool|default=False: compute regstration from headers
    reg_file: '"T1_to_native.dat"'
    # type=file: freesurfer-style registration file
    # type=file|default='register.dat': freesurfer-style registration file
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: tkregister2 --fsl flirt.mat --mov epi.nii --noedit --reg register.dat
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    moving_image: '"epi.nii"'
    # type=file|default=<undefined>: moving volume
    fsl_in_matrix: '"flirt.mat"'
    # type=file|default=<undefined>: fsl-style registration input matrix
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
