# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.utils.Aparc2Aseg' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Maps the cortical labels from the automatic cortical parcellation
#     (aparc) to the automatic segmentation volume (aseg). The result can be
#     used as the aseg would. The algorithm is to find each aseg voxel
#     labeled as cortex (3 and 42) and assign it the label of the closest
#     cortical vertex. If the voxel is not in the ribbon (as defined by mri/
#     lh.ribbon and rh.ribbon), then the voxel is marked as unknown (0).
#     This can be turned off with ``--noribbon``. The cortical parcellation is
#     obtained from subject/label/hemi.aparc.annot which should be based on
#     the curvature.buckner40.filled.desikan_killiany.gcs atlas. The aseg is
#     obtained from subject/mri/aseg.mgz and should be based on the
#     RB40_talairach_2005-07-20.gca atlas. If these atlases are used, then the
#     segmentations can be viewed with tkmedit and the
#     FreeSurferColorLUT.txt color table found in ``$FREESURFER_HOME``. These
#     are the default atlases used by ``recon-all``.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.freesurfer import Aparc2Aseg
#     >>> aparc2aseg = Aparc2Aseg()
#     >>> aparc2aseg.inputs.lh_white = 'lh.pial'
#     >>> aparc2aseg.inputs.rh_white = 'lh.pial'
#     >>> aparc2aseg.inputs.lh_pial = 'lh.pial'
#     >>> aparc2aseg.inputs.rh_pial = 'lh.pial'
#     >>> aparc2aseg.inputs.lh_ribbon = 'label.mgz'
#     >>> aparc2aseg.inputs.rh_ribbon = 'label.mgz'
#     >>> aparc2aseg.inputs.ribbon = 'label.mgz'
#     >>> aparc2aseg.inputs.lh_annotation = 'lh.pial'
#     >>> aparc2aseg.inputs.rh_annotation = 'lh.pial'
#     >>> aparc2aseg.inputs.out_file = 'aparc+aseg.mgz'
#     >>> aparc2aseg.inputs.label_wm = True
#     >>> aparc2aseg.inputs.rip_unknown = True
#     >>> aparc2aseg.cmdline # doctest: +SKIP
#     'mri_aparc2aseg --labelwm  --o aparc+aseg.mgz --rip-unknown --s subject_id'
# 
#     
task_name: Aparc2Aseg
nipype_name: Aparc2Aseg
nipype_module: nipype.interfaces.freesurfer.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    aseg: generic/file
    # type=file|default=<undefined>: Input aseg file
    ctxseg: generic/file
    # type=file|default=<undefined>: 
    filled: generic/file
    # type=file|default=<undefined>: Implicit input filled file. Only required with FS v5.3.
    lh_annotation: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file must be <subject_id>/label/lh.aparc.annot
    lh_pial: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.pial
    lh_ribbon: medimage/mgh-gz
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/lh.ribbon.mgz
    lh_white: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.white
    out_file: Path
    # type=file: Output aseg file
    # type=file|default=<undefined>: Full path of file to save the output segmentation in
    rh_annotation: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file must be <subject_id>/label/rh.aparc.annot
    rh_pial: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.pial
    rh_ribbon: medimage/mgh-gz
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/rh.ribbon.mgz
    rh_white: medimage-freesurfer/pial
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.white
    ribbon: medimage/mgh-gz
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/ribbon.mgz
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/mgh-gz
    # type=file: Output aseg file
    # type=file|default=<undefined>: Full path of file to save the output segmentation in
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    subject_id:
    # type=string|default='subject_id': Subject being processed
    out_file:
    # type=file: Output aseg file
    # type=file|default=<undefined>: Full path of file to save the output segmentation in
    lh_white:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.white
    rh_white:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.white
    lh_pial:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.pial
    rh_pial:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.pial
    lh_ribbon:
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/lh.ribbon.mgz
    rh_ribbon:
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/rh.ribbon.mgz
    ribbon:
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/ribbon.mgz
    lh_annotation:
    # type=file|default=<undefined>: Input file must be <subject_id>/label/lh.aparc.annot
    rh_annotation:
    # type=file|default=<undefined>: Input file must be <subject_id>/label/rh.aparc.annot
    filled:
    # type=file|default=<undefined>: Implicit input filled file. Only required with FS v5.3.
    aseg:
    # type=file|default=<undefined>: Input aseg file
    volmask:
    # type=bool|default=False: Volume mask flag
    ctxseg:
    # type=file|default=<undefined>: 
    label_wm:
    # type=bool|default=False: For each voxel labeled as white matter in the aseg, re-assign its label to be that of the closest cortical point if its distance is less than dmaxctx.
    hypo_wm:
    # type=bool|default=False: Label hypointensities as WM
    rip_unknown:
    # type=bool|default=False: Do not label WM based on 'unknown' corical label
    a2009s:
    # type=bool|default=False: Using the a2009s atlas
    copy_inputs:
    # type=bool|default=False: If running as a node, set this to True.This will copy the input files to the node directory.
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    lh_white:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.white
    rh_white:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.white
    lh_pial:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.pial
    rh_pial:
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.pial
    lh_ribbon:
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/lh.ribbon.mgz
    rh_ribbon:
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/rh.ribbon.mgz
    ribbon:
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/ribbon.mgz
    lh_annotation:
    # type=file|default=<undefined>: Input file must be <subject_id>/label/lh.aparc.annot
    rh_annotation:
    # type=file|default=<undefined>: Input file must be <subject_id>/label/rh.aparc.annot
    out_file: '"aparc+aseg.mgz"'
    # type=file: Output aseg file
    # type=file|default=<undefined>: Full path of file to save the output segmentation in
    label_wm: 'True'
    # type=bool|default=False: For each voxel labeled as white matter in the aseg, re-assign its label to be that of the closest cortical point if its distance is less than dmaxctx.
    rip_unknown: 'True'
    # type=bool|default=False: Do not label WM based on 'unknown' corical label
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_aparc2aseg --labelwm --o aparc+aseg.mgz --rip-unknown --s subject_id
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    lh_white: '"lh.pial"'
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.white
    rh_white: '"lh.pial"'
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.white
    lh_pial: '"lh.pial"'
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/lh.pial
    rh_pial: '"lh.pial"'
    # type=file|default=<undefined>: Input file must be <subject_id>/surf/rh.pial
    lh_ribbon: '"label.mgz"'
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/lh.ribbon.mgz
    rh_ribbon: '"label.mgz"'
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/rh.ribbon.mgz
    ribbon: '"label.mgz"'
    # type=file|default=<undefined>: Input file must be <subject_id>/mri/ribbon.mgz
    lh_annotation: '"lh.pial"'
    # type=file|default=<undefined>: Input file must be <subject_id>/label/lh.aparc.annot
    rh_annotation: '"lh.pial"'
    # type=file|default=<undefined>: Input file must be <subject_id>/label/rh.aparc.annot
    out_file: '"aparc+aseg.mgz"'
    # type=file: Output aseg file
    # type=file|default=<undefined>: Full path of file to save the output segmentation in
    label_wm: 'True'
    # type=bool|default=False: For each voxel labeled as white matter in the aseg, re-assign its label to be that of the closest cortical point if its distance is less than dmaxctx.
    rip_unknown: 'True'
    # type=bool|default=False: Do not label WM based on 'unknown' corical label
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
