# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.freesurfer.preprocess.CALabel' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Label subcortical structures based in GCA model.
# 
#     See Also
#     --------
#     For complete details, see the `FS Documentation
#     <http://surfer.nmr.mgh.harvard.edu/fswiki/mri_ca_label>`__
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import freesurfer
#     >>> ca_label = freesurfer.CALabel()
#     >>> ca_label.inputs.in_file = "norm.mgz"
#     >>> ca_label.inputs.out_file = "out.mgz"
#     >>> ca_label.inputs.transform = "trans.mat"
#     >>> ca_label.inputs.template = "Template_6.nii" # in practice use .gcs extension
#     >>> ca_label.cmdline
#     'mri_ca_label norm.mgz trans.mat Template_6.nii out.mgz'
# 
#     
task_name: CALabel
nipype_name: CALabel
nipype_module: nipype.interfaces.freesurfer.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    aseg: generic/file
    # type=file|default=<undefined>: Undocumented flag. Autorecon3 uses ../mri/aseg.presurf.mgz as input file
    in_file: medimage/mgh-gz
    # type=file|default=<undefined>: Input volume for CALabel
    in_vol: generic/file
    # type=file|default=<undefined>: set input volume
    intensities: generic/file
    # type=file|default=<undefined>: input label intensities file(used in longitudinal processing)
    label: generic/file
    # type=file|default=<undefined>: Undocumented flag. Autorecon3 uses ../label/{hemisphere}.cortex.label as input file
    out_file: Path
    # type=file: Output volume from CALabel
    # type=file|default=<undefined>: Output file for CALabel
    subjects_dir: generic/directory
    # type=directory|default=<undefined>: subjects directory
    template: medimage/nifti1
    # type=file|default=<undefined>: Input template for CALabel
    transform: datascience/text-matrix
    # type=file|default=<undefined>: Input transform for CALabel
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/mgh-gz
    # type=file: Output volume from CALabel
    # type=file|default=<undefined>: Output file for CALabel
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input volume for CALabel
    out_file:
    # type=file: Output volume from CALabel
    # type=file|default=<undefined>: Output file for CALabel
    transform:
    # type=file|default=<undefined>: Input transform for CALabel
    template:
    # type=file|default=<undefined>: Input template for CALabel
    in_vol:
    # type=file|default=<undefined>: set input volume
    intensities:
    # type=file|default=<undefined>: input label intensities file(used in longitudinal processing)
    no_big_ventricles:
    # type=bool|default=False: No big ventricles
    align:
    # type=bool|default=False: Align CALabel
    prior:
    # type=float|default=0.0: Prior for CALabel
    relabel_unlikely:
    # type=tuple|default=(0, 0.0): Reclassify voxels at least some std devs from the mean using some size Gaussian window
    label:
    # type=file|default=<undefined>: Undocumented flag. Autorecon3 uses ../label/{hemisphere}.cortex.label as input file
    aseg:
    # type=file|default=<undefined>: Undocumented flag. Autorecon3 uses ../mri/aseg.presurf.mgz as input file
    num_threads:
    # type=int|default=0: allows for specifying more threads
    subjects_dir:
    # type=directory|default=<undefined>: subjects directory
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: Input volume for CALabel
    out_file: '"out.mgz"'
    # type=file: Output volume from CALabel
    # type=file|default=<undefined>: Output file for CALabel
    transform:
    # type=file|default=<undefined>: Input transform for CALabel
    template:
    # type=file|default=<undefined>: Input template for CALabel
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: mri_ca_label norm.mgz trans.mat Template_6.nii out.mgz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"norm.mgz"'
    # type=file|default=<undefined>: Input volume for CALabel
    out_file: '"out.mgz"'
    # type=file: Output volume from CALabel
    # type=file|default=<undefined>: Output file for CALabel
    transform: '"trans.mat"'
    # type=file|default=<undefined>: Input transform for CALabel
    template: '"Template_6.nii" # in practice use .gcs extension'
    # type=file|default=<undefined>: Input template for CALabel
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
