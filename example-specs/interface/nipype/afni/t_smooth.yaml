# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.preprocess.TSmooth' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Smooths each voxel time series in a 3D+time dataset and produces
#     as output a new 3D+time dataset (e.g., lowpass filter in time).
# 
#     For complete details, see the `3dTsmooth Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dTSmooth.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> from nipype.testing import  example_data
#     >>> smooth = afni.TSmooth()
#     >>> smooth.inputs.in_file = 'functional.nii'
#     >>> smooth.inputs.adaptive = 5
#     >>> smooth.cmdline
#     '3dTsmooth -adaptive 5 -prefix functional_smooth functional.nii'
#     >>> res = smooth.run()  # doctest: +SKIP
# 
#     
task_name: TSmooth
nipype_name: TSmooth
nipype_module: nipype.interfaces.afni.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    custom: generic/file
    # type=file|default=<undefined>: odd # of coefficients must be in a single column in ASCII file
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input file to 3dTSmooth
    out_file: Path
    # type=file: output file
    # type=file|default=<undefined>: output file from 3dTSmooth
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output file
    # type=file|default=<undefined>: output file from 3dTSmooth
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dTSmooth
    out_file:
    # type=file: output file
    # type=file|default=<undefined>: output file from 3dTSmooth
    datum:
    # type=str|default='': Sets the data type of the output dataset
    lin:
    # type=bool|default=False: 3 point linear filter: :math:`0.15\,a + 0.70\,b + 0.15\,c` [This is the default smoother]
    med:
    # type=bool|default=False: 3 point median filter: median(a,b,c)
    osf:
    # type=bool|default=False: 3 point order statistics filter::math:`0.15\,min(a,b,c) + 0.70\,median(a,b,c) + 0.15\,max(a,b,c)`
    lin3:
    # type=int|default=0: 3 point linear filter: :math:`0.5\,(1-m)\,a + m\,b + 0.5\,(1-m)\,c`. Here, 'm' is a number strictly between 0 and 1.
    hamming:
    # type=int|default=0: Use N point Hamming windows. (N must be odd and bigger than 1.)
    blackman:
    # type=int|default=0: Use N point Blackman windows. (N must be odd and bigger than 1.)
    custom:
    # type=file|default=<undefined>: odd # of coefficients must be in a single column in ASCII file
    adaptive:
    # type=int|default=0: use adaptive mean filtering of width N (where N must be odd and bigger than 3).
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dTSmooth
    adaptive: '5'
    # type=int|default=0: use adaptive mean filtering of width N (where N must be odd and bigger than 3).
  imports: &id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  - module: nipype.testing
    name: ' example_data'
    alias:
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dTsmooth -adaptive 5 -prefix functional_smooth functional.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"functional.nii"'
    # type=file|default=<undefined>: input file to 3dTSmooth
    adaptive: '5'
    # type=int|default=0: use adaptive mean filtering of width N (where N must be odd and bigger than 3).
  imports: *id001
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
