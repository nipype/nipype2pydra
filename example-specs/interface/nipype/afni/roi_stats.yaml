# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.preprocess.ROIStats' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Display statistics over masked regions
# 
#     For complete details, see the `3dROIstats Documentation
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dROIstats.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> roistats = afni.ROIStats()
#     >>> roistats.inputs.in_file = 'functional.nii'
#     >>> roistats.inputs.mask_file = 'skeleton_mask.nii.gz'
#     >>> roistats.inputs.stat = ['mean', 'median', 'voxels']
#     >>> roistats.inputs.nomeanout = True
#     >>> roistats.cmdline
#     '3dROIstats -mask skeleton_mask.nii.gz -nomeanout -nzmean -nzmedian -nzvoxels functional.nii > functional_roistat.1D'
#     >>> res = roistats.run()  # doctest: +SKIP
# 
#     
task_name: ROIStats
nipype_name: ROIStats
nipype_module: nipype.interfaces.afni.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input dataset
    mask: generic/file
    # type=file|default=<undefined>: input mask
    mask_file: medimage/nifti-gz
    # type=file|default=<undefined>: input mask
    out_file: Path
    # type=file: output tab-separated values file
    # type=file|default=<undefined>: output file
    roisel: generic/file
    # type=file|default=<undefined>: Only considers ROIs denoted by values found in the specified file. Note that the order of the ROIs as specified in the file is not preserved. So an SEL.1D of '2 8 20' produces the same output as '8 20 2'
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    # type=file: output tab-separated values file
    # type=file|default=<undefined>: output file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset
    mask:
    # type=file|default=<undefined>: input mask
    mask_file:
    # type=file|default=<undefined>: input mask
    mask_f2short:
    # type=bool|default=False: Tells the program to convert a float mask to short integers, by simple rounding.
    num_roi:
    # type=int|default=0: Forces the assumption that the mask dataset's ROIs are denoted by 1 to n inclusive.  Normally, the program figures out the ROIs on its own.  This option is useful if a) you are certain that the mask dataset has no values outside the range [0 n], b) there may be some ROIs missing between [1 n] in the mask data-set and c) you want those columns in the output any-way so the output lines up with the output from other invocations of 3dROIstats.
    zerofill:
    # type=str|default='': For ROI labels not found, use the provided string instead of a '0' in the output file. Only active if `num_roi` is enabled.
    roisel:
    # type=file|default=<undefined>: Only considers ROIs denoted by values found in the specified file. Note that the order of the ROIs as specified in the file is not preserved. So an SEL.1D of '2 8 20' produces the same output as '8 20 2'
    debug:
    # type=bool|default=False: print debug information
    quiet:
    # type=bool|default=False: execute quietly
    nomeanout:
    # type=bool|default=False: Do not include the (zero-inclusive) mean among computed stats
    nobriklab:
    # type=bool|default=False: Do not print the sub-brick label next to its index
    format1D:
    # type=bool|default=False: Output results in a 1D format that includes commented labels
    format1DR:
    # type=bool|default=False: Output results in a 1D format that includes uncommented labels. May not work optimally with typical 1D functions, but is useful for R functions.
    stat:
    # type=inputmultiobject|default=[]: Statistics to compute. Options include:   * mean       =   Compute the mean using only non_zero voxels.                   Implies the opposite for the mean computed                   by default.  * median     =   Compute the median of nonzero voxels  * mode       =   Compute the mode of nonzero voxels.                   (integral valued sets only)  * minmax     =   Compute the min/max of nonzero voxels  * sum        =   Compute the sum using only nonzero voxels.  * voxels     =   Compute the number of nonzero voxels  * sigma      =   Compute the standard deviation of nonzero                   voxels  Statistics that include zero-valued voxels:   * zerominmax =   Compute the min/max of all voxels.  * zerosigma  =   Compute the standard deviation of all                   voxels.  * zeromedian =   Compute the median of all voxels.  * zeromode   =   Compute the mode of all voxels.  * summary    =   Only output a summary line with the grand                   mean across all briks in the input dataset.                   This option cannot be used with nomeanout.  More that one option can be specified.
    out_file:
    # type=file: output tab-separated values file
    # type=file|default=<undefined>: output file
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input dataset
    mask_file:
    # type=file|default=<undefined>: input mask
    stat: '["mean", "median", "voxels"]'
    # type=inputmultiobject|default=[]: Statistics to compute. Options include:   * mean       =   Compute the mean using only non_zero voxels.                   Implies the opposite for the mean computed                   by default.  * median     =   Compute the median of nonzero voxels  * mode       =   Compute the mode of nonzero voxels.                   (integral valued sets only)  * minmax     =   Compute the min/max of nonzero voxels  * sum        =   Compute the sum using only nonzero voxels.  * voxels     =   Compute the number of nonzero voxels  * sigma      =   Compute the standard deviation of nonzero                   voxels  Statistics that include zero-valued voxels:   * zerominmax =   Compute the min/max of all voxels.  * zerosigma  =   Compute the standard deviation of all                   voxels.  * zeromedian =   Compute the median of all voxels.  * zeromode   =   Compute the mode of all voxels.  * summary    =   Only output a summary line with the grand                   mean across all briks in the input dataset.                   This option cannot be used with nomeanout.  More that one option can be specified.
    nomeanout: 'True'
    # type=bool|default=False: Do not include the (zero-inclusive) mean among computed stats
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dROIstats -mask skeleton_mask.nii.gz -nomeanout -nzmean -nzmedian -nzvoxels functional.nii > functional_roistat.1D
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"functional.nii"'
    # type=file|default=<undefined>: input dataset
    mask_file: '"skeleton_mask.nii.gz"'
    # type=file|default=<undefined>: input mask
    stat: '["mean", "median", "voxels"]'
    # type=inputmultiobject|default=[]: Statistics to compute. Options include:   * mean       =   Compute the mean using only non_zero voxels.                   Implies the opposite for the mean computed                   by default.  * median     =   Compute the median of nonzero voxels  * mode       =   Compute the mode of nonzero voxels.                   (integral valued sets only)  * minmax     =   Compute the min/max of nonzero voxels  * sum        =   Compute the sum using only nonzero voxels.  * voxels     =   Compute the number of nonzero voxels  * sigma      =   Compute the standard deviation of nonzero                   voxels  Statistics that include zero-valued voxels:   * zerominmax =   Compute the min/max of all voxels.  * zerosigma  =   Compute the standard deviation of all                   voxels.  * zeromedian =   Compute the median of all voxels.  * zeromode   =   Compute the mode of all voxels.  * summary    =   Only output a summary line with the grand                   mean across all briks in the input dataset.                   This option cannot be used with nomeanout.  More that one option can be specified.
    nomeanout: 'True'
    # type=bool|default=False: Do not include the (zero-inclusive) mean among computed stats
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
