# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.preprocess.Allineate' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Program to align one dataset (the 'source') to a base dataset
# 
#     For complete details, see the `3dAllineate Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dAllineate.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> allineate = afni.Allineate()
#     >>> allineate.inputs.in_file = 'functional.nii'
#     >>> allineate.inputs.out_file = 'functional_allineate.nii'
#     >>> allineate.inputs.in_matrix = 'cmatrix.mat'
#     >>> allineate.cmdline
#     '3dAllineate -source functional.nii -prefix functional_allineate.nii -1Dmatrix_apply cmatrix.mat'
#     >>> res = allineate.run()  # doctest: +SKIP
# 
#     >>> allineate = afni.Allineate()
#     >>> allineate.inputs.in_file = 'functional.nii'
#     >>> allineate.inputs.reference = 'structural.nii'
#     >>> allineate.inputs.allcostx = 'out.allcostX.txt'
#     >>> allineate.cmdline
#     '3dAllineate -source functional.nii -base structural.nii -allcostx |& tee out.allcostX.txt'
#     >>> res = allineate.run()  # doctest: +SKIP
# 
#     >>> allineate = afni.Allineate()
#     >>> allineate.inputs.in_file = 'functional.nii'
#     >>> allineate.inputs.reference = 'structural.nii'
#     >>> allineate.inputs.nwarp_fixmot = ['X', 'Y']
#     >>> allineate.cmdline
#     '3dAllineate -source functional.nii -nwarp_fixmotX -nwarp_fixmotY -prefix functional_allineate -base structural.nii'
#     >>> res = allineate.run()  # doctest: +SKIP
#     
task_name: Allineate
nipype_name: Allineate
nipype_module: nipype.interfaces.afni.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    allcostx: Path
    # type=file: Compute and print ALL available cost functionals for the un-warped inputs
    # type=file|default=<undefined>: Compute and print ALL available cost functionals for the un-warped inputsAND THEN QUIT. If you use this option none of the other expected outputs will be produced
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input file to 3dAllineate
    in_matrix: datascience/text-matrix
    # type=file|default=<undefined>: matrix to align input file
    in_param_file: generic/file
    # type=file|default=<undefined>: Read warp parameters from file and apply them to the source dataset, and produce a new dataset
    master: generic/file
    # type=file|default=<undefined>: Write the output dataset on the same grid as this file.
    out_file: Path
    # type=file: output image file name
    # type=file|default=<undefined>: output file from 3dAllineate
    out_matrix: Path
    # type=file: matrix to align input file
    # type=file|default=<undefined>: Save the transformation matrix for each volume.
    out_param_file: Path
    # type=file: warp parameters
    # type=file|default=<undefined>: Save the warp parameters in ASCII (.1D) format.
    out_weight_file: Path
    # type=file: weight volume
    # type=file|default=<undefined>: Write the weight volume to disk as a dataset
    reference: medimage/nifti1
    # type=file|default=<undefined>: file to be used as reference, the first volume will be used if not given the reference will be the first volume of in_file.
    source_mask: generic/file
    # type=file|default=<undefined>: mask the input dataset
    weight_file: generic/file
    # type=file|default=<undefined>: Set the weighting for each voxel in the base dataset; larger weights mean that voxel count more in the cost function. Must be defined on the same grid as the base dataset
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    allcostx: text/text-file
    # type=file: Compute and print ALL available cost functionals for the un-warped inputs
    # type=file|default=<undefined>: Compute and print ALL available cost functionals for the un-warped inputsAND THEN QUIT. If you use this option none of the other expected outputs will be produced
    out_file: medimage/nifti1
    # type=file: output image file name
    # type=file|default=<undefined>: output file from 3dAllineate
    out_matrix: generic/file
    # type=file: matrix to align input file
    # type=file|default=<undefined>: Save the transformation matrix for each volume.
    out_param_file: generic/file
    # type=file: warp parameters
    # type=file|default=<undefined>: Save the warp parameters in ASCII (.1D) format.
    out_weight_file: generic/file
    # type=file: weight volume
    # type=file|default=<undefined>: Write the weight volume to disk as a dataset
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dAllineate
    reference:
    # type=file|default=<undefined>: file to be used as reference, the first volume will be used if not given the reference will be the first volume of in_file.
    out_file:
    # type=file: output image file name
    # type=file|default=<undefined>: output file from 3dAllineate
    out_param_file:
    # type=file: warp parameters
    # type=file|default=<undefined>: Save the warp parameters in ASCII (.1D) format.
    in_param_file:
    # type=file|default=<undefined>: Read warp parameters from file and apply them to the source dataset, and produce a new dataset
    out_matrix:
    # type=file: matrix to align input file
    # type=file|default=<undefined>: Save the transformation matrix for each volume.
    in_matrix:
    # type=file|default=<undefined>: matrix to align input file
    overwrite:
    # type=bool|default=False: overwrite output file if it already exists
    allcostx:
    # type=file: Compute and print ALL available cost functionals for the un-warped inputs
    # type=file|default=<undefined>: Compute and print ALL available cost functionals for the un-warped inputsAND THEN QUIT. If you use this option none of the other expected outputs will be produced
    cost:
    # type=enum|default='leastsq'|allowed['corratio_add','corratio_mul','corratio_uns','crA','crM','crU','hel','hellinger','leastsq','ls','mi','mutualinfo','nmi','norm_mutualinfo']: Defines the 'cost' function that defines the matching between the source and the base
    interpolation:
    # type=enum|default='nearestneighbour'|allowed['cubic','linear','nearestneighbour','quintic']: Defines interpolation method to use during matching
    final_interpolation:
    # type=enum|default='nearestneighbour'|allowed['cubic','linear','nearestneighbour','quintic','wsinc5']: Defines interpolation method used to create the output dataset
    nmatch:
    # type=int|default=0: Use at most n scattered points to match the datasets.
    no_pad:
    # type=bool|default=False: Do not use zero-padding on the base image.
    zclip:
    # type=bool|default=False: Replace negative values in the input datasets (source & base) with zero.
    convergence:
    # type=float|default=0.0: Convergence test in millimeters (default 0.05mm).
    usetemp:
    # type=bool|default=False: temporary file use
    check:
    # type=list|default=[]: After cost functional optimization is done, start at the final parameters and RE-optimize using this new cost functions. If the results are too different, a warning message will be printed. However, the final parameters from the original optimization will be used to create the output dataset.
    one_pass:
    # type=bool|default=False: Use only the refining pass -- do not try a coarse resolution pass first.  Useful if you know that only small amounts of image alignment are needed.
    two_pass:
    # type=bool|default=False: Use a two pass alignment strategy for all volumes, searching for a large rotation+shift and then refining the alignment.
    two_blur:
    # type=float|default=0.0: Set the blurring radius for the first pass in mm.
    two_first:
    # type=bool|default=False: Use -twopass on the first image to be registered, and then on all subsequent images from the source dataset, use results from the first image's coarse pass to start the fine pass.
    two_best:
    # type=int|default=0: In the coarse pass, use the best 'bb' set of initialpoints to search for the starting point for the finepass.  If bb==0, then no search is made for the beststarting point, and the identity transformation isused as the starting point.  [Default=5; min=0 max=11]
    fine_blur:
    # type=float|default=0.0: Set the blurring radius to use in the fine resolution pass to 'x' mm.  A small amount (1-2 mm?) of blurring at the fine step may help with convergence, if there is some problem, especially if the base volume is very noisy. [Default == 0 mm = no blurring at the final alignment pass]
    center_of_mass:
    # type=str|default='': Use the center-of-mass calculation to bracket the shifts.
    autoweight:
    # type=str|default='': Compute a weight function using the 3dAutomask algorithm plus some blurring of the base image.
    automask:
    # type=int|default=0: Compute a mask function, set a value for dilation or 0.
    autobox:
    # type=bool|default=False: Expand the -automask function to enclose a rectangular box that holds the irregular mask.
    nomask:
    # type=bool|default=False: Don't compute the autoweight/mask; if -weight is not also used, then every voxel will be counted equally.
    weight_file:
    # type=file|default=<undefined>: Set the weighting for each voxel in the base dataset; larger weights mean that voxel count more in the cost function. Must be defined on the same grid as the base dataset
    weight:
    # type=traitcompound|default=None: Set the weighting for each voxel in the base dataset; larger weights mean that voxel count more in the cost function. If an image file is given, the volume must be defined on the same grid as the base dataset
    out_weight_file:
    # type=file: weight volume
    # type=file|default=<undefined>: Write the weight volume to disk as a dataset
    source_mask:
    # type=file|default=<undefined>: mask the input dataset
    source_automask:
    # type=int|default=0: Automatically mask the source dataset with dilation or 0.
    warp_type:
    # type=enum|default='shift_only'|allowed['affine_general','shift_only','shift_rotate','shift_rotate_scale']: Set the warp type.
    warpfreeze:
    # type=bool|default=False: Freeze the non-rigid body parameters after first volume.
    replacebase:
    # type=bool|default=False: If the source has more than one volume, then after the first volume is aligned to the base.
    replacemeth:
    # type=enum|default='leastsq'|allowed['corratio_add','corratio_mul','corratio_uns','crA','crM','crU','hel','hellinger','leastsq','ls','mi','mutualinfo','nmi','norm_mutualinfo']: After first volume is aligned, switch method for later volumes. For use with '-replacebase'.
    epi:
    # type=bool|default=False: Treat the source dataset as being composed of warped EPI slices, and the base as comprising anatomically 'true' images.  Only phase-encoding direction image shearing and scaling will be allowed with this option.
    maxrot:
    # type=float|default=0.0: Maximum allowed rotation in degrees.
    maxshf:
    # type=float|default=0.0: Maximum allowed shift in mm.
    maxscl:
    # type=float|default=0.0: Maximum allowed scaling factor.
    maxshr:
    # type=float|default=0.0: Maximum allowed shearing factor.
    master:
    # type=file|default=<undefined>: Write the output dataset on the same grid as this file.
    newgrid:
    # type=float|default=0.0: Write the output dataset using isotropic grid spacing in mm.
    nwarp:
    # type=enum|default='bilinear'|allowed['bilinear','cubic','heptic','nonic','poly3','poly5','poly7','poly9','quintic']: Experimental nonlinear warping: bilinear or legendre poly.
    nwarp_fixmot:
    # type=list|default=[]: To fix motion along directions.
    nwarp_fixdep:
    # type=list|default=[]: To fix non-linear warp dependency along directions.
    verbose:
    # type=bool|default=False: Print out verbose progress reports.
    quiet:
    # type=bool|default=False: Don't print out verbose progress reports.
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dAllineate
    out_file: '"functional_allineate.nii"'
    # type=file: output image file name
    # type=file|default=<undefined>: output file from 3dAllineate
    in_matrix:
    # type=file|default=<undefined>: matrix to align input file
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dAllineate
    reference:
    # type=file|default=<undefined>: file to be used as reference, the first volume will be used if not given the reference will be the first volume of in_file.
    allcostx: '"out.allcostX.txt"'
    # type=file: Compute and print ALL available cost functionals for the un-warped inputs
    # type=file|default=<undefined>: Compute and print ALL available cost functionals for the un-warped inputsAND THEN QUIT. If you use this option none of the other expected outputs will be produced
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dAllineate
    reference:
    # type=file|default=<undefined>: file to be used as reference, the first volume will be used if not given the reference will be the first volume of in_file.
    nwarp_fixmot: '["X", "Y"]'
    # type=list|default=[]: To fix motion along directions.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dAllineate -source functional.nii -prefix functional_allineate.nii -1Dmatrix_apply cmatrix.mat
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"functional.nii"'
    # type=file|default=<undefined>: input file to 3dAllineate
    out_file: '"functional_allineate.nii"'
    # type=file: output image file name
    # type=file|default=<undefined>: output file from 3dAllineate
    in_matrix: '"cmatrix.mat"'
    # type=file|default=<undefined>: matrix to align input file
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: 3dAllineate -source functional.nii -base structural.nii -allcostx |& tee out.allcostX.txt
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"functional.nii"'
    # type=file|default=<undefined>: input file to 3dAllineate
    reference: '"structural.nii"'
    # type=file|default=<undefined>: file to be used as reference, the first volume will be used if not given the reference will be the first volume of in_file.
    allcostx: '"out.allcostX.txt"'
    # type=file: Compute and print ALL available cost functionals for the un-warped inputs
    # type=file|default=<undefined>: Compute and print ALL available cost functionals for the un-warped inputsAND THEN QUIT. If you use this option none of the other expected outputs will be produced
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: 3dAllineate -source functional.nii -nwarp_fixmotX -nwarp_fixmotY -prefix functional_allineate -base structural.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"functional.nii"'
    # type=file|default=<undefined>: input file to 3dAllineate
    reference: '"structural.nii"'
    # type=file|default=<undefined>: file to be used as reference, the first volume will be used if not given the reference will be the first volume of in_file.
    nwarp_fixmot: '["X", "Y"]'
    # type=list|default=[]: To fix motion along directions.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
