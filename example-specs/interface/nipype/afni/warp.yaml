# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.preprocess.Warp' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Use 3dWarp for spatially transforming a dataset.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> warp = afni.Warp()
#     >>> warp.inputs.in_file = 'structural.nii'
#     >>> warp.inputs.deoblique = True
#     >>> warp.inputs.out_file = 'trans.nii.gz'
#     >>> warp.cmdline
#     '3dWarp -deoblique -prefix trans.nii.gz structural.nii'
#     >>> res = warp.run()  # doctest: +SKIP
# 
#     >>> warp_2 = afni.Warp()
#     >>> warp_2.inputs.in_file = 'structural.nii'
#     >>> warp_2.inputs.newgrid = 1.0
#     >>> warp_2.inputs.out_file = 'trans.nii.gz'
#     >>> warp_2.cmdline
#     '3dWarp -newgrid 1.000000 -prefix trans.nii.gz structural.nii'
#     >>> res = warp_2.run()  # doctest: +SKIP
# 
#     See Also
#     --------
#     For complete details, see the `3dWarp Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dWarp.html>`__.
# 
#     
task_name: Warp
nipype_name: Warp
nipype_module: nipype.interfaces.afni.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    gridset: generic/file
    # type=file|default=<undefined>: copy grid of specified dataset
    in_file: medimage/nifti1
    # type=file|default=<undefined>: input file to 3dWarp
    matparent: generic/file
    # type=file|default=<undefined>: apply transformation from 3dWarpDrive
    oblique_parent: generic/file
    # type=file|default=<undefined>: Read in the oblique transformation matrix from an oblique dataset and make cardinal dataset oblique to match
    out_file: Path
    # type=file: Warped file.
    # type=file|default=<undefined>: output image file name
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/nifti-gz
    # type=file: Warped file.
    # type=file|default=<undefined>: output image file name
    warp_file: generic/file
    # type=file: warp transform .mat file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dWarp
    out_file:
    # type=file: Warped file.
    # type=file|default=<undefined>: output image file name
    tta2mni:
    # type=bool|default=False: transform dataset from Talairach to MNI152
    mni2tta:
    # type=bool|default=False: transform dataset from MNI152 to Talaraich
    matparent:
    # type=file|default=<undefined>: apply transformation from 3dWarpDrive
    oblique_parent:
    # type=file|default=<undefined>: Read in the oblique transformation matrix from an oblique dataset and make cardinal dataset oblique to match
    deoblique:
    # type=bool|default=False: transform dataset from oblique to cardinal
    interp:
    # type=enum|default='linear'|allowed['NN','cubic','linear','quintic']: spatial interpolation methods [default = linear]
    gridset:
    # type=file|default=<undefined>: copy grid of specified dataset
    newgrid:
    # type=float|default=0.0: specify grid of this size (mm)
    zpad:
    # type=int|default=0: pad input dataset with N planes of zero on all sides.
    verbose:
    # type=bool|default=False: Print out some information along the way.
    save_warp:
    # type=bool|default=False: save warp as .mat file
    num_threads:
    # type=int|default=1: set number of threads
    outputtype:
    # type=enum|default='AFNI'|allowed['AFNI','NIFTI','NIFTI_GZ']: AFNI output filetype
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dWarp
    deoblique: 'True'
    # type=bool|default=False: transform dataset from oblique to cardinal
    out_file: '"trans.nii.gz"'
    # type=file: Warped file.
    # type=file|default=<undefined>: output image file name
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: input file to 3dWarp
    newgrid: '1.0'
    # type=float|default=0.0: specify grid of this size (mm)
    out_file: '"trans.nii.gz"'
    # type=file: Warped file.
    # type=file|default=<undefined>: output image file name
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dWarp -deoblique -prefix trans.nii.gz structural.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"structural.nii"'
    # type=file|default=<undefined>: input file to 3dWarp
    deoblique: 'True'
    # type=bool|default=False: transform dataset from oblique to cardinal
    out_file: '"trans.nii.gz"'
    # type=file: Warped file.
    # type=file|default=<undefined>: output image file name
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: 3dWarp -newgrid 1.000000 -prefix trans.nii.gz structural.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file: '"structural.nii"'
    # type=file|default=<undefined>: input file to 3dWarp
    newgrid: '1.0'
    # type=float|default=0.0: specify grid of this size (mm)
    out_file: '"trans.nii.gz"'
    # type=file: Warped file.
    # type=file|default=<undefined>: output image file name
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
