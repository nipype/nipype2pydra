# This file is used to manually specify the semi-automatic conversion of
# 'nipype.algorithms.confounds.ComputeDVARS' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Computes the DVARS.
#     
task_name: ComputeDVARS
nipype_name: ComputeDVARS
nipype_module: nipype.algorithms.confounds
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: generic/file
    # type=file|default=<undefined>: functional data, after HMC
    in_mask: generic/file
    # type=file|default=<undefined>: a brain mask
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fig_nstd: generic/file
    # type=file: output DVARS plot
    fig_std: generic/file
    # type=file: output DVARS plot
    fig_vxstd: generic/file
    # type=file: output DVARS plot
    out_all: generic/file
    # type=file: output text file
    out_nstd: generic/file
    # type=file: output text file
    out_std: generic/file
    # type=file: output text file
    out_vxstd: generic/file
    # type=file: output text file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
    avg_nstd: avg_nstd_callable
    # type=float: 
    avg_std: avg_std_callable
    # type=float: 
    avg_vxstd: avg_vxstd_callable
    # type=float: 
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    # type=file|default=<undefined>: functional data, after HMC
    in_mask:
    # type=file|default=<undefined>: a brain mask
    remove_zerovariance:
    # type=bool|default=True: remove voxels with zero variance
    variance_tol:
    # type=float|default=1e-07: maximum variance to consider "close to" zero for the purposes of removal
    save_std:
    # type=bool|default=True: save standardized DVARS
    save_nstd:
    # type=bool|default=False: save non-standardized DVARS
    save_vxstd:
    # type=bool|default=False: save voxel-wise standardized DVARS
    save_all:
    # type=bool|default=False: output all DVARS
    series_tr:
    # type=float|default=0.0: repetition time in sec.
    save_plot:
    # type=bool|default=False: write DVARS plot
    figdpi:
    # type=int|default=100: output dpi for the plot
    figsize:
    # type=tuple|default=(11.7, 2.3): output figure size
    figformat:
    # type=enum|default='png'|allowed['pdf','png','svg']: output format for figures
    intensity_normalization:
    # type=float|default=1000.0: Divide value in each voxel at each timepoint by the median calculated across all voxelsand timepoints within the mask (if specified)and then multiply by the value specified bythis parameter. By using the default (1000)output DVARS will be expressed in x10 % BOLD units compatible with Power et al.2012. Set this to 0 to disable intensitynormalization altogether.
  imports:
  # list[nipype2pydra.task.base.explicitimport] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests: []
